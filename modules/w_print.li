#import "io.li"
#import "reflect.li"
// System calls
memcpy : (dst : ^void, src : ^void, size : u64) -> ^void #extern("msvcrt.dll");

/*
memcpy : (dst : ^void, src : ^void, size : u64) -> ^void {
    for i :u64= 0; i < size; i += 1 {
        dst[i] = src[i];
    }
    return dst;
}
*/

// Print generic

string_equal:(s1 : string, s2 : string) -> bool {
    if s1.length != s2.length return false;
    for i:u32=0; i < s1.length; i += 1 {
        if s1.data[i] != s2.data[i] return false;
    }
    return true;
}

GetStdHandle : (std_handle : s32) -> ^void #extern("Kernel32.dll");
WriteConsoleA : (handle : ^void, str : ^u8, length : s32, written : ^s32, reserved : s32) -> bool #extern("Kernel32.dll");

print_string:(s : string) -> u64 {
    handle := GetStdHandle(-11);
    written : s32;
    WriteConsoleA(handle, s.data, s.length -> s32, &written, 0);
    return written -> u64;
}

print_string_c:(str : ^u8) -> u64 {
    length :u32= 0;
    start := str;
    while *str != 0 {
        length += 1;
        str += 1;
    }
    return print_string(string:{0, length, start});
}

print_test:(args : ...) -> u64 {
    a := args -> ^array;
    count := a.length;
    type_info := a.type_info;
    
    //
    values := a.data -> ^User_Type_Value;
    for i :u64= 0; i < count; i += 1 {
        value := values[i];
        print_type(value.type);
        print_string("\n");
    }
}

// TODO(psv): make it faster
print:(fmt : string, args : ...) -> u64 {
    length :u64= 0;

    if args == null {
        length += print_string(fmt);
        return length;
    }

    a := args -> ^array;
    count := a.length;
    values := a.data -> ^User_Type_Value;

    previous :u8= 0;
    for i :u32= 0, j := 0; i < fmt.length; i += 1 {
        at := fmt.data[i];
        value := values[j];
        if at == '%' && previous != '\\' {
            j += 1;
            print_value_literal(value);
        } else if at == '$' && previous != '\\' {
            print_type(value.type);
        } else if at == '\\' && previous != '\\' {
        } else {
            handle := GetStdHandle(-11);
            written : s32;
            WriteConsoleA(handle, &at, 1, &written, 0);
        }
        previous = at;
    }
} 

print_bytes:(v : ^u8, count : s32) -> u64 {
    for i := 0; i < count; i += 1 {
        if i > 0 print_string(", ");
        print_string("0x");
        print_u8(v[i], 16);
    }
}

print_value_literal_string:(v : User_Type_Value) -> u64 {
    val := v.value; // ^void
    t := v.type;
    s_type := t.description.struct_desc;
    
    res : string;

    for i := 0; i < s_type.fields_count; i += 1 {
        ftype := s_type.fields_types[i];
        offset := s_type.fields_offsets_bits[i] / 8;
        vv := val + offset;
        type_val := User_Type_Value:{vv, ftype};

        // length
        if i == 1 {
            l := *(vv -> ^u64);
            res.length = l -> u32;
        }

        // data
        if i == 2 {
            res.data = *(vv -> ^^u8);
        }
    }
    print_string(res);
}

print_value_literal_struct:(v : User_Type_Value) -> u64 {
    t := v.type;
    val := v.value; // ^void

    print_string("{ ");

    s_type := t.description.struct_desc;

    for i := 0; i < s_type.fields_count; i += 1 {
        if i > 0 print_string(", ");
        ftype := s_type.fields_types[i];
        offset := s_type.fields_offsets_bits[i] / 8;
        vv := val + offset;
        type_val := User_Type_Value:{vv, ftype};
        print_value_literal(type_val);
    }

    print_string(" }");
}

print_value_literal_union:(v : User_Type_Value) -> u64 {
    
}

print_value_literal_array:(v : User_Type_Value) -> u64 {
    t := v.type;
    val := v.value; // ^void

    array_type := t.description.array_desc;
    element_type := array_type.array_of;

    print_string("[");

    for i :u64= 0; i < array_type.dimension; i += 1 {
        if i > 0 print_string(", ");
        offset := val + element_type.type_size_bytes->u64 * i;
        type_val := User_Type_Value:{offset, element_type};
        print_value_literal(type_val);
    }

    print_string("]");
}

print_value_literal:(v : User_Type_Value) -> u64 {
    t := v.type;
    val := v.value; // ^void => &[2]

    if t.kind == LIGHT_TYPE_KIND_PRIMITIVE {
        p := t.description.primitive;
        if (p == LIGHT_TYPE_PRIMITIVE_VOID) {
            // cannot have a literal
        } else if (p == LIGHT_TYPE_PRIMITIVE_S8) {
            l := *(val -> ^s8);
            print_s8(l);
        } else if (p == LIGHT_TYPE_PRIMITIVE_S16) {
            l := *(val -> ^s16);
            print_s16(l);
        } else if (p == LIGHT_TYPE_PRIMITIVE_S32) {
            l := *(val -> ^s32);
            print_s32(l);
        } else if (p == LIGHT_TYPE_PRIMITIVE_S64) {
            l := *(val -> ^s64);
            print_s64(l);
        } else if (p == LIGHT_TYPE_PRIMITIVE_U8) {
            l := *(val -> ^u8);
            print_string("0x");
            print_u8(l, 16);
        } else if (p == LIGHT_TYPE_PRIMITIVE_U16) {
            l := *(val -> ^u16);
            print_string("0x");
            print_u16(l, 16);
        } else if (p == LIGHT_TYPE_PRIMITIVE_U32) {
            l := *(val -> ^u32);
            print_string("0x");
            print_u32(l, 16);
        } else if (p == LIGHT_TYPE_PRIMITIVE_U64) {
            l := *(val -> ^u64);
            print_string("0x");
            print_u64(l, 16);
        } else if (p == LIGHT_TYPE_PRIMITIVE_R32) {
            l := *(val -> ^r32);
            print_r32(l);
        } else if (p == LIGHT_TYPE_PRIMITIVE_R64) {
            l := *(val -> ^r64);
            print_r64(l);
        } else if (p == LIGHT_TYPE_PRIMITIVE_BOOL) {
            l := *(val -> ^bool);
            if l {
                print_string("true");
            } else {
                print_string("false");
            }
        }
    } else if t.kind == LIGHT_TYPE_KIND_POINTER || t.kind == LIGHT_TYPE_KIND_FUNCTION {
        l := *(val -> ^^void) -> u64;
        print_string("0x");
        print_u64(l, 16);
    } else if t.kind == LIGHT_TYPE_KIND_STRUCT {
        print_value_literal_struct(v);
    } else if t.kind == LIGHT_TYPE_KIND_UNION {
        print_value_literal_union(v);
    } else if t.kind == LIGHT_TYPE_KIND_ALIAS {
        if t.description.alias_desc.alias_to.kind == LIGHT_TYPE_KIND_STRUCT {
            s := User_Type_Value:{val, t.description.alias_desc.alias_to};
            ls := "string";
            if string_equal(t.description.alias_desc.name, ls) {
                print_value_literal_string(s);
            } else {
                print_string(t.description.alias_desc.name);
                print_string(":");
                print_value_literal_struct(s);
            }
        } else {
            type_val := User_Type_Value:{val, t.description.alias_desc.alias_to};
            print_value_literal(type_val);
        }
    } else if t.kind == LIGHT_TYPE_KIND_ARRAY {
        print_value_literal_array(v);
    }

    return 0;
}

// Print types

print_type_primitive:(t : ^User_Type_Info) -> u64 {
    p := t.description.primitive;
    
    str := "";
    if (p == LIGHT_TYPE_PRIMITIVE_VOID) {
        str = "void";
    } else if (p == LIGHT_TYPE_PRIMITIVE_S8) {
        str = "s8";
    } else if (p == LIGHT_TYPE_PRIMITIVE_S16) {
        str = "s16";
    } else if (p == LIGHT_TYPE_PRIMITIVE_S32) {
        str = "s32";
    } else if (p == LIGHT_TYPE_PRIMITIVE_S64) {
        str = "s64";
    } else if (p == LIGHT_TYPE_PRIMITIVE_U8) {
        str = "u8";
    } else if (p == LIGHT_TYPE_PRIMITIVE_U16) {
        str = "u16";
    } else if (p == LIGHT_TYPE_PRIMITIVE_U32) {
        str = "u32";
    } else if (p == LIGHT_TYPE_PRIMITIVE_U64) {
        str = "u64";
    } else if (p == LIGHT_TYPE_PRIMITIVE_R32) {
        str = "r32";
    } else if (p == LIGHT_TYPE_PRIMITIVE_R64) {
        str = "r64";
    } else if (p == LIGHT_TYPE_PRIMITIVE_BOOL) {
        str = "bool";
    }

    return print_string(str);
}

print_type_pointer:(t : ^User_Type_Info) -> u64 {
    length := print_string("^");
    length += print_type(t.description.pointer_to);
    return length;
}

print_type_struct:(t : ^User_Type_Info) -> u64 {
    s := t.description.struct_desc;

    length := print_string("struct { ");
    for i := 0; i < s.fields_count; i += 1 {
        if i > 0 length += print_string("; ");
        length += print_string(s.fields_names[i]);
        length += print_string(" : ");
        length += print_type(s.fields_types[i]);
    }
    length += print_string(" }");
    return length;
}

print_type_union:(t : ^User_Type_Info) -> u64 {
    s := t.description.union_desc;

    length := print_string("union { ");
    for i := 0; i < s.fields_count; i += 1 {
        if i > 0 length += print_string("; ");
        length += print_string(s.fields_names[i]);
        length += print_string(" : ");
        length += print_type(s.fields_types[i]);
    }
    length += print_string(" }");
    return length;
}

print_type_alias:(t : ^User_Type_Info) -> u64 {
    s := t.description.alias_desc;
    length := print_string(s.name);
    length += print_string(" ");
    length += print_type(s.alias_to);
    return length;
}

print_type_array:(t : ^User_Type_Info) -> u64 {
    s := t.description.array_desc;

    length := print_string("[");
    length += print_u64(s.dimension, 10);
    length += print_string("]");
    length += print_type(s.array_of);

    return length;
}

print_type_function:(t : ^User_Type_Info) -> u64 {
    s := t.description.function_desc;

    length := print_string("(");
    for i := 0; i < s.arguments_count; i += 1 {
        if i > 0 length += print_string(", ");
        arg := s.arguments_type[i];
        length += print_type(arg);
    }
    length += print_string(") -> ");
    length += print_type(s.return_type);

    return length;
}

print_type:(t : ^User_Type_Info) -> u64 {
    length : u64 = 0;
    if t.kind == LIGHT_TYPE_KIND_PRIMITIVE {
        length += print_type_primitive(t);
    } else if t.kind == LIGHT_TYPE_KIND_POINTER {
        length += print_type_pointer(t);
    } else if t.kind == LIGHT_TYPE_KIND_STRUCT {
        length += print_type_struct(t);
    } else if t.kind == LIGHT_TYPE_KIND_UNION {
        length += print_type_union(t);
    } else if t.kind == LIGHT_TYPE_KIND_ALIAS {
        length += print_type_alias(t);
    } else if t.kind == LIGHT_TYPE_KIND_ARRAY {
        length += print_type_array(t);
    } else if t.kind == LIGHT_TYPE_KIND_FUNCTION {
        length += print_type_function(t);
    }
    return length;
}

// Print primitive types

u64_to_str:(val : u64, buffer : [32]u8) -> u64 {
    b : [32]u8;
    sum : s32;

    if val == 0 {
        buffer[0] = '0';
        return 1;
    }

    auxbuffer := &b[31];
    start := auxbuffer + sum;

    while val != 0 {
        rem := val % 10;
        val /= 10;
        *auxbuffer = '0' + rem -> u8;
        auxbuffer -= 1;
    }

    size := start - auxbuffer;
    memcpy(&buffer[sum], auxbuffer + 1, size -> u64);
    return size -> u64;
}

s64_to_str:(val : s64, buffer : [32]u8) -> u64 {
    b : [32]u8;
    sum : s32 = 0;

    if val == 0 {
        buffer[0] = '0';
        return 1;
    }
    if val < 0 {
        val = -val;
        buffer[0] = '-';
        sum = 1;
    }
    auxbuffer := &b[31];
    start := auxbuffer + sum;

    while val != 0 {
        rem := val % 10;
        val /= 10;
        *auxbuffer = '0' + rem -> u8;
        auxbuffer -= 1;
    }

    size := start - auxbuffer;
    memcpy(&buffer[sum], auxbuffer + 1, size -> u64);
    return size -> u64;
}

unsigned_to_str_base16:(value : u64, bitsize : u64, leading_zeros : bool, capitalized : bool, buffer : [16]u8) -> u64
{
    i :u64= 0;
    mask : u64 = 0xf000000000000000 >> (64 - bitsize);
    cap := 0x57;
    if capitalized {
        cap = 0x37; // hex letters capitalized
    }
    for ; i < (bitsize / 4); i += 1 {
        f : u64 = (value & mask) >> (bitsize - 4);
        if(f > 9) buffer[i] = f->u8 + 0x57;//0x37;
        else buffer[i] = f->u8 + 0x30;
        value = value << 4;
    }
    return i;
}

print_s8:(value : s8) -> u64 {
    buffer: [32]u8;
    length := s64_to_str(value->s64, buffer);
    written : s32;
    WriteConsoleA(GetStdHandle(-11), buffer->^void, length -> s32, &written, 0);
    return length;
}

print_s16:(value : s16) -> u64 {
    buffer: [32]u8;
    length := s64_to_str(value->s64, buffer);
    written : s32;
    WriteConsoleA(GetStdHandle(-11), buffer->^void, length -> s32, &written, 0);
    return length;
}

print_s32:(value : s32) -> u64 {
    buffer: [32]u8;
    written : s32;
    length := s64_to_str(value->s64, buffer);
    WriteConsoleA(GetStdHandle(-11), buffer->^void, length -> s32, &written, 0);
    return length;
}

print_s64:(value : s64) -> u64 {
    buffer: [32]u8;
    written : s32;
    length := s64_to_str(value, buffer);
    WriteConsoleA(GetStdHandle(-11), buffer->^void, length -> s32, &written, 0);
    return length;
}

print_u8:(value : u8, base : s32) -> u64 {
    buffer : [16]u8;
    written : s32;
    length := unsigned_to_str_base16(value->u64, 8, true, false, buffer);
    WriteConsoleA(GetStdHandle(-11), buffer->^void, length -> s32, &written, 0);
    return length;
}

print_u16:(value : u16, base : s32) -> u64 {
    buffer : [16]u8;
    written : s32;
    length := unsigned_to_str_base16(value->u64, 16, true, false, buffer);
    WriteConsoleA(GetStdHandle(-11), buffer->^void, length -> s32, &written, 0);
    return length;
}

print_u32:(value : u32, base : s32) -> u64 {
    buffer : [16]u8;
    written : s32;
    length := unsigned_to_str_base16(value->u64, 32, true, false, buffer);
    WriteConsoleA(GetStdHandle(-11), buffer->^void, length -> s32, &written, 0);
    return length;
}

print_u64:(value : u64, base : s32) -> u64 {
    length : u64;
    written : s32;
    
    if base == 16 {
        buffer : [16]u8;
        length = unsigned_to_str_base16(value, 64, true, false, buffer);
        WriteConsoleA(GetStdHandle(-11), buffer->^void, length -> s32, &written, 0);
    } else if base == 10 {
        buffer : [32]u8;
        length = u64_to_str(value, buffer);
        WriteConsoleA(GetStdHandle(-11), buffer->^void, length -> s32, &written, 0);
    }

    return length;
}

// TODO(psv): very big numbers are incorrect
r64_to_str:(v : r64, buffer : [64]u8) -> u64 {
    l :u64= 0;
    if v < 0.0 {
        buffer[l] = '-';
        l += 1;
        v = -v;
    }

    l += s64_to_str(v->s64, (buffer->^u8 + l) -> [32]u8);
    precision := 6;

    fractional_part := v - ((v -> s64) -> r64);

    buffer[l] = '.';
    l += 1;

    if fractional_part == 0.0 {
        buffer[l] = '0';
        l += 1;
        return l;
    }

    while precision > 0 && fractional_part > 0.0 {
        fractional_part *= 10.0;
        buffer[l] = fractional_part -> u8 + '0';
        fractional_part = fractional_part - ((fractional_part -> s64) -> r64);
        l += 1;
        precision -= 1;
    }
    return l;
}

// TODO(psv): very big numbers are incorrect
r32_to_str:(v : r32, buffer : [32]u8) -> u64 {
    l :u64= 0;
    if v < 0.0 {
        buffer[l] = '-';
        l += 1;
        v = -v;
    }

    l += s64_to_str(v -> s64, (buffer->^u8 + l) -> [32]u8);
    precision := 6;

    fractional_part := v - ((v -> s32) -> r32);

    buffer[l] = '.';
    l += 1;

    if fractional_part == 0.0 {
        buffer[l] = '0';
        l += 1;
        return l;
    }

    while precision > 0 && fractional_part > 0.0 {
        fractional_part *= 10.0;
        buffer[l] = fractional_part->u8 + '0';
        fractional_part = fractional_part - ((fractional_part -> s32) -> r32);
        l += 1;
        precision -= 1;
    }
    return l;
}

print_r32:(v : r32) -> u64 {
    buffer : [32]u8;
    length := r32_to_str(v, buffer);
    written : s32;
    
    WriteConsoleA(GetStdHandle(-11), buffer->^void, length -> s32, &written, 0);
    return length;
}

print_r64:(v : r64) -> u64 {
    buffer : [64]u8;
    written : s32;
    length := r64_to_str(v, buffer);

    WriteConsoleA(GetStdHandle(-11), buffer->^void, length -> s32, &written, 0);
    return length;
}