PRECEDENCE_1 = 		//	 || &&
PRECEDENCE_2 = 		//	 == >= <= != > <
PRECEDENCE_3 = 		//	 ^ | & >> <<
PRECEDENCE_4 = 		//	 + -
PRECEDENCE_5 = 		//	 * / %
PRECEDENCE_6 = 		//	 &(addressof) ~ 
PRECEDENCE_7 = 		//	 *(dereference)	cast !
PRECEDENCE_8 = 		//   []
PRECEDENCE_9 = 		//	 .
PRECEDENCE_MAX,		//   lit, variables, proc_calls

EXPRESSION :=
	'(' EXPRESSION ')'
|	EXPRESSION_BINARY
|	EXPRESSION_UNARY
|	EXPRESSION_LITERAL
|	EXPRESSION_VARIABLE
|	EXPRESSION_PROCEDURE_CALL
;

OPERATOR_UNARY_PREFIXED :=
	'-'
|	'+'
|	'*'
|	'&'
|	'!'
|	'~'
|	'[' TYPE ']'
;

OPERATOR_UNARY_POSTFIXED :=
|	'[' EXPRESSION ']'
;

OPERATOR_BINARY := 
	'+' 
|	'-' 
|	'*' 
|	'/'
|	'%'
|	'&'
|	'|'
|	'^'
|	'&&'
|	'||'
|	'<<'
|	'>>'
|	'<'
|	'>'
|	'<='
|	'>='
|	'=='
|	'!='
|	'.'
;

EXPRESSION_UNARY :=
	OPERATOR_UNARY_PREFIXED EXPRESSION
;

EXPRESSION_BINARY :=
	EXPRESSION OPERATOR_BINARY EXPRESSION
|	EXPRESSION '[' EXPRESSION ']'
;

EXPRESSION_VARIABLE :=
	IDENTIFIER
;

EXPRESSION_LITERAL :=
	LITERAL_INT
|	LITERAL_FLOAT
|	LITERAL_BOOL
|	LITERAL_STRUCT
|	LITERAL_ARRAY
;

LITERAL_INT :=
	[0-9]+
|	0x([0-9]|[a-f]|[A-F])+
|	0b(0|1)+
;

LITERAL_FLOAT :=
	[0-9]+\.[0-9]+
;

LITERAL_BOOL :=
	true
|	false
;

IDENTIFIER :=
	([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*
;

LITERAL_STRUCT := 
	struct IDENTIFIER '{' '}'
|	struct IDENTIFIER '{' HELPER_LITERAL_LIST '}'
;
	
HELPER_LITERAL_LIST :=
	LITERAL
|	LITERAL ',' HELPER_LITERAL_LIST
;

LITERAL_ARRAY :=
	'{' '}'
|	'{' HELPER_LITERAL_LIST '}'
;

HELPER_EXPRESSION_LIST :=
	EXPRESSION
|	EXPRESSION ',' HELPER_EXPRESSION_LIST
;

EXPRESSION_PROCEDURE_CALL :=
	IDENTIFIER '(' ')'
|	IDENTIFIER '(' HELPER_EXPRESSION_LIST ')'
;
