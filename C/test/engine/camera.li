Camera_Common struct {
	position          : vec4;
	near_plane        : r32;
	far_plane         : r32;
	fov               : r32;
	view_matrix       : mat4;
	projection_matrix : mat4;
}

Quaternion_Camera struct {
	c : Camera_Common;
	rotation : Quaternion;
	yrotation : Quaternion;
}

camera_quat_recalculate_view_matrix:(camera : ^Quaternion_Camera) {
	trans := mat4:
    {
        [
            [1.0, 0.0, 0.0, -camera.c.position.x],
            [0.0, 1.0, 0.0, -camera.c.position.y],
            [0.0, 0.0, 1.0, -camera.c.position.z],
            [0.0, 0.0, 0.0, 1.0]
        ]
	};

	f := quaternion_product(&camera.rotation, &camera.yrotation);

	rotation := quaternion_get_matrix(&f);
	camera.c.view_matrix = mat4_mul(rotation, trans);
}

camera_recalculate_projection_matrix:(camera : ^Camera_Common, aspect_ratio : r32)
{
    // ---------------------------------------------------------

	near := camera.near_plane;
	far := camera.far_plane;
	top := fabsf(near) * atanf(DEGTORAD(camera.fov) / 2.0);
	bottom := -top;
	right := top * aspect_ratio;
	left := -right;

	P := mat4:
    {
        [
            [near, 0.0, 0.0, 0.0],
            [0.0, near, 0.0, 0.0],
            [0.0, 0.0, near + far, -near * far],
            [0.0, 0.0, 1.0, 0.0]
        ]
	};

	M := mat4:
    {[
        [2.0 / (right - left), 0.0, 0.0, -(right + left) / (right - left)],
        [0.0, 2.0 / (top - bottom), 0.0, -(top + bottom) / (top - bottom)],
        [0.0, 0.0, 2.0 / (far - near), -(far + near) / (far - near)],
        [0.0, 0.0, 0.0, 1.0]
    ]};

	// Need to transpose when sending to shader
	MP := mat4_mul(M, P);
	camera.projection_matrix = mat4_scalar_product(-1.0, &MP);
}

camera_quat_init:(camera : ^Quaternion_Camera, position : vec4, near_plane : r32, far_plane : r32, fov : r32, aspect_ratio : r32) {
	//assert(position.w == 1.0f);
	camera.c.position = position;
	camera.c.near_plane = near_plane;
	camera.c.far_plane = far_plane;
	camera.c.fov = fov;
	camera.rotation = Quaternion:{ 0.0, 0.0, 0.0, 1.0 };
	camera.yrotation = Quaternion:{ 0.0, 0.0, 0.0, 1.0 };

	camera_quat_recalculate_view_matrix(camera);
	camera_recalculate_projection_matrix(&camera.c, aspect_ratio);
}

camera_quat_rotate_x:(camera : ^Quaternion_Camera, x_difference : r32) {
	yAxis := quaternion_new( vec3:{ 0.0, 1.0, 0.0 }, x_difference);
	camera.yrotation = quaternion_product(&yAxis, &camera.yrotation);
	quaternion_normalize(&camera.yrotation);
	camera_quat_recalculate_view_matrix(camera);
}

camera_quat_rotate_y:(camera : ^Quaternion_Camera, y_difference : r32) {
	right := quaternion_get_right(&camera.rotation);
	right = vec3_normalize(right);
	xAxis := quaternion_new(right, y_difference);
	camera.rotation = quaternion_product(&camera.rotation, &xAxis);
	quaternion_normalize(&camera.rotation);
	camera_quat_recalculate_view_matrix(camera);
}

camera_quat_rotate:(camera : ^Quaternion_Camera, x_difference : r32, y_difference : r32) {
	yAxis := quaternion_new(vec3:{ 0.0, 1.0, 0.0 }, x_difference);
	camera.yrotation = quaternion_product(&yAxis, &camera.yrotation);
	quaternion_normalize(&camera.yrotation);

	right := quaternion_get_right(&camera.rotation);
	right = vec3_normalize(right);
	xAxis := quaternion_new(right, y_difference);
	camera.rotation = quaternion_product(&camera.rotation, &xAxis);
	quaternion_normalize(&camera.rotation);

	camera_quat_recalculate_view_matrix(camera);
}

camera_quat_move_forward:(camera : ^Quaternion_Camera, amount : r32) {
	f := quaternion_product(&camera.rotation, &camera.yrotation);

	forward := quaternion_get_forward(&f);
	forward = vec3_scalar_product(amount, vec3_normalize(forward));
	camera.c.position = vec4_add(vec4:{ -forward.x, -forward.y, -forward.z, 0.0 }, camera.c.position);

	camera_quat_recalculate_view_matrix(camera);
}

camera_quat_move_right:(camera : ^Quaternion_Camera, amount : r32) {
	f := quaternion_product(&camera.rotation, &camera.yrotation);

	right := quaternion_get_right(&f);
	right = vec3_scalar_product(amount, vec3_normalize(right));
	camera.c.position = vec4_add(vec4:{ right.x, right.y, right.z, 0.0 }, camera.c.position);

	camera_quat_recalculate_view_matrix(camera);
}


camera_quat_set_position:(camera : ^Quaternion_Camera, position : vec4) {
	camera.c.position = position;
	camera_quat_recalculate_view_matrix(camera);
}

camera_quat_set_near_plane:(camera : ^Quaternion_Camera, near_plane : r32, aspect_ratio : r32) {
	camera.c.near_plane = near_plane;
	camera_recalculate_projection_matrix(&camera.c, aspect_ratio);
}

camera_quat_set_far_plane:(camera : ^Quaternion_Camera, far_plane : r32, aspect_ratio : r32) {
	camera.c.far_plane = far_plane;
	camera_recalculate_projection_matrix(&camera.c, aspect_ratio);
}

camera_quat_set_fov:(camera : ^Quaternion_Camera, fov : r32, aspect_ratio : r32) {
	camera.c.fov = fov;
	camera_recalculate_projection_matrix(&camera.c, aspect_ratio);
}

camera_quat_force_matrix_recalculation:(camera : ^Quaternion_Camera, aspect_ratio : r32) {
	camera_quat_recalculate_view_matrix(camera);
	camera_recalculate_projection_matrix(&camera.c, aspect_ratio);
}

camera_quat_get_x_axis:(camera : ^Quaternion_Camera) -> vec4 {
	q := quaternion_product(&camera.rotation, &camera.yrotation);
	right := quaternion_get_right(&q);
	right = vec3_normalize(right);
	return vec4:{right.x, right.y, right.z, 0.0};
}

camera_quat_get_y_axis:(camera : ^Quaternion_Camera) -> vec4 {
	q := quaternion_product(&camera.rotation, &camera.yrotation);
	up := quaternion_get_up(&q);
	up = vec3_normalize(up);
	return vec4:{up.x, up.y, up.z, 0.0};
}

camera_quat_get_z_axis:(camera : ^Quaternion_Camera) -> vec4 {
	q := quaternion_product(&camera.rotation, &camera.yrotation);
	forward := quaternion_get_forward(&q);
	forward = vec3_normalize(forward);
	return vec4:{forward.x, forward.y, forward.z, 0.0};
}
