#import "x11.li"

string struct {
	capacity : u64;
	length   : u64;
	data     : ^u8;
}

memcpy : (dst : ^void, src : ^void, size : u64) -> ^void #extern("C");

glEnable : (cap : u32) -> void #extern("GL");
glClear : (mask : u32) -> void #extern("GL");
glClearColor : (r : r32, g : r32, b : r32, a : r32) -> void #extern("GL");
glViewport : (x : s32, y : s32, width : s32, height : s32) -> void #extern("GL");

glXChooseFBConfig : (dpy : ^Display, screen : s32, attrib_list : ^u32, nelements : ^s32) -> ^GLXFBConfig #extern("C");
glXGetVisualFromFBConfig : (dpy : ^Display, config : GLXFBConfig) -> ^XVisualInfo #extern("C");
glXGetFBConfigAttrib : (dpy : ^Display, config : GLXFBConfig, attribute : s32, value : ^s32) -> s32 #extern("C");
glXGetProcAddressARB : (name : ^u8) -> ^void #extern("C");
glXIsDirect : (display : ^Display, ctx : GLXContext) -> bool #extern("C");
glXQueryVersion : (dpy : ^Display, major : ^s32, minor : ^s32) -> bool #extern("C");

// Glx Linux specific

GL_DEPTH_TEST : u32 : 0x0B71;
GL_DEPTH_BUFFER_BIT : u32 : 0x00000100;
GL_COLOR_BUFFER_BIT : u32 : 0x00004000;
GL_PROJECTION : u32 : 0x1701;

GLX_X_RENDERABLE : u32 : 0x8012;
GLX_DRAWABLE_TYPE : u32 : 0x8010;
GLX_RENDER_TYPE : u32 : 0x8011;
GLX_RGBA_BIT : u32 : 0x1;
GLX_X_VISUAL_TYPE : u32 : 0x22;
GLX_TRUE_COLOR : u32 : 0x8002;
GLX_RED_SIZE : u32 : 8;
GLX_GREEN_SIZE : u32 : 9;
GLX_BLUE_SIZE : u32 : 10;
GLX_ALPHA_SIZE : u32 : 11;
GLX_DEPTH_SIZE : u32 : 12;
GLX_STENCIL_SIZE : u32 : 13;
GLX_DOUBLEBUFFER : u32 : 5;
GLX_WINDOW_BIT : u32 : 1;
GLX_SAMPLE_BUFFERS : s32 : 100000;
GLX_SAMPLES : s32 : 100001;
True : u32 : 1;

GLX_CONTEXT_MAJOR_VERSION_ARB : s32 : 0x2091;
GLX_CONTEXT_MINOR_VERSION_ARB : s32 : 0x2092;
GLX_CONTEXT_FLAGS_ARB : s32 : 0x2094;
GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB : s32 : 0x00000002;

s32_to_str : (val : s32, buffer : [16]u8) -> s64 {
    b : [16]u8;
    sum : s32;

    if val == 0 {
        buffer[0] = '0';
        return 1;
    }

    if val < 0 {
        val = -val;
        buffer[0] = '-' -> u8;
        sum = 1;
    }
    auxbuffer := &b[16];
    start := auxbuffer + sum;

    while val != 0 {
        rem := val % 10;
        val /= 10;
        *auxbuffer = '0' + rem -> u8;
        auxbuffer -= 1;
    }

    size := start - auxbuffer;
    memcpy((&buffer[sum]) -> ^void, (auxbuffer + 1) -> ^void, size -> u64);
    return size;
}

u32_to_str_base16 : (value : u32, leading_zeros : bool, buffer : ^s8) -> s64
{
    i : s64 = 0;
    for ; i < 8; i += 1 {
        f : u32 = (value & 0xf0000000) >> 28;
        if(f > 9) buffer[i] = f -> s8 + 0x37;
        else buffer[i] = f -> s8 + 0x30;
        value = value << 4;
    }
    return i;
}

write : (fd : s32, buf : ^void, count : u64) -> s64 #extern("C");
print_string : (str : string) -> s64{
	return write(1, str.data -> ^void, str.length -> u64);
}
print_string_l : (str : ^u8, len : s64) -> s64 {
	return write(1, str -> ^void, len -> u64);
}

print_s32 : (v : s32) -> s64 {
	buffer : [16]u8;
    len := s32_to_str(v, buffer);
    return print_string_l(buffer -> ^u8, len);
}

print_u32 : (v : u32) -> s64 {
    buffer : [16]u8;
    print_string("0x");
    len := u32_to_str_base16(v, true, buffer -> ^s8);
    return print_string_l(buffer -> ^u8, len);
}

init_opengl : (display : ^Display) -> u64 {
	visual_attribs := [
		GLX_X_RENDERABLE, True,
		GLX_DRAWABLE_TYPE, GLX_WINDOW_BIT,
		GLX_RENDER_TYPE, GLX_RGBA_BIT,
		GLX_X_VISUAL_TYPE, GLX_TRUE_COLOR,
		GLX_RED_SIZE, 8,
		GLX_GREEN_SIZE, 8,
		GLX_BLUE_SIZE, 8,
		GLX_ALPHA_SIZE, 8,
		GLX_DEPTH_SIZE, 24,
		GLX_STENCIL_SIZE, 8,
		GLX_DOUBLEBUFFER, True,
		0
	];

	glx_minor : s32;
	glx_major : s32;

	if !glXQueryVersion(display, &glx_major, &glx_minor) || ((glx_major == 1) && (glx_minor < 3)) || (glx_major < 1){
		print_string("invalid glx version!\n");
		return 0;
	}
	
	// Getting framebuffer config
	fbcount : s32;
	fbc := glXChooseFBConfig(display, DefaultScreen(display), visual_attribs->^u32, &fbcount);

	if fbc == null -> ^GLXFBConfig {
		print_string("Failed to get framebuffer configuration\n");
		return 0;
	}

	best_fbc : s32 = -1;
	worst_fbc : s32 = -1;
	best_num_samp : s32 = -1;
	worst_num_samp : s32 = 999;

	for i :s32= 0; i < fbcount; i += 1 {
		vi : ^XVisualInfo = glXGetVisualFromFBConfig(display, fbc[i]);
		if vi != null -> ^XVisualInfo {
			samp_buf : s32;
			samples : s32;
			glXGetFBConfigAttrib(display, fbc[i], GLX_SAMPLE_BUFFERS, &samp_buf);
			glXGetFBConfigAttrib(display, fbc[i], GLX_SAMPLES       , &samples);

			print_string( "  Matching fbconfig ");
			print_s32(i);
			print_string(", visual ID 0x");
			print_u32(vi.visualid -> u32);
			print_string(": SAMPLE_BUFFERS = ");
			print_s32(samp_buf);
			print_string(", SAMPLES = ");
			print_s32(samples);
			print_string("\n");

			if best_fbc < 0 || samp_buf != 0 && samples > best_num_samp {
				best_fbc = i;
				best_num_samp = samples;
			}
			if worst_fbc < 0 || samp_buf == 0 || samples < worst_num_samp {
				worst_fbc = i;
				worst_num_samp = samples;
			}
		}
		XFree(vi -> ^void);
	}

	bestFbc := fbc[best_fbc];
	XFree(fbc -> ^void);

	vi := glXGetVisualFromFBConfig(display, bestFbc);
	print_string("Chosen visual ID = 0x");
	print_u32(vi.visualid -> u32);
	print_string("\n");


	swa : XSetWindowAttributes;
	cmap : Colormap;

	cmap = XCreateColormap(display, RootWindow(display, vi.screen), vi.visual, 0);
	swa.colormap = cmap;
	swa.background_pixmap = 0;
	swa.border_pixel      = 0;
	swa.event_mask        = StructureNotifyMask;
	//info.cmap = cmap;

	print_string("Creating window\n");
	win := XCreateWindow(display, RootWindow(display, vi.screen),
			0, 0, 800, 600, 0, vi.depth, InputOutput, vi.visual,
			CWBorderPixel|CWColormap|CWEventMask, &swa);

	window_handle := win;

	if win == 0 {
		print_string("Failed to create window.\n");
		return 0;
	}

	XFree(vi -> ^void);

	XStoreName(display, win, "GL 3.0 Window".data);

	print_string("Mapping window\n");
	XMapWindow(display, win);

	glXCreateContextAttribsARB := glXGetProcAddressARB("glXCreateContextAttribsARB".data) -> (^Display, GLXFBConfig, GLXContext, bool, ^s32) -> GLXContext;
	ctx : GLXContext;

	ctxErrorHandler := null -> (^Display, ^XErrorEvent) -> s32;
	XSetErrorHandler(ctxErrorHandler);

	context_attribs := [
			GLX_CONTEXT_MAJOR_VERSION_ARB, 3,
			GLX_CONTEXT_MINOR_VERSION_ARB, 3,
			GLX_CONTEXT_FLAGS_ARB, GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB,
			//GLX_CONTEXT_PROFILE_MASK_ARB, GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB,
			0
	];

	ctx = glXCreateContextAttribsARB(display, bestFbc, null -> GLXContext, true, context_attribs -> ^s32);
	//info.ctx = ctx;

	XSync(display, false);

	glXMakeCurrent(display, win, ctx -> ^void);

	// Verifying that context is a direct context
	if (!glXIsDirect(display, ctx)) {
		print_string( "Indirect GLX rendering context obtained\n" );
	} else {
		print_string( "Direct GLX rendering context obtained\n" );
	}

	return win;
}

main : () -> s32 {
	display := XOpenDisplay(null -> ^s8);
	if display == null -> ^Display {
		print_string("could not open display\n");
		return 1;
	}

	window_handle := init_opengl(display);
	
	while true {
		// 126,192,238
		glClearColor(126.0 / 255.0, 192.0 / 255.0, 238.0 / 255.0, 1.0);
		glClear(GL_COLOR_BUFFER_BIT);

		glXSwapBuffers (display, window_handle);
		//usleep(1000);
	}

	return 0;
}