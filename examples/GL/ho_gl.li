GLvoid  : typedef : void;
GLenum  : typedef : u32;
GLfloat : typedef : r32;
GLint   : typedef : s32;
GLsizei : typedef : s32;
GLbitfield : typedef : u32;
GLdouble : typedef : r64;
GLuint  : typedef : u32;
GLboolean : typedef : u8;
GLubyte : typedef : u8;
// GL 1.0
//GL_DEPTH_BUFFER_BIT               : u32 : 0x00000100;
//GL_STENCIL_BUFFER_BIT             : u32 : 0x00000400;
//GL_COLOR_BUFFER_BIT               : u32 : 0x00004000;
//GL_FALSE                          : u32 : 0;
//GL_TRUE                           : u32 : 1;
//GL_POINTS                         : u32 : 0x0000;
//GL_LINES                          : u32 : 0x0001;
//GL_LINE_LOOP                      : u32 : 0x0002;
//GL_LINE_STRIP                     : u32 : 0x0003;
//GL_TRIANGLES                      : u32 : 0x0004;
//GL_TRIANGLE_STRIP                 : u32 : 0x0005;
//GL_TRIANGLE_FAN                   : u32 : 0x0006;
//GL_QUADS                          : u32 : 0x0007;
GL_NEVER                          : u32 : 0x0200;
GL_LESS                           : u32 : 0x0201;
GL_EQUAL                          : u32 : 0x0202;
GL_LEQUAL                         : u32 : 0x0203;
GL_GREATER                        : u32 : 0x0204;
GL_NOTEQUAL                       : u32 : 0x0205;
GL_GEQUAL                         : u32 : 0x0206;
GL_ALWAYS                         : u32 : 0x0207;
GL_ZERO                           : u32 : 0;
GL_ONE                            : u32 : 1;
GL_SRC_COLOR                      : u32 : 0x0300;
GL_ONE_MINUS_SRC_COLOR            : u32 : 0x0301;
GL_SRC_ALPHA                      : u32 : 0x0302;
GL_ONE_MINUS_SRC_ALPHA            : u32 : 0x0303;
GL_DST_ALPHA                      : u32 : 0x0304;
GL_ONE_MINUS_DST_ALPHA            : u32 : 0x0305;
GL_DST_COLOR                      : u32 : 0x0306;
GL_ONE_MINUS_DST_COLOR            : u32 : 0x0307;
GL_SRC_ALPHA_SATURATE             : u32 : 0x0308;
GL_NONE                           : u32 : 0;
GL_FRONT_LEFT                     : u32 : 0x0400;
GL_FRONT_RIGHT                    : u32 : 0x0401;
GL_BACK_LEFT                      : u32 : 0x0402;
GL_BACK_RIGHT                     : u32 : 0x0403;
GL_FRONT                          : u32 : 0x0404;
GL_BACK                           : u32 : 0x0405;
GL_LEFT                           : u32 : 0x0406;
GL_RIGHT                          : u32 : 0x0407;
GL_FRONT_AND_BACK                 : u32 : 0x0408;
GL_NO_ERROR                       : u32 : 0;
GL_INVALID_ENUM                   : u32 : 0x0500;
GL_INVALID_VALUE                  : u32 : 0x0501;
GL_INVALID_OPERATION              : u32 : 0x0502;
GL_OUT_OF_MEMORY                  : u32 : 0x0505;
GL_CW                             : u32 : 0x0900;
GL_CCW                            : u32 : 0x0901;
GL_POINT_SIZE                     : u32 : 0x0B11;
GL_POINT_SIZE_RANGE               : u32 : 0x0B12;
GL_POINT_SIZE_GRANULARITY         : u32 : 0x0B13;
GL_LINE_SMOOTH                    : u32 : 0x0B20;
GL_LINE_WIDTH                     : u32 : 0x0B21;
GL_LINE_WIDTH_RANGE               : u32 : 0x0B22;
GL_LINE_WIDTH_GRANULARITY         : u32 : 0x0B23;
GL_POLYGON_MODE                   : u32 : 0x0B40;
GL_POLYGON_SMOOTH                 : u32 : 0x0B41;
GL_CULL_FACE                      : u32 : 0x0B44;
GL_CULL_FACE_MODE                 : u32 : 0x0B45;
GL_FRONT_FACE                     : u32 : 0x0B46;
GL_DEPTH_RANGE                    : u32 : 0x0B70;
//GL_DEPTH_TEST                     : u32 : 0x0B71;
GL_DEPTH_WRITEMASK                : u32 : 0x0B72;
GL_DEPTH_CLEAR_VALUE              : u32 : 0x0B73;
GL_DEPTH_FUNC                     : u32 : 0x0B74;
GL_STENCIL_TEST                   : u32 : 0x0B90;
GL_STENCIL_CLEAR_VALUE            : u32 : 0x0B91;
GL_STENCIL_FUNC                   : u32 : 0x0B92;
GL_STENCIL_VALUE_MASK             : u32 : 0x0B93;
GL_STENCIL_FAIL                   : u32 : 0x0B94;
GL_STENCIL_PASS_DEPTH_FAIL        : u32 : 0x0B95;
GL_STENCIL_PASS_DEPTH_PASS        : u32 : 0x0B96;
GL_STENCIL_REF                    : u32 : 0x0B97;
GL_STENCIL_WRITEMASK              : u32 : 0x0B98;
GL_VIEWPORT                       : u32 : 0x0BA2;
GL_DITHER                         : u32 : 0x0BD0;
GL_BLEND_DST                      : u32 : 0x0BE0;
GL_BLEND_SRC                      : u32 : 0x0BE1;
GL_BLEND                          : u32 : 0x0BE2;
GL_LOGIC_OP_MODE                  : u32 : 0x0BF0;
GL_DRAW_BUFFER                    : u32 : 0x0C01;
GL_READ_BUFFER                    : u32 : 0x0C02;
GL_SCISSOR_BOX                    : u32 : 0x0C10;
GL_SCISSOR_TEST                   : u32 : 0x0C11;
GL_COLOR_CLEAR_VALUE              : u32 : 0x0C22;
GL_COLOR_WRITEMASK                : u32 : 0x0C23;
GL_DOUBLEBUFFER                   : u32 : 0x0C32;
GL_STEREO                         : u32 : 0x0C33;
GL_LINE_SMOOTH_HINT               : u32 : 0x0C52;
GL_POLYGON_SMOOTH_HINT            : u32 : 0x0C53;
GL_UNPACK_SWAP_BYTES              : u32 : 0x0CF0;
GL_UNPACK_LSB_FIRST               : u32 : 0x0CF1;
GL_UNPACK_ROW_LENGTH              : u32 : 0x0CF2;
GL_UNPACK_SKIP_ROWS               : u32 : 0x0CF3;
GL_UNPACK_SKIP_PIXELS             : u32 : 0x0CF4;
GL_UNPACK_ALIGNMENT               : u32 : 0x0CF5;
GL_PACK_SWAP_BYTES                : u32 : 0x0D00;
GL_PACK_LSB_FIRST                 : u32 : 0x0D01;
GL_PACK_ROW_LENGTH                : u32 : 0x0D02;
GL_PACK_SKIP_ROWS                 : u32 : 0x0D03;
GL_PACK_SKIP_PIXELS               : u32 : 0x0D04;
GL_PACK_ALIGNMENT                 : u32 : 0x0D05;
GL_MAX_TEXTURE_SIZE               : u32 : 0x0D33;
GL_MAX_VIEWPORT_DIMS              : u32 : 0x0D3A;
GL_SUBPIXEL_BITS                  : u32 : 0x0D50;
GL_TEXTURE_1D                     : u32 : 0x0DE0;
GL_TEXTURE_2D                     : u32 : 0x0DE1;
GL_TEXTURE_WIDTH                  : u32 : 0x1000;
GL_TEXTURE_HEIGHT                 : u32 : 0x1001;
GL_TEXTURE_BORDER_COLOR           : u32 : 0x1004;
GL_DONT_CARE                      : u32 : 0x1100;
GL_FASTEST                        : u32 : 0x1101;
GL_NICEST                         : u32 : 0x1102;
GL_BYTE                           : u32 : 0x1400;
GL_UNSIGNED_BYTE                  : u32 : 0x1401;
GL_SHORT                          : u32 : 0x1402;
GL_UNSIGNED_SHORT                 : u32 : 0x1403;
GL_INT                            : u32 : 0x1404;
GL_UNSIGNED_INT                   : u32 : 0x1405;
GL_FLOAT                          : u32 : 0x1406;
GL_STACK_OVERFLOW                 : u32 : 0x0503;
GL_STACK_UNDERFLOW                : u32 : 0x0504;
GL_CLEAR                          : u32 : 0x1500;
GL_AND                            : u32 : 0x1501;
GL_AND_REVERSE                    : u32 : 0x1502;
GL_COPY                           : u32 : 0x1503;
GL_AND_INVERTED                   : u32 : 0x1504;
GL_NOOP                           : u32 : 0x1505;
GL_XOR                            : u32 : 0x1506;
GL_OR                             : u32 : 0x1507;
GL_NOR                            : u32 : 0x1508;
GL_EQUIV                          : u32 : 0x1509;
GL_INVERT                         : u32 : 0x150A;
GL_OR_REVERSE                     : u32 : 0x150B;
GL_COPY_INVERTED                  : u32 : 0x150C;
GL_OR_INVERTED                    : u32 : 0x150D;
GL_NAND                           : u32 : 0x150E;
GL_SET                            : u32 : 0x150F;
//GL_TEXTURE                        : u32 : 0x1702;
GL_COLOR                          : u32 : 0x1800;
GL_DEPTH                          : u32 : 0x1801;
GL_STENCIL                        : u32 : 0x1802;
GL_STENCIL_INDEX                  : u32 : 0x1901;
GL_DEPTH_COMPONENT                : u32 : 0x1902;
GL_RED                            : u32 : 0x1903;
GL_GREEN                          : u32 : 0x1904;
GL_BLUE                           : u32 : 0x1905;
GL_ALPHA                          : u32 : 0x1906;
GL_RGB                            : u32 : 0x1907;
GL_RGBA                           : u32 : 0x1908;
GL_POINT                          : u32 : 0x1B00;
GL_LINE                           : u32 : 0x1B01;
GL_FILL                           : u32 : 0x1B02;
GL_KEEP                           : u32 : 0x1E00;
GL_REPLACE                        : u32 : 0x1E01;
GL_INCR                           : u32 : 0x1E02;
GL_DECR                           : u32 : 0x1E03;
GL_VENDOR                         : u32 : 0x1F00;
GL_RENDERER                       : u32 : 0x1F01;
GL_VERSION                        : u32 : 0x1F02;
GL_EXTENSIONS                     : u32 : 0x1F03;
GL_NEAREST                        : u32 : 0x2600;
GL_LINEAR                         : u32 : 0x2601;
GL_NEAREST_MIPMAP_NEAREST         : u32 : 0x2700;
GL_LINEAR_MIPMAP_NEAREST          : u32 : 0x2701;
GL_NEAREST_MIPMAP_LINEAR          : u32 : 0x2702;
GL_LINEAR_MIPMAP_LINEAR           : u32 : 0x2703;
GL_TEXTURE_MAG_FILTER             : u32 : 0x2800;
GL_TEXTURE_MIN_FILTER             : u32 : 0x2801;
GL_TEXTURE_WRAP_S                 : u32 : 0x2802;
GL_TEXTURE_WRAP_T                 : u32 : 0x2803;
GL_REPEAT                         : u32 : 0x2901;
/* GL_VERSION_1_0 */

// GL_VERSION_1_1
// GL_VERSION_1_1 1
GLclampf : typedef : r32;
GLclampd : typedef : r64;

GL_COLOR_LOGIC_OP                 : u32 : 0x0BF2;
GL_POLYGON_OFFSET_UNITS           : u32 : 0x2A00;
GL_POLYGON_OFFSET_POINT           : u32 : 0x2A01;
GL_POLYGON_OFFSET_LINE            : u32 : 0x2A02;
GL_POLYGON_OFFSET_FILL            : u32 : 0x8037;
GL_POLYGON_OFFSET_FACTOR          : u32 : 0x8038;
GL_TEXTURE_BINDING_1D             : u32 : 0x8068;
GL_TEXTURE_BINDING_2D             : u32 : 0x8069;
GL_TEXTURE_INTERNAL_FORMAT        : u32 : 0x1003;
GL_TEXTURE_RED_SIZE               : u32 : 0x805C;
GL_TEXTURE_GREEN_SIZE             : u32 : 0x805D;
GL_TEXTURE_BLUE_SIZE              : u32 : 0x805E;
GL_TEXTURE_ALPHA_SIZE             : u32 : 0x805F;
GL_DOUBLE                         : u32 : 0x140A;
GL_PROXY_TEXTURE_1D               : u32 : 0x8063;
GL_PROXY_TEXTURE_2D               : u32 : 0x8064;
GL_R3_G3_B2                       : u32 : 0x2A10;
GL_RGB4                           : u32 : 0x804F;
GL_RGB5                           : u32 : 0x8050;
GL_RGB8                           : u32 : 0x8051;
GL_RGB10                          : u32 : 0x8052;
GL_RGB12                          : u32 : 0x8053;
GL_RGB16                          : u32 : 0x8054;
GL_RGBA2                          : u32 : 0x8055;
GL_RGBA4                          : u32 : 0x8056;
GL_RGB5_A1                        : u32 : 0x8057;
GL_RGBA8                          : u32 : 0x8058;
GL_RGB10_A2                       : u32 : 0x8059;
GL_RGBA12                         : u32 : 0x805A;
GL_RGBA16                         : u32 : 0x805B;
GL_VERTEX_ARRAY                   : u32 : 0x8074;
/* GL_VERSION_1_1 */

// #ifndef GL_VERSION_1_2
// #define GL_VERSION_1_2 1
GL_UNSIGNED_BYTE_3_3_2            : u32 : 0x8032;
GL_UNSIGNED_SHORT_4_4_4_4         : u32 : 0x8033;
GL_UNSIGNED_SHORT_5_5_5_1         : u32 : 0x8034;
GL_UNSIGNED_INT_8_8_8_8           : u32 : 0x8035;
GL_UNSIGNED_INT_10_10_10_2        : u32 : 0x8036;
GL_TEXTURE_BINDING_3D             : u32 : 0x806A;
GL_PACK_SKIP_IMAGES               : u32 : 0x806B;
GL_PACK_IMAGE_HEIGHT              : u32 : 0x806C;
GL_UNPACK_SKIP_IMAGES             : u32 : 0x806D;
GL_UNPACK_IMAGE_HEIGHT            : u32 : 0x806E;
GL_TEXTURE_3D                     : u32 : 0x806F;
GL_PROXY_TEXTURE_3D               : u32 : 0x8070;
GL_TEXTURE_DEPTH                  : u32 : 0x8071;
GL_TEXTURE_WRAP_R                 : u32 : 0x8072;
GL_MAX_3D_TEXTURE_SIZE            : u32 : 0x8073;
GL_UNSIGNED_BYTE_2_3_3_REV        : u32 : 0x8362;
GL_UNSIGNED_SHORT_5_6_5           : u32 : 0x8363;
GL_UNSIGNED_SHORT_5_6_5_REV       : u32 : 0x8364;
GL_UNSIGNED_SHORT_4_4_4_4_REV     : u32 : 0x8365;
GL_UNSIGNED_SHORT_1_5_5_5_REV     : u32 : 0x8366;
GL_UNSIGNED_INT_8_8_8_8_REV       : u32 : 0x8367;
GL_UNSIGNED_INT_2_10_10_10_REV    : u32 : 0x8368;
GL_BGR                            : u32 : 0x80E0;
GL_BGRA                           : u32 : 0x80E1;
GL_MAX_ELEMENTS_VERTICES          : u32 : 0x80E8;
GL_MAX_ELEMENTS_INDICES           : u32 : 0x80E9;
GL_CLAMP_TO_EDGE                  : u32 : 0x812F;
GL_TEXTURE_MIN_LOD                : u32 : 0x813A;
GL_TEXTURE_MAX_LOD                : u32 : 0x813B;
GL_TEXTURE_BASE_LEVEL             : u32 : 0x813C;
GL_TEXTURE_MAX_LEVEL              : u32 : 0x813D;
GL_SMOOTH_POINT_SIZE_RANGE        : u32 : 0x0B12;
GL_SMOOTH_POINT_SIZE_GRANULARITY  : u32 : 0x0B13;
GL_SMOOTH_LINE_WIDTH_RANGE        : u32 : 0x0B22;
GL_SMOOTH_LINE_WIDTH_GRANULARITY  : u32 : 0x0B23;
GL_ALIASED_LINE_WIDTH_RANGE       : u32 : 0x846E;
/* GL_VERSION_1_2 */

//#ifndef GL_VERSION_1_3
//#define GL_VERSION_1_3 1
GL_TEXTURE0                        : u32 : 0x84C0;
GL_TEXTURE1                        : u32 : 0x84C1;
GL_TEXTURE2                        : u32 : 0x84C2;
GL_TEXTURE3                        : u32 : 0x84C3;
GL_TEXTURE4                        : u32 : 0x84C4;
GL_TEXTURE5                        : u32 : 0x84C5;
GL_TEXTURE6                        : u32 : 0x84C6;
GL_TEXTURE7                        : u32 : 0x84C7;
GL_TEXTURE8                        : u32 : 0x84C8;
GL_TEXTURE9                        : u32 : 0x84C9;
GL_TEXTURE10                       : u32 : 0x84CA;
GL_TEXTURE11                       : u32 : 0x84CB;
GL_TEXTURE12                       : u32 : 0x84CC;
GL_TEXTURE13                       : u32 : 0x84CD;
GL_TEXTURE14                       : u32 : 0x84CE;
GL_TEXTURE15                       : u32 : 0x84CF;
GL_TEXTURE16                       : u32 : 0x84D0;
GL_TEXTURE17                       : u32 : 0x84D1;
GL_TEXTURE18                       : u32 : 0x84D2;
GL_TEXTURE19                       : u32 : 0x84D3;
GL_TEXTURE20                       : u32 : 0x84D4;
GL_TEXTURE21                       : u32 : 0x84D5;
GL_TEXTURE22                       : u32 : 0x84D6;
GL_TEXTURE23                       : u32 : 0x84D7;
GL_TEXTURE24                       : u32 : 0x84D8;
GL_TEXTURE25                       : u32 : 0x84D9;
GL_TEXTURE26                       : u32 : 0x84DA;
GL_TEXTURE27                       : u32 : 0x84DB;
GL_TEXTURE28                       : u32 : 0x84DC;
GL_TEXTURE29                       : u32 : 0x84DD;
GL_TEXTURE30                       : u32 : 0x84DE;
GL_TEXTURE31                       : u32 : 0x84DF;
GL_ACTIVE_TEXTURE                  : u32 : 0x84E0;
GL_MULTISAMPLE                     : u32 : 0x809D;
GL_SAMPLE_ALPHA_TO_COVERAGE        : u32 : 0x809E;
GL_SAMPLE_ALPHA_TO_ONE             : u32 : 0x809F;
GL_SAMPLE_COVERAGE                 : u32 : 0x80A0;
GL_SAMPLE_BUFFERS                  : u32 : 0x80A8;
GL_SAMPLES                         : u32 : 0x80A9;
GL_SAMPLE_COVERAGE_VALUE           : u32 : 0x80AA;
GL_SAMPLE_COVERAGE_INVERT          : u32 : 0x80AB;
GL_TEXTURE_CUBE_MAP                : u32 : 0x8513;
GL_TEXTURE_BINDING_CUBE_MAP        : u32 : 0x8514;
GL_TEXTURE_CUBE_MAP_POSITIVE_X     : u32 : 0x8515;
GL_TEXTURE_CUBE_MAP_NEGATIVE_X     : u32 : 0x8516;
GL_TEXTURE_CUBE_MAP_POSITIVE_Y     : u32 : 0x8517;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y     : u32 : 0x8518;
GL_TEXTURE_CUBE_MAP_POSITIVE_Z     : u32 : 0x8519;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z     : u32 : 0x851A;
GL_PROXY_TEXTURE_CUBE_MAP          : u32 : 0x851B;
GL_MAX_CUBE_MAP_TEXTURE_SIZE       : u32 : 0x851C;
GL_COMPRESSED_RGB                  : u32 : 0x84ED;
GL_COMPRESSED_RGBA                 : u32 : 0x84EE;
GL_TEXTURE_COMPRESSION_HINT        : u32 : 0x84EF;
GL_TEXTURE_COMPRESSED_IMAGE_SIZE   : u32 : 0x86A0;
GL_TEXTURE_COMPRESSED              : u32 : 0x86A1;
GL_NUM_COMPRESSED_TEXTURE_FORMATS  : u32 : 0x86A2;
GL_COMPRESSED_TEXTURE_FORMATS      : u32 : 0x86A3;
GL_CLAMP_TO_BORDER                 : u32 : 0x812D;
/* GL_VERSION_1_3 */

//#ifndef GL_VERSION_1_4
//#define GL_VERSION_1_4 1
GL_BLEND_DST_RGB                  : u32 : 0x80C8;
GL_BLEND_SRC_RGB                  : u32 : 0x80C9;
GL_BLEND_DST_ALPHA                : u32 : 0x80CA;
GL_BLEND_SRC_ALPHA                : u32 : 0x80CB;
GL_POINT_FADE_THRESHOLD_SIZE      : u32 : 0x8128;
GL_DEPTH_COMPONENT16              : u32 : 0x81A5;
GL_DEPTH_COMPONENT24              : u32 : 0x81A6;
GL_DEPTH_COMPONENT32              : u32 : 0x81A7;
GL_MIRRORED_REPEAT                : u32 : 0x8370;
GL_MAX_TEXTURE_LOD_BIAS           : u32 : 0x84FD;
GL_TEXTURE_LOD_BIAS               : u32 : 0x8501;
GL_INCR_WRAP                      : u32 : 0x8507;
GL_DECR_WRAP                      : u32 : 0x8508;
GL_TEXTURE_DEPTH_SIZE             : u32 : 0x884A;
GL_TEXTURE_COMPARE_MODE           : u32 : 0x884C;
GL_TEXTURE_COMPARE_FUNC           : u32 : 0x884D;
GL_BLEND_COLOR                    : u32 : 0x8005;
GL_BLEND_EQUATION                 : u32 : 0x8009;
GL_CONSTANT_COLOR                 : u32 : 0x8001;
GL_ONE_MINUS_CONSTANT_COLOR       : u32 : 0x8002;
GL_CONSTANT_ALPHA                 : u32 : 0x8003;
GL_ONE_MINUS_CONSTANT_ALPHA       : u32 : 0x8004;
GL_FUNC_ADD                       : u32 : 0x8006;
GL_FUNC_REVERSE_SUBTRACT          : u32 : 0x800B;
GL_FUNC_SUBTRACT                  : u32 : 0x800A;
GL_MIN                            : u32 : 0x8007;
GL_MAX                            : u32 : 0x8008;
/* GL_VERSION_1_4 */

//#ifndef GL_VERSION_1_5
//#define GL_VERSION_1_5 1
GLsizeiptr : typedef : s64;
GLintptr   : typedef : s64;
GL_BUFFER_SIZE                     : u32 : 0x8764;
GL_BUFFER_USAGE                    : u32 : 0x8765;
GL_QUERY_COUNTER_BITS              : u32 : 0x8864;
GL_CURRENT_QUERY                   : u32 : 0x8865;
GL_QUERY_RESULT                    : u32 : 0x8866;
GL_QUERY_RESULT_AVAILABLE          : u32 : 0x8867;
GL_ARRAY_BUFFER                    : u32 : 0x8892;
GL_ELEMENT_ARRAY_BUFFER            : u32 : 0x8893;
GL_ARRAY_BUFFER_BINDING            : u32 : 0x8894;
GL_ELEMENT_ARRAY_BUFFER_BINDING    : u32 : 0x8895;
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING  : u32 : 0x889F;
GL_READ_ONLY                       : u32 : 0x88B8;
GL_WRITE_ONLY                      : u32 : 0x88B9;
GL_READ_WRITE                      : u32 : 0x88BA;
GL_BUFFER_ACCESS                   : u32 : 0x88BB;
GL_BUFFER_MAPPED                   : u32 : 0x88BC;
GL_BUFFER_MAP_POINTER              : u32 : 0x88BD;
GL_STREAM_DRAW                     : u32 : 0x88E0;
GL_STREAM_READ                     : u32 : 0x88E1;
GL_STREAM_COPY                     : u32 : 0x88E2;
GL_STATIC_DRAW                     : u32 : 0x88E4;
GL_STATIC_READ                     : u32 : 0x88E5;
GL_STATIC_COPY                     : u32 : 0x88E6;
GL_DYNAMIC_DRAW                    : u32 : 0x88E8;
GL_DYNAMIC_READ                    : u32 : 0x88E9;
GL_DYNAMIC_COPY                    : u32 : 0x88EA;
GL_SAMPLES_PASSED                  : u32 : 0x8914;
GL_SRC1_ALPHA                      : u32 : 0x8589;
/* GL_VERSION_1_5 */

//#ifndef GL_VERSION_2_0
//#define GL_VERSION_2_0 1
GLchar  : typedef : s8;
GLshort : typedef : s16;
GLbyte  : typedef  : s8;
GLushort : typedef : u16;
GL_BLEND_EQUATION_RGB              : u32 : 0x8009;
GL_VERTEX_ATTRIB_ARRAY_ENABLED     : u32 : 0x8622;
GL_VERTEX_ATTRIB_ARRAY_SIZE        : u32 : 0x8623;
GL_VERTEX_ATTRIB_ARRAY_STRIDE      : u32 : 0x8624;
GL_VERTEX_ATTRIB_ARRAY_TYPE        : u32 : 0x8625;
GL_CURRENT_VERTEX_ATTRIB           : u32 : 0x8626;
GL_VERTEX_PROGRAM_POINT_SIZE       : u32 : 0x8642;
GL_VERTEX_ATTRIB_ARRAY_POINTER     : u32 : 0x8645;
GL_STENCIL_BACK_FUNC               : u32 : 0x8800;
GL_STENCIL_BACK_FAIL               : u32 : 0x8801;
GL_STENCIL_BACK_PASS_DEPTH_FAIL    : u32 : 0x8802;
GL_STENCIL_BACK_PASS_DEPTH_PASS    : u32 : 0x8803;
GL_MAX_DRAW_BUFFERS                : u32 : 0x8824;
GL_DRAW_BUFFER0                    : u32 : 0x8825;
GL_DRAW_BUFFER1                    : u32 : 0x8826;
GL_DRAW_BUFFER2                    : u32 : 0x8827;
GL_DRAW_BUFFER3                    : u32 : 0x8828;
GL_DRAW_BUFFER4                    : u32 : 0x8829;
GL_DRAW_BUFFER5                    : u32 : 0x882A;
GL_DRAW_BUFFER6                    : u32 : 0x882B;
GL_DRAW_BUFFER7                    : u32 : 0x882C;
GL_DRAW_BUFFER8                    : u32 : 0x882D;
GL_DRAW_BUFFER9                    : u32 : 0x882E;
GL_DRAW_BUFFER10                   : u32 : 0x882F;
GL_DRAW_BUFFER11                   : u32 : 0x8830;
GL_DRAW_BUFFER12                   : u32 : 0x8831;
GL_DRAW_BUFFER13                   : u32 : 0x8832;
GL_DRAW_BUFFER14                   : u32 : 0x8833;
GL_DRAW_BUFFER15                   : u32 : 0x8834;
GL_BLEND_EQUATION_ALPHA            : u32 : 0x883D;
GL_MAX_VERTEX_ATTRIBS              : u32 : 0x8869;
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED  : u32 : 0x886A;
GL_MAX_TEXTURE_IMAGE_UNITS         : u32 : 0x8872;
GL_FRAGMENT_SHADER                 : u32 : 0x8B30;
GL_VERTEX_SHADER                   : u32 : 0x8B31;
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS  : u32 : 0x8B49;
GL_MAX_VERTEX_UNIFORM_COMPONENTS   : u32 : 0x8B4A;
GL_MAX_VARYING_FLOATS              : u32 : 0x8B4B;
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS  : u32 : 0x8B4C;
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS  : u32 : 0x8B4D;
GL_SHADER_TYPE                     : u32 : 0x8B4F;
GL_FLOAT_VEC2                      : u32 : 0x8B50;
GL_FLOAT_VEC3                      : u32 : 0x8B51;
GL_FLOAT_VEC4                      : u32 : 0x8B52;
GL_INT_VEC2                        : u32 : 0x8B53;
GL_INT_VEC3                        : u32 : 0x8B54;
GL_INT_VEC4                        : u32 : 0x8B55;
GL_BOOL                            : u32 : 0x8B56;
GL_BOOL_VEC2                       : u32 : 0x8B57;
GL_BOOL_VEC3                       : u32 : 0x8B58;
GL_BOOL_VEC4                       : u32 : 0x8B59;
GL_FLOAT_MAT2                      : u32 : 0x8B5A;
GL_FLOAT_MAT3                      : u32 : 0x8B5B;
GL_FLOAT_MAT4                      : u32 : 0x8B5C;
GL_SAMPLER_1D                      : u32 : 0x8B5D;
GL_SAMPLER_2D                      : u32 : 0x8B5E;
GL_SAMPLER_3D                      : u32 : 0x8B5F;
GL_SAMPLER_CUBE                    : u32 : 0x8B60;
GL_SAMPLER_1D_SHADOW               : u32 : 0x8B61;
GL_SAMPLER_2D_SHADOW               : u32 : 0x8B62;
GL_DELETE_STATUS                   : u32 : 0x8B80;
GL_COMPILE_STATUS                  : u32 : 0x8B81;
GL_LINK_STATUS                     : u32 : 0x8B82;
GL_VALIDATE_STATUS                 : u32 : 0x8B83;
GL_INFO_LOG_LENGTH                 : u32 : 0x8B84;
GL_ATTACHED_SHADERS                : u32 : 0x8B85;
GL_ACTIVE_UNIFORMS                 : u32 : 0x8B86;
GL_ACTIVE_UNIFORM_MAX_LENGTH       : u32 : 0x8B87;
GL_SHADER_SOURCE_LENGTH            : u32 : 0x8B88;
GL_ACTIVE_ATTRIBUTES               : u32 : 0x8B89;
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH     : u32 : 0x8B8A;
GL_FRAGMENT_SHADER_DERIVATIVE_HINT  : u32 : 0x8B8B;
GL_SHADING_LANGUAGE_VERSION        : u32 : 0x8B8C;
GL_CURRENT_PROGRAM                 : u32 : 0x8B8D;
GL_POINT_SPRITE_COORD_ORIGIN       : u32 : 0x8CA0;
GL_LOWER_LEFT                      : u32 : 0x8CA1;
GL_UPPER_LEFT                      : u32 : 0x8CA2;
GL_STENCIL_BACK_REF                : u32 : 0x8CA3;
GL_STENCIL_BACK_VALUE_MASK         : u32 : 0x8CA4;
GL_STENCIL_BACK_WRITEMASK          : u32 : 0x8CA5;
/* GL_VERSION_2_0 */


//#ifndef GL_VERSION_2_1
//#define GL_VERSION_2_1 1
GL_PIXEL_PACK_BUFFER              : u32 : 0x88EB;
GL_PIXEL_UNPACK_BUFFER            : u32 : 0x88EC;
GL_PIXEL_PACK_BUFFER_BINDING      : u32 : 0x88ED;
GL_PIXEL_UNPACK_BUFFER_BINDING    : u32 : 0x88EF;
GL_FLOAT_MAT2x3                   : u32 : 0x8B65;
GL_FLOAT_MAT2x4                   : u32 : 0x8B66;
GL_FLOAT_MAT3x2                   : u32 : 0x8B67;
GL_FLOAT_MAT3x4                   : u32 : 0x8B68;
GL_FLOAT_MAT4x2                   : u32 : 0x8B69;
GL_FLOAT_MAT4x3                   : u32 : 0x8B6A;
GL_SRGB                           : u32 : 0x8C40;
GL_SRGB8                          : u32 : 0x8C41;
GL_SRGB_ALPHA                     : u32 : 0x8C42;
GL_SRGB8_ALPHA8                   : u32 : 0x8C43;
GL_COMPRESSED_SRGB                : u32 : 0x8C48;
GL_COMPRESSED_SRGB_ALPHA          : u32 : 0x8C49;
/* GL_VERSION_2_1 */


//#ifndef GL_VERSION_3_0
//#define GL_VERSION_3_0 1
GLhalf : typedef : u16;
GL_COMPARE_REF_TO_TEXTURE         : u32 : 0x884E;
GL_CLIP_DISTANCE0                 : u32 : 0x3000;
GL_CLIP_DISTANCE1                 : u32 : 0x3001;
GL_CLIP_DISTANCE2                 : u32 : 0x3002;
GL_CLIP_DISTANCE3                 : u32 : 0x3003;
GL_CLIP_DISTANCE4                 : u32 : 0x3004;
GL_CLIP_DISTANCE5                 : u32 : 0x3005;
GL_CLIP_DISTANCE6                 : u32 : 0x3006;
GL_CLIP_DISTANCE7                 : u32 : 0x3007;
GL_MAX_CLIP_DISTANCES             : u32 : 0x0D32;
GL_MAJOR_VERSION                  : u32 : 0x821B;
GL_MINOR_VERSION                  : u32 : 0x821C;
GL_NUM_EXTENSIONS                 : u32 : 0x821D;
GL_CONTEXT_FLAGS                  : u32 : 0x821E;
GL_COMPRESSED_RED                 : u32 : 0x8225;
GL_COMPRESSED_RG                  : u32 : 0x8226;
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT : u32 : 0x00000001;
GL_RGBA32F                        : u32 : 0x8814;
GL_RGB32F                         : u32 : 0x8815;
GL_RGBA16F                        : u32 : 0x881A;
GL_RGB16F                         : u32 : 0x881B;
GL_VERTEX_ATTRIB_ARRAY_INTEGER    : u32 : 0x88FD;
GL_MAX_ARRAY_TEXTURE_LAYERS       : u32 : 0x88FF;
GL_MIN_PROGRAM_TEXEL_OFFSET       : u32 : 0x8904;
GL_MAX_PROGRAM_TEXEL_OFFSET       : u32 : 0x8905;
GL_CLAMP_READ_COLOR               : u32 : 0x891C;
GL_FIXED_ONLY                     : u32 : 0x891D;
GL_MAX_VARYING_COMPONENTS         : u32 : 0x8B4B;
GL_TEXTURE_1D_ARRAY               : u32 : 0x8C18;
GL_PROXY_TEXTURE_1D_ARRAY         : u32 : 0x8C19;
GL_TEXTURE_2D_ARRAY               : u32 : 0x8C1A;
GL_PROXY_TEXTURE_2D_ARRAY         : u32 : 0x8C1B;
GL_TEXTURE_BINDING_1D_ARRAY       : u32 : 0x8C1C;
GL_TEXTURE_BINDING_2D_ARRAY       : u32 : 0x8C1D;
GL_R11F_G11F_B10F                 : u32 : 0x8C3A;
GL_UNSIGNED_INT_10F_11F_11F_REV   : u32 : 0x8C3B;
GL_RGB9_E5                        : u32 : 0x8C3D;
GL_UNSIGNED_INT_5_9_9_9_REV       : u32 : 0x8C3E;
GL_TEXTURE_SHARED_SIZE            : u32 : 0x8C3F;
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH : u32 : 0x8C76;
GL_TRANSFORM_FEEDBACK_BUFFER_MODE : u32 : 0x8C7F;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : u32 : 0x8C80;
GL_TRANSFORM_FEEDBACK_VARYINGS    : u32 : 0x8C83;
GL_TRANSFORM_FEEDBACK_BUFFER_START : u32 : 0x8C84;
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE : u32 : 0x8C85;
GL_PRIMITIVES_GENERATED           : u32 : 0x8C87;
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : u32 : 0x8C88;
GL_RASTERIZER_DISCARD             : u32 : 0x8C89;
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS : u32 : 0x8C8A;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS : u32 : 0x8C8B;
GL_INTERLEAVED_ATTRIBS            : u32 : 0x8C8C;
GL_SEPARATE_ATTRIBS               : u32 : 0x8C8D;
GL_TRANSFORM_FEEDBACK_BUFFER      : u32 : 0x8C8E;
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING : u32 : 0x8C8F;
GL_RGBA32UI                       : u32 : 0x8D70;
GL_RGB32UI                        : u32 : 0x8D71;
GL_RGBA16UI                       : u32 : 0x8D76;
GL_RGB16UI                        : u32 : 0x8D77;
GL_RGBA8UI                        : u32 : 0x8D7C;
GL_RGB8UI                         : u32 : 0x8D7D;
GL_RGBA32I                        : u32 : 0x8D82;
GL_RGB32I                         : u32 : 0x8D83;
GL_RGBA16I                        : u32 : 0x8D88;
GL_RGB16I                         : u32 : 0x8D89;
GL_RGBA8I                         : u32 : 0x8D8E;
GL_RGB8I                          : u32 : 0x8D8F;
GL_RED_INTEGER                    : u32 : 0x8D94;
GL_GREEN_INTEGER                  : u32 : 0x8D95;
GL_BLUE_INTEGER                   : u32 : 0x8D96;
GL_RGB_INTEGER                    : u32 : 0x8D98;
GL_RGBA_INTEGER                   : u32 : 0x8D99;
GL_BGR_INTEGER                    : u32 : 0x8D9A;
GL_BGRA_INTEGER                   : u32 : 0x8D9B;
GL_SAMPLER_1D_ARRAY               : u32 : 0x8DC0;
GL_SAMPLER_2D_ARRAY               : u32 : 0x8DC1;
GL_SAMPLER_1D_ARRAY_SHADOW        : u32 : 0x8DC3;
GL_SAMPLER_2D_ARRAY_SHADOW        : u32 : 0x8DC4;
GL_SAMPLER_CUBE_SHADOW            : u32 : 0x8DC5;
GL_UNSIGNED_INT_VEC2              : u32 : 0x8DC6;
GL_UNSIGNED_INT_VEC3              : u32 : 0x8DC7;
GL_UNSIGNED_INT_VEC4              : u32 : 0x8DC8;
GL_INT_SAMPLER_1D                 : u32 : 0x8DC9;
GL_INT_SAMPLER_2D                 : u32 : 0x8DCA;
GL_INT_SAMPLER_3D                 : u32 : 0x8DCB;
GL_INT_SAMPLER_CUBE               : u32 : 0x8DCC;
GL_INT_SAMPLER_1D_ARRAY           : u32 : 0x8DCE;
GL_INT_SAMPLER_2D_ARRAY           : u32 : 0x8DCF;
GL_UNSIGNED_INT_SAMPLER_1D        : u32 : 0x8DD1;
GL_UNSIGNED_INT_SAMPLER_2D        : u32 : 0x8DD2;
GL_UNSIGNED_INT_SAMPLER_3D        : u32 : 0x8DD3;
GL_UNSIGNED_INT_SAMPLER_CUBE      : u32 : 0x8DD4;
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY  : u32 : 0x8DD6;
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  : u32 : 0x8DD7;
GL_QUERY_WAIT                     : u32 : 0x8E13;
GL_QUERY_NO_WAIT                  : u32 : 0x8E14;
GL_QUERY_BY_REGION_WAIT           : u32 : 0x8E15;
GL_QUERY_BY_REGION_NO_WAIT        : u32 : 0x8E16;
GL_BUFFER_ACCESS_FLAGS            : u32 : 0x911F;
GL_BUFFER_MAP_LENGTH              : u32 : 0x9120;
GL_BUFFER_MAP_OFFSET              : u32 : 0x9121;
GL_DEPTH_COMPONENT32F             : u32 : 0x8CAC;
GL_DEPTH32F_STENCIL8              : u32 : 0x8CAD;
GL_FLOAT_32_UNSIGNED_INT_24_8_REV : u32 : 0x8DAD;
GL_INVALID_FRAMEBUFFER_OPERATION  : u32 : 0x0506;
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : u32 : 0x8210;
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : u32 : 0x8211;
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE : u32 : 0x8212;
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : u32 : 0x8213;
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : u32 : 0x8214;
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : u32 : 0x8215;
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : u32 : 0x8216;
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : u32 : 0x8217;
GL_FRAMEBUFFER_DEFAULT            : u32 : 0x8218;
GL_FRAMEBUFFER_UNDEFINED          : u32 : 0x8219;
GL_DEPTH_STENCIL_ATTACHMENT       : u32 : 0x821A;
GL_MAX_RENDERBUFFER_SIZE          : u32 : 0x84E8;
GL_DEPTH_STENCIL                  : u32 : 0x84F9;
GL_UNSIGNED_INT_24_8              : u32 : 0x84FA;
GL_DEPTH24_STENCIL8               : u32 : 0x88F0;
GL_TEXTURE_STENCIL_SIZE           : u32 : 0x88F1;
GL_TEXTURE_RED_TYPE               : u32 : 0x8C10;
GL_TEXTURE_GREEN_TYPE             : u32 : 0x8C11;
GL_TEXTURE_BLUE_TYPE              : u32 : 0x8C12;
GL_TEXTURE_ALPHA_TYPE             : u32 : 0x8C13;
GL_TEXTURE_DEPTH_TYPE             : u32 : 0x8C16;
GL_UNSIGNED_NORMALIZED            : u32 : 0x8C17;
GL_FRAMEBUFFER_BINDING            : u32 : 0x8CA6;
GL_DRAW_FRAMEBUFFER_BINDING       : u32 : 0x8CA6;
GL_RENDERBUFFER_BINDING           : u32 : 0x8CA7;
GL_READ_FRAMEBUFFER               : u32 : 0x8CA8;
GL_DRAW_FRAMEBUFFER               : u32 : 0x8CA9;
GL_READ_FRAMEBUFFER_BINDING       : u32 : 0x8CAA;
GL_RENDERBUFFER_SAMPLES           : u32 : 0x8CAB;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : u32 : 0x8CD0;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : u32 : 0x8CD1;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : u32 : 0x8CD2;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : u32 : 0x8CD3;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : u32 : 0x8CD4;
GL_FRAMEBUFFER_COMPLETE           : u32 : 0x8CD5;
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : u32 : 0x8CD6;
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : u32 : 0x8CD7;
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER : u32 : 0x8CDB;
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER : u32 : 0x8CDC;
GL_FRAMEBUFFER_UNSUPPORTED        : u32 : 0x8CDD;
GL_MAX_COLOR_ATTACHMENTS          : u32 : 0x8CDF;
GL_COLOR_ATTACHMENT0              : u32 : 0x8CE0;
GL_COLOR_ATTACHMENT1              : u32 : 0x8CE1;
GL_COLOR_ATTACHMENT2              : u32 : 0x8CE2;
GL_COLOR_ATTACHMENT3              : u32 : 0x8CE3;
GL_COLOR_ATTACHMENT4              : u32 : 0x8CE4;
GL_COLOR_ATTACHMENT5              : u32 : 0x8CE5;
GL_COLOR_ATTACHMENT6              : u32 : 0x8CE6;
GL_COLOR_ATTACHMENT7              : u32 : 0x8CE7;
GL_COLOR_ATTACHMENT8              : u32 : 0x8CE8;
GL_COLOR_ATTACHMENT9              : u32 : 0x8CE9;
GL_COLOR_ATTACHMENT10             : u32 : 0x8CEA;
GL_COLOR_ATTACHMENT11             : u32 : 0x8CEB;
GL_COLOR_ATTACHMENT12             : u32 : 0x8CEC;
GL_COLOR_ATTACHMENT13             : u32 : 0x8CED;
GL_COLOR_ATTACHMENT14             : u32 : 0x8CEE;
GL_COLOR_ATTACHMENT15             : u32 : 0x8CEF;
GL_COLOR_ATTACHMENT16             : u32 : 0x8CF0;
GL_COLOR_ATTACHMENT17             : u32 : 0x8CF1;
GL_COLOR_ATTACHMENT18             : u32 : 0x8CF2;
GL_COLOR_ATTACHMENT19             : u32 : 0x8CF3;
GL_COLOR_ATTACHMENT20             : u32 : 0x8CF4;
GL_COLOR_ATTACHMENT21             : u32 : 0x8CF5;
GL_COLOR_ATTACHMENT22             : u32 : 0x8CF6;
GL_COLOR_ATTACHMENT23             : u32 : 0x8CF7;
GL_COLOR_ATTACHMENT24             : u32 : 0x8CF8;
GL_COLOR_ATTACHMENT25             : u32 : 0x8CF9;
GL_COLOR_ATTACHMENT26             : u32 : 0x8CFA;
GL_COLOR_ATTACHMENT27             : u32 : 0x8CFB;
GL_COLOR_ATTACHMENT28             : u32 : 0x8CFC;
GL_COLOR_ATTACHMENT29             : u32 : 0x8CFD;
GL_COLOR_ATTACHMENT30             : u32 : 0x8CFE;
GL_COLOR_ATTACHMENT31             : u32 : 0x8CFF;
GL_DEPTH_ATTACHMENT               : u32 : 0x8D00;
GL_STENCIL_ATTACHMENT             : u32 : 0x8D20;
GL_FRAMEBUFFER                    : u32 : 0x8D40;
GL_RENDERBUFFER                   : u32 : 0x8D41;
GL_RENDERBUFFER_WIDTH             : u32 : 0x8D42;
GL_RENDERBUFFER_HEIGHT            : u32 : 0x8D43;
GL_RENDERBUFFER_INTERNAL_FORMAT   : u32 : 0x8D44;
GL_STENCIL_INDEX1                 : u32 : 0x8D46;
GL_STENCIL_INDEX4                 : u32 : 0x8D47;
GL_STENCIL_INDEX8                 : u32 : 0x8D48;
GL_STENCIL_INDEX16                : u32 : 0x8D49;
GL_RENDERBUFFER_RED_SIZE          : u32 : 0x8D50;
GL_RENDERBUFFER_GREEN_SIZE        : u32 : 0x8D51;
GL_RENDERBUFFER_BLUE_SIZE         : u32 : 0x8D52;
GL_RENDERBUFFER_ALPHA_SIZE        : u32 : 0x8D53;
GL_RENDERBUFFER_DEPTH_SIZE        : u32 : 0x8D54;
GL_RENDERBUFFER_STENCIL_SIZE      : u32 : 0x8D55;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : u32 : 0x8D56;
GL_MAX_SAMPLES                    : u32 : 0x8D57;
GL_FRAMEBUFFER_SRGB               : u32 : 0x8DB9;
GL_HALF_FLOAT                     : u32 : 0x140B;
GL_MAP_READ_BIT                   : u32 : 0x0001;
GL_MAP_WRITE_BIT                  : u32 : 0x0002;
GL_MAP_INVALIDATE_RANGE_BIT       : u32 : 0x0004;
GL_MAP_INVALIDATE_BUFFER_BIT      : u32 : 0x0008;
GL_MAP_FLUSH_EXPLICIT_BIT         : u32 : 0x0010;
GL_MAP_UNSYNCHRONIZED_BIT         : u32 : 0x0020;
GL_COMPRESSED_RED_RGTC1           : u32 : 0x8DBB;
GL_COMPRESSED_SIGNED_RED_RGTC1    : u32 : 0x8DBC;
GL_COMPRESSED_RG_RGTC2            : u32 : 0x8DBD;
GL_COMPRESSED_SIGNED_RG_RGTC2     : u32 : 0x8DBE;
GL_RG                             : u32 : 0x8227;
GL_RG_INTEGER                     : u32 : 0x8228;
GL_R8                             : u32 : 0x8229;
GL_R16                            : u32 : 0x822A;
GL_RG8                            : u32 : 0x822B;
GL_RG16                           : u32 : 0x822C;
GL_R16F                           : u32 : 0x822D;
GL_R32F                           : u32 : 0x822E;
GL_RG16F                          : u32 : 0x822F;
GL_RG32F                          : u32 : 0x8230;
GL_R8I                            : u32 : 0x8231;
GL_R8UI                           : u32 : 0x8232;
GL_R16I                           : u32 : 0x8233;
GL_R16UI                          : u32 : 0x8234;
GL_R32I                           : u32 : 0x8235;
GL_R32UI                          : u32 : 0x8236;
GL_RG8I                           : u32 : 0x8237;
GL_RG8UI                          : u32 : 0x8238;
GL_RG16I                          : u32 : 0x8239;
GL_RG16UI                         : u32 : 0x823A;
GL_RG32I                          : u32 : 0x823B;
GL_RG32UI                         : u32 : 0x823C;
GL_VERTEX_ARRAY_BINDING           : u32 : 0x85B5;
/* GL_VERSION_3_0 */


//#ifndef GL_VERSION_3_1
//#define GL_VERSION_3_1 1
GL_SAMPLER_2D_RECT                 : u32 : 0x8B63;
GL_SAMPLER_2D_RECT_SHADOW          : u32 : 0x8B64;
GL_SAMPLER_BUFFER                  : u32 : 0x8DC2;
GL_INT_SAMPLER_2D_RECT             : u32 : 0x8DCD;
GL_INT_SAMPLER_BUFFER              : u32 : 0x8DD0;
GL_UNSIGNED_INT_SAMPLER_2D_RECT    : u32 : 0x8DD5;
GL_UNSIGNED_INT_SAMPLER_BUFFER     : u32 : 0x8DD8;
GL_TEXTURE_BUFFER                  : u32 : 0x8C2A;
GL_MAX_TEXTURE_BUFFER_SIZE         : u32 : 0x8C2B;
GL_TEXTURE_BINDING_BUFFER          : u32 : 0x8C2C;
GL_TEXTURE_BUFFER_DATA_STORE_BINDING  : u32 : 0x8C2D;
GL_TEXTURE_RECTANGLE               : u32 : 0x84F5;
GL_TEXTURE_BINDING_RECTANGLE       : u32 : 0x84F6;
GL_PROXY_TEXTURE_RECTANGLE         : u32 : 0x84F7;
GL_MAX_RECTANGLE_TEXTURE_SIZE      : u32 : 0x84F8;
GL_R8_SNORM                        : u32 : 0x8F94;
GL_RG8_SNORM                       : u32 : 0x8F95;
GL_RGB8_SNORM                      : u32 : 0x8F96;
GL_RGBA8_SNORM                     : u32 : 0x8F97;
GL_R16_SNORM                       : u32 : 0x8F98;
GL_RG16_SNORM                      : u32 : 0x8F99;
GL_RGB16_SNORM                     : u32 : 0x8F9A;
GL_RGBA16_SNORM                    : u32 : 0x8F9B;
GL_SIGNED_NORMALIZED               : u32 : 0x8F9C;
GL_PRIMITIVE_RESTART               : u32 : 0x8F9D;
GL_PRIMITIVE_RESTART_INDEX         : u32 : 0x8F9E;
GL_COPY_READ_BUFFER                : u32 : 0x8F36;
GL_COPY_WRITE_BUFFER               : u32 : 0x8F37;
GL_UNIFORM_BUFFER                  : u32 : 0x8A11;
GL_UNIFORM_BUFFER_BINDING          : u32 : 0x8A28;
GL_UNIFORM_BUFFER_START            : u32 : 0x8A29;
GL_UNIFORM_BUFFER_SIZE             : u32 : 0x8A2A;
GL_MAX_VERTEX_UNIFORM_BLOCKS       : u32 : 0x8A2B;
GL_MAX_GEOMETRY_UNIFORM_BLOCKS     : u32 : 0x8A2C;
GL_MAX_FRAGMENT_UNIFORM_BLOCKS     : u32 : 0x8A2D;
GL_MAX_COMBINED_UNIFORM_BLOCKS     : u32 : 0x8A2E;
GL_MAX_UNIFORM_BUFFER_BINDINGS     : u32 : 0x8A2F;
GL_MAX_UNIFORM_BLOCK_SIZE          : u32 : 0x8A30;
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS  : u32 : 0x8A31;
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS  : u32 : 0x8A32;
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS  : u32 : 0x8A33;
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT  : u32 : 0x8A34;
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH  : u32 : 0x8A35;
GL_ACTIVE_UNIFORM_BLOCKS           : u32 : 0x8A36;
GL_UNIFORM_TYPE                    : u32 : 0x8A37;
GL_UNIFORM_SIZE                    : u32 : 0x8A38;
GL_UNIFORM_NAME_LENGTH             : u32 : 0x8A39;
GL_UNIFORM_BLOCK_INDEX             : u32 : 0x8A3A;
GL_UNIFORM_OFFSET                  : u32 : 0x8A3B;
GL_UNIFORM_ARRAY_STRIDE            : u32 : 0x8A3C;
GL_UNIFORM_MATRIX_STRIDE           : u32 : 0x8A3D;
GL_UNIFORM_IS_ROW_MAJOR            : u32 : 0x8A3E;
GL_UNIFORM_BLOCK_BINDING           : u32 : 0x8A3F;
GL_UNIFORM_BLOCK_DATA_SIZE         : u32 : 0x8A40;
GL_UNIFORM_BLOCK_NAME_LENGTH       : u32 : 0x8A41;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS   : u32 : 0x8A42;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES  : u32 : 0x8A43;
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER  : u32 : 0x8A44;
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER  : u32 : 0x8A45;
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER  : u32 : 0x8A46;
GL_INVALID_INDEX                   : u32 : 0xFFFFFFFF;
/* GL_VERSION_3_1 */

//#ifndef GL_VERSION_3_2
//#define GL_VERSION_3_2 1

//typedef struct __GLsync *GLsync; // TODO(psv): what to do with this?
GLsync : typedef : ^void;
GLuint64 : typedef : u64;
GLint64  : typedef : s64;
GL_CONTEXT_CORE_PROFILE_BIT        : u32 : 0x00000001;
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT  : u32 : 0x00000002;
GL_LINES_ADJACENCY                 : u32 : 0x000A;
GL_LINE_STRIP_ADJACENCY            : u32 : 0x000B;
GL_TRIANGLES_ADJACENCY             : u32 : 0x000C;
GL_TRIANGLE_STRIP_ADJACENCY        : u32 : 0x000D;
GL_PROGRAM_POINT_SIZE              : u32 : 0x8642;
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS  : u32 : 0x8C29;
GL_FRAMEBUFFER_ATTACHMENT_LAYERED  : u32 : 0x8DA7;
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS  : u32 : 0x8DA8;
GL_GEOMETRY_SHADER                 : u32 : 0x8DD9;
GL_GEOMETRY_VERTICES_OUT           : u32 : 0x8916;
GL_GEOMETRY_INPUT_TYPE             : u32 : 0x8917;
GL_GEOMETRY_OUTPUT_TYPE            : u32 : 0x8918;
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS  : u32 : 0x8DDF;
GL_MAX_GEOMETRY_OUTPUT_VERTICES    : u32 : 0x8DE0;
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS  : u32 : 0x8DE1;
GL_MAX_VERTEX_OUTPUT_COMPONENTS    : u32 : 0x9122;
GL_MAX_GEOMETRY_INPUT_COMPONENTS   : u32 : 0x9123;
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS  : u32 : 0x9124;
GL_MAX_FRAGMENT_INPUT_COMPONENTS   : u32 : 0x9125;
GL_CONTEXT_PROFILE_MASK            : u32 : 0x9126;
GL_DEPTH_CLAMP                     : u32 : 0x864F;
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION  : u32 : 0x8E4C;
GL_FIRST_VERTEX_CONVENTION         : u32 : 0x8E4D;
GL_LAST_VERTEX_CONVENTION          : u32 : 0x8E4E;
GL_PROVOKING_VERTEX                : u32 : 0x8E4F;
GL_TEXTURE_CUBE_MAP_SEAMLESS       : u32 : 0x884F;
GL_MAX_SERVER_WAIT_TIMEOUT         : u32 : 0x9111;
GL_OBJECT_TYPE                     : u32 : 0x9112;
GL_SYNC_CONDITION                  : u32 : 0x9113;
GL_SYNC_STATUS                     : u32 : 0x9114;
GL_SYNC_FLAGS                      : u32 : 0x9115;
GL_SYNC_FENCE                      : u32 : 0x9116;
GL_SYNC_GPU_COMMANDS_COMPLETE      : u32 : 0x9117;
GL_UNSIGNALED                      : u32 : 0x9118;
GL_SIGNALED                        : u32 : 0x9119;
GL_ALREADY_SIGNALED                : u32 : 0x911A;
GL_TIMEOUT_EXPIRED                 : u32 : 0x911B;
GL_CONDITION_SATISFIED             : u32 : 0x911C;
GL_WAIT_FAILED                     : u32 : 0x911D;
GL_TIMEOUT_IGNORED                 : u32 : 0xFFFFFFFFFFFFFFFF;
GL_SYNC_FLUSH_COMMANDS_BIT         : u32 : 0x00000001;
GL_SAMPLE_POSITION                 : u32 : 0x8E50;
GL_SAMPLE_MASK                     : u32 : 0x8E51;
GL_SAMPLE_MASK_VALUE               : u32 : 0x8E52;
GL_MAX_SAMPLE_MASK_WORDS           : u32 : 0x8E59;
GL_TEXTURE_2D_MULTISAMPLE          : u32 : 0x9100;
GL_PROXY_TEXTURE_2D_MULTISAMPLE    : u32 : 0x9101;
GL_TEXTURE_2D_MULTISAMPLE_ARRAY    : u32 : 0x9102;
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY  : u32 : 0x9103;
GL_TEXTURE_BINDING_2D_MULTISAMPLE  : u32 : 0x9104;
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY  : u32 : 0x9105;
GL_TEXTURE_SAMPLES                 : u32 : 0x9106;
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS  : u32 : 0x9107;
GL_SAMPLER_2D_MULTISAMPLE          : u32 : 0x9108;
GL_INT_SAMPLER_2D_MULTISAMPLE      : u32 : 0x9109;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE  : u32 : 0x910A;
GL_SAMPLER_2D_MULTISAMPLE_ARRAY    : u32 : 0x910B;
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY  : u32 : 0x910C;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY  : u32 : 0x910D;
GL_MAX_COLOR_TEXTURE_SAMPLES       : u32 : 0x910E;
GL_MAX_DEPTH_TEXTURE_SAMPLES       : u32 : 0x910F;
GL_MAX_INTEGER_SAMPLES             : u32 : 0x9110;
/* GL_VERSION_3_2 */


//#ifndef GL_VERSION_3_3
//#define GL_VERSION_3_3 1
GL_VERTEX_ATTRIB_ARRAY_DIVISOR    : u32 : 0x88FE;
GL_SRC1_COLOR                     : u32 : 0x88F9;
GL_ONE_MINUS_SRC1_COLOR           : u32 : 0x88FA;
GL_ONE_MINUS_SRC1_ALPHA           : u32 : 0x88FB;
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS   : u32 : 0x88FC;
GL_ANY_SAMPLES_PASSED             : u32 : 0x8C2F;
GL_SAMPLER_BINDING                : u32 : 0x8919;
GL_RGB10_A2UI                     : u32 : 0x906F;
GL_TEXTURE_SWIZZLE_R              : u32 : 0x8E42;
GL_TEXTURE_SWIZZLE_G              : u32 : 0x8E43;
GL_TEXTURE_SWIZZLE_B              : u32 : 0x8E44;
GL_TEXTURE_SWIZZLE_A              : u32 : 0x8E45;
GL_TEXTURE_SWIZZLE_RGBA           : u32 : 0x8E46;
GL_TIME_ELAPSED                   : u32 : 0x88BF;
GL_TIMESTAMP                      : u32 : 0x8E28;
GL_INT_2_10_10_10_REV             : u32 : 0x8D9F;
/* GL_VERSION_3_3 */


//#ifndef GL_VERSION_4_0
//#define GL_VERSION_4_0 1
GL_SAMPLE_SHADING                 : u32 : 0x8C36;
GL_MIN_SAMPLE_SHADING_VALUE       : u32 : 0x8C37;
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET : u32 : 0x8E5E;
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET : u32 : 0x8E5F;
GL_TEXTURE_CUBE_MAP_ARRAY         : u32 : 0x9009;
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY : u32 : 0x900A;
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY   : u32 : 0x900B;
GL_SAMPLER_CUBE_MAP_ARRAY         : u32 : 0x900C;
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW  : u32 : 0x900D;
GL_INT_SAMPLER_CUBE_MAP_ARRAY     : u32 : 0x900E;
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY : u32 : 0x900F;
GL_DRAW_INDIRECT_BUFFER           : u32 : 0x8F3F;
GL_DRAW_INDIRECT_BUFFER_BINDING   : u32 : 0x8F43;
GL_GEOMETRY_SHADER_INVOCATIONS    : u32 : 0x887F;
GL_MAX_GEOMETRY_SHADER_INVOCATIONS : u32 : 0x8E5A;
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET : u32 : 0x8E5B;
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET : u32 : 0x8E5C;
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS : u32 : 0x8E5D;
GL_MAX_VERTEX_STREAMS             : u32 : 0x8E71;
GL_DOUBLE_VEC2                    : u32 : 0x8FFC;
GL_DOUBLE_VEC3                    : u32 : 0x8FFD;
GL_DOUBLE_VEC4                    : u32 : 0x8FFE;
GL_DOUBLE_MAT2                    : u32 : 0x8F46;
GL_DOUBLE_MAT3                    : u32 : 0x8F47;
GL_DOUBLE_MAT4                    : u32 : 0x8F48;
GL_DOUBLE_MAT2x3                  : u32 : 0x8F49;
GL_DOUBLE_MAT2x4                  : u32 : 0x8F4A;
GL_DOUBLE_MAT3x2                  : u32 : 0x8F4B;
GL_DOUBLE_MAT3x4                  : u32 : 0x8F4C;
GL_DOUBLE_MAT4x2                  : u32 : 0x8F4D;
GL_DOUBLE_MAT4x3                  : u32 : 0x8F4E;
GL_ACTIVE_SUBROUTINES             : u32 : 0x8DE5;
GL_ACTIVE_SUBROUTINE_UNIFORMS     : u32 : 0x8DE6;
GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS : u32 : 0x8E47;
GL_ACTIVE_SUBROUTINE_MAX_LENGTH   : u32 : 0x8E48;
GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH : u32 : 0x8E49;
GL_MAX_SUBROUTINES                : u32 : 0x8DE7;
GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS : u32 : 0x8DE8;
GL_NUM_COMPATIBLE_SUBROUTINES     : u32 : 0x8E4A;
GL_COMPATIBLE_SUBROUTINES         : u32 : 0x8E4B;
GL_PATCHES                        : u32 : 0x000E;
GL_PATCH_VERTICES                 : u32 : 0x8E72;
GL_PATCH_DEFAULT_INNER_LEVEL      : u32 : 0x8E73;
GL_PATCH_DEFAULT_OUTER_LEVEL      : u32 : 0x8E74;
GL_TESS_CONTROL_OUTPUT_VERTICES   : u32 : 0x8E75;
GL_TESS_GEN_MODE                  : u32 : 0x8E76;
GL_TESS_GEN_SPACING               : u32 : 0x8E77;
GL_TESS_GEN_VERTEX_ORDER          : u32 : 0x8E78;
GL_TESS_GEN_POINT_MODE            : u32 : 0x8E79;
GL_ISOLINES                       : u32 : 0x8E7A;
GL_FRACTIONAL_ODD                 : u32 : 0x8E7B;
GL_FRACTIONAL_EVEN                : u32 : 0x8E7C;
GL_MAX_PATCH_VERTICES             : u32 : 0x8E7D;
GL_MAX_TESS_GEN_LEVEL             : u32 : 0x8E7E;
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS : u32 : 0x8E7F;
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS : u32 : 0x8E80;
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS : u32 : 0x8E81;
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS : u32 : 0x8E82;
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS : u32 : 0x8E83;
GL_MAX_TESS_PATCH_COMPONENTS      : u32 : 0x8E84;
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS : u32 : 0x8E85;
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS : u32 : 0x8E86;
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS : u32 : 0x8E89;
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS : u32 : 0x8E8A;
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS : u32 : 0x886C;
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS : u32 : 0x886D;
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS : u32 : 0x8E1E;
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS : u32 : 0x8E1F;
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER : u32 : 0x84F0;
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER : u32 : 0x84F1;
GL_TESS_EVALUATION_SHADER         : u32 : 0x8E87;
GL_TESS_CONTROL_SHADER            : u32 : 0x8E88;
GL_TRANSFORM_FEEDBACK             : u32 : 0x8E22;
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED : u32 : 0x8E23;
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE : u32 : 0x8E24;
GL_TRANSFORM_FEEDBACK_BINDING     : u32 : 0x8E25;
GL_MAX_TRANSFORM_FEEDBACK_BUFFERS : u32 : 0x8E70;
/* GL_VERSION_4_0 */

//#ifndef GL_VERSION_4_1
//#define GL_VERSION_4_1 1
GL_FIXED                          : u32 : 0x140C;
GL_IMPLEMENTATION_COLOR_READ_TYPE : u32 : 0x8B9A;
GL_IMPLEMENTATION_COLOR_READ_FORMAT : u32 : 0x8B9B;
GL_LOW_FLOAT                      : u32 : 0x8DF0;
GL_MEDIUM_FLOAT                   : u32 : 0x8DF1;
GL_HIGH_FLOAT                     : u32 : 0x8DF2;
GL_LOW_INT                        : u32 : 0x8DF3;
GL_MEDIUM_INT                     : u32 : 0x8DF4;
GL_HIGH_INT                       : u32 : 0x8DF5;
GL_SHADER_COMPILER                : u32 : 0x8DFA;
GL_SHADER_BINARY_FORMATS          : u32 : 0x8DF8;
GL_NUM_SHADER_BINARY_FORMATS      : u32 : 0x8DF9;
GL_MAX_VERTEX_UNIFORM_VECTORS     : u32 : 0x8DFB;
GL_MAX_VARYING_VECTORS            : u32 : 0x8DFC;
GL_MAX_FRAGMENT_UNIFORM_VECTORS   : u32 : 0x8DFD;
GL_RGB565                         : u32 : 0x8D62;
GL_PROGRAM_BINARY_RETRIEVABLE_HINT : u32 : 0x8257;
GL_PROGRAM_BINARY_LENGTH          : u32 : 0x8741;
GL_NUM_PROGRAM_BINARY_FORMATS     : u32 : 0x87FE;
GL_PROGRAM_BINARY_FORMATS         : u32 : 0x87FF;
GL_VERTEX_SHADER_BIT              : u32 : 0x00000001;
GL_FRAGMENT_SHADER_BIT            : u32 : 0x00000002;
GL_GEOMETRY_SHADER_BIT            : u32 : 0x00000004;
GL_TESS_CONTROL_SHADER_BIT        : u32 : 0x00000008;
GL_TESS_EVALUATION_SHADER_BIT     : u32 : 0x00000010;
GL_ALL_SHADER_BITS                : u32 : 0xFFFFFFFF;
GL_PROGRAM_SEPARABLE              : u32 : 0x8258;
GL_ACTIVE_PROGRAM                 : u32 : 0x8259;
GL_PROGRAM_PIPELINE_BINDING       : u32 : 0x825A;
GL_MAX_VIEWPORTS                  : u32 : 0x825B;
GL_VIEWPORT_SUBPIXEL_BITS         : u32 : 0x825C;
GL_VIEWPORT_BOUNDS_RANGE          : u32 : 0x825D;
GL_LAYER_PROVOKING_VERTEX         : u32 : 0x825E;
GL_VIEWPORT_INDEX_PROVOKING_VERTEX : u32 : 0x825F;
GL_UNDEFINED_VERTEX               : u32 : 0x8260;
/* GL_VERSION_4_1 */

//#ifndef GL_VERSION_4_2
//#define GL_VERSION_4_2 1
GL_COPY_READ_BUFFER_BINDING       : u32 : 0x8F36;
GL_COPY_WRITE_BUFFER_BINDING      : u32 : 0x8F37;
GL_TRANSFORM_FEEDBACK_ACTIVE      : u32 : 0x8E24;
GL_TRANSFORM_FEEDBACK_PAUSED      : u32 : 0x8E23;
GL_UNPACK_COMPRESSED_BLOCK_WIDTH  : u32 : 0x9127;
GL_UNPACK_COMPRESSED_BLOCK_HEIGHT : u32 : 0x9128;
GL_UNPACK_COMPRESSED_BLOCK_DEPTH  : u32 : 0x9129;
GL_UNPACK_COMPRESSED_BLOCK_SIZE   : u32 : 0x912A;
GL_PACK_COMPRESSED_BLOCK_WIDTH    : u32 : 0x912B;
GL_PACK_COMPRESSED_BLOCK_HEIGHT   : u32 : 0x912C;
GL_PACK_COMPRESSED_BLOCK_DEPTH    : u32 : 0x912D;
GL_PACK_COMPRESSED_BLOCK_SIZE     : u32 : 0x912E;
GL_NUM_SAMPLE_COUNTS              : u32 : 0x9380;
GL_MIN_MAP_BUFFER_ALIGNMENT       : u32 : 0x90BC;
GL_ATOMIC_COUNTER_BUFFER          : u32 : 0x92C0;
GL_ATOMIC_COUNTER_BUFFER_BINDING  : u32 : 0x92C1;
GL_ATOMIC_COUNTER_BUFFER_START    : u32 : 0x92C2;
GL_ATOMIC_COUNTER_BUFFER_SIZE     : u32 : 0x92C3;
GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE : u32 : 0x92C4;
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS : u32 : 0x92C5;
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES : u32 : 0x92C6;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER : u32 : 0x92C7;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER : u32 : 0x92C8;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER : u32 : 0x92C9;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER : u32 : 0x92CA;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER : u32 : 0x92CB;
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS : u32 : 0x92CC;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS : u32 : 0x92CD;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS : u32 : 0x92CE;
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS : u32 : 0x92CF;
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS : u32 : 0x92D0;
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS : u32 : 0x92D1;
GL_MAX_VERTEX_ATOMIC_COUNTERS     : u32 : 0x92D2;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS : u32 : 0x92D3;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS : u32 : 0x92D4;
GL_MAX_GEOMETRY_ATOMIC_COUNTERS   : u32 : 0x92D5;
GL_MAX_FRAGMENT_ATOMIC_COUNTERS   : u32 : 0x92D6;
GL_MAX_COMBINED_ATOMIC_COUNTERS   : u32 : 0x92D7;
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE : u32 : 0x92D8;
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS : u32 : 0x92DC;
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS  : u32 : 0x92D9;
GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX : u32 : 0x92DA;
GL_UNSIGNED_INT_ATOMIC_COUNTER    : u32 : 0x92DB;
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT : u32 : 0x00000001;
GL_ELEMENT_ARRAY_BARRIER_BIT      : u32 : 0x00000002;
GL_UNIFORM_BARRIER_BIT            : u32 : 0x00000004;
GL_TEXTURE_FETCH_BARRIER_BIT      : u32 : 0x00000008;
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT : u32 : 0x00000020;
GL_COMMAND_BARRIER_BIT            : u32 : 0x00000040;
GL_PIXEL_BUFFER_BARRIER_BIT       : u32 : 0x00000080;
GL_TEXTURE_UPDATE_BARRIER_BIT     : u32 : 0x00000100;
GL_BUFFER_UPDATE_BARRIER_BIT      : u32 : 0x00000200;
GL_FRAMEBUFFER_BARRIER_BIT        : u32 : 0x00000400;
GL_TRANSFORM_FEEDBACK_BARRIER_BIT : u32 : 0x00000800;
GL_ATOMIC_COUNTER_BARRIER_BIT     : u32 : 0x00001000;
GL_ALL_BARRIER_BITS               : u32 : 0xFFFFFFFF;
GL_MAX_IMAGE_UNITS                : u32 : 0x8F38;
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS : u32 : 0x8F39;
GL_IMAGE_BINDING_NAME             : u32 : 0x8F3A;
GL_IMAGE_BINDING_LEVEL            : u32 : 0x8F3B;
GL_IMAGE_BINDING_LAYERED          : u32 : 0x8F3C;
GL_IMAGE_BINDING_LAYER            : u32 : 0x8F3D;
GL_IMAGE_BINDING_ACCESS           : u32 : 0x8F3E;
GL_IMAGE_1D                       : u32 : 0x904C;
GL_IMAGE_2D                       : u32 : 0x904D;
GL_IMAGE_3D                       : u32 : 0x904E;
GL_IMAGE_2D_RECT                  : u32 : 0x904F;
GL_IMAGE_CUBE                     : u32 : 0x9050;
GL_IMAGE_BUFFER                   : u32 : 0x9051;
GL_IMAGE_1D_ARRAY                 : u32 : 0x9052;
GL_IMAGE_2D_ARRAY                 : u32 : 0x9053;
GL_IMAGE_CUBE_MAP_ARRAY           : u32 : 0x9054;
GL_IMAGE_2D_MULTISAMPLE           : u32 : 0x9055;
GL_IMAGE_2D_MULTISAMPLE_ARRAY     : u32 : 0x9056;
GL_INT_IMAGE_1D                   : u32 : 0x9057;
GL_INT_IMAGE_2D                   : u32 : 0x9058;
GL_INT_IMAGE_3D                   : u32 : 0x9059;
GL_INT_IMAGE_2D_RECT              : u32 : 0x905A;
GL_INT_IMAGE_CUBE                 : u32 : 0x905B;
GL_INT_IMAGE_BUFFER               : u32 : 0x905C;
GL_INT_IMAGE_1D_ARRAY             : u32 : 0x905D;
GL_INT_IMAGE_2D_ARRAY             : u32 : 0x905E;
GL_INT_IMAGE_CUBE_MAP_ARRAY       : u32 : 0x905F;
GL_INT_IMAGE_2D_MULTISAMPLE       : u32 : 0x9060;
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY : u32 : 0x9061;
GL_UNSIGNED_INT_IMAGE_1D          : u32 : 0x9062;
GL_UNSIGNED_INT_IMAGE_2D          : u32 : 0x9063;
GL_UNSIGNED_INT_IMAGE_3D          : u32 : 0x9064;
GL_UNSIGNED_INT_IMAGE_2D_RECT     : u32 : 0x9065;
GL_UNSIGNED_INT_IMAGE_CUBE        : u32 : 0x9066;
GL_UNSIGNED_INT_IMAGE_BUFFER      : u32 : 0x9067;
GL_UNSIGNED_INT_IMAGE_1D_ARRAY    : u32 : 0x9068;
GL_UNSIGNED_INT_IMAGE_2D_ARRAY    : u32 : 0x9069;
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY : u32 : 0x906A;
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE : u32 : 0x906B;
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY : u32 : 0x906C;
GL_MAX_IMAGE_SAMPLES              : u32 : 0x906D;
GL_IMAGE_BINDING_FORMAT           : u32 : 0x906E;
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE : u32 : 0x90C7;
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE : u32 : 0x90C8;
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS : u32 : 0x90C9;
GL_MAX_VERTEX_IMAGE_UNIFORMS      : u32 : 0x90CA;
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS : u32 : 0x90CB;
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS : u32 : 0x90CC;
GL_MAX_GEOMETRY_IMAGE_UNIFORMS    : u32 : 0x90CD;
GL_MAX_FRAGMENT_IMAGE_UNIFORMS    : u32 : 0x90CE;
GL_MAX_COMBINED_IMAGE_UNIFORMS    : u32 : 0x90CF;
GL_COMPRESSED_RGBA_BPTC_UNORM     : u32 : 0x8E8C;
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM : u32 : 0x8E8D;
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT : u32 : 0x8E8E;
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT : u32 : 0x8E8F;
GL_TEXTURE_IMMUTABLE_FORMAT       : u32 : 0x912F;
/* GL_VERSION_4_2 */

//#ifndef GL_VERSION_4_3
//#define GL_VERSION_4_3 1
GLDEBUGPROC : typedef : (GLenum, GLenum, GLuint, GLenum, GLsizei, ^GLchar, ^void) -> void;
GL_NUM_SHADING_LANGUAGE_VERSIONS  : u32 : 0x82E9;
GL_VERTEX_ATTRIB_ARRAY_LONG       : u32 : 0x874E;
GL_COMPRESSED_RGB8_ETC2           : u32 : 0x9274;
GL_COMPRESSED_SRGB8_ETC2          : u32 : 0x9275;
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 : u32 : 0x9276;
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 : u32 : 0x9277;
GL_COMPRESSED_RGBA8_ETC2_EAC      : u32 : 0x9278;
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : u32 : 0x9279;
GL_COMPRESSED_R11_EAC             : u32 : 0x9270;
GL_COMPRESSED_SIGNED_R11_EAC      : u32 : 0x9271;
GL_COMPRESSED_RG11_EAC            : u32 : 0x9272;
GL_COMPRESSED_SIGNED_RG11_EAC     : u32 : 0x9273;
GL_PRIMITIVE_RESTART_FIXED_INDEX  : u32 : 0x8D69;
GL_ANY_SAMPLES_PASSED_CONSERVATIVE : u32 : 0x8D6A;
GL_MAX_ELEMENT_INDEX              : u32 : 0x8D6B;
GL_COMPUTE_SHADER                 : u32 : 0x91B9;
GL_MAX_COMPUTE_UNIFORM_BLOCKS     : u32 : 0x91BB;
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS : u32 : 0x91BC;
GL_MAX_COMPUTE_IMAGE_UNIFORMS     : u32 : 0x91BD;
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE : u32 : 0x8262;
GL_MAX_COMPUTE_UNIFORM_COMPONENTS : u32 : 0x8263;
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS : u32 : 0x8264;
GL_MAX_COMPUTE_ATOMIC_COUNTERS    : u32 : 0x8265;
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS : u32 : 0x8266;
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS : u32 : 0x90EB;
GL_MAX_COMPUTE_WORK_GROUP_COUNT   : u32 : 0x91BE;
GL_MAX_COMPUTE_WORK_GROUP_SIZE    : u32 : 0x91BF;
GL_COMPUTE_WORK_GROUP_SIZE        : u32 : 0x8267;
GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER : u32 : 0x90EC;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER : u32 : 0x90ED;
GL_DISPATCH_INDIRECT_BUFFER       : u32 : 0x90EE;
GL_DISPATCH_INDIRECT_BUFFER_BINDING : u32 : 0x90EF;
GL_COMPUTE_SHADER_BIT             : u32 : 0x00000020;
GL_DEBUG_OUTPUT_SYNCHRONOUS       : u32 : 0x8242;
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH : u32 : 0x8243;
GL_DEBUG_CALLBACK_FUNCTION        : u32 : 0x8244;
GL_DEBUG_CALLBACK_USER_PARAM      : u32 : 0x8245;
GL_DEBUG_SOURCE_API               : u32 : 0x8246;
GL_DEBUG_SOURCE_WINDOW_SYSTEM     : u32 : 0x8247;
GL_DEBUG_SOURCE_SHADER_COMPILER   : u32 : 0x8248;
GL_DEBUG_SOURCE_THIRD_PARTY       : u32 : 0x8249;
GL_DEBUG_SOURCE_APPLICATION       : u32 : 0x824A;
GL_DEBUG_SOURCE_OTHER             : u32 : 0x824B;
GL_DEBUG_TYPE_ERROR               : u32 : 0x824C;
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR : u32 : 0x824D;
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR  : u32 : 0x824E;
GL_DEBUG_TYPE_PORTABILITY         : u32 : 0x824F;
GL_DEBUG_TYPE_PERFORMANCE         : u32 : 0x8250;
GL_DEBUG_TYPE_OTHER               : u32 : 0x8251;
GL_MAX_DEBUG_MESSAGE_LENGTH       : u32 : 0x9143;
GL_MAX_DEBUG_LOGGED_MESSAGES      : u32 : 0x9144;
GL_DEBUG_LOGGED_MESSAGES          : u32 : 0x9145;
GL_DEBUG_SEVERITY_HIGH            : u32 : 0x9146;
GL_DEBUG_SEVERITY_MEDIUM          : u32 : 0x9147;
GL_DEBUG_SEVERITY_LOW             : u32 : 0x9148;
GL_DEBUG_TYPE_MARKER              : u32 : 0x8268;
GL_DEBUG_TYPE_PUSH_GROUP          : u32 : 0x8269;
GL_DEBUG_TYPE_POP_GROUP           : u32 : 0x826A;
GL_DEBUG_SEVERITY_NOTIFICATION    : u32 : 0x826B;
GL_MAX_DEBUG_GROUP_STACK_DEPTH    : u32 : 0x826C;
GL_DEBUG_GROUP_STACK_DEPTH        : u32 : 0x826D;
GL_BUFFER                         : u32 : 0x82E0;
GL_SHADER                         : u32 : 0x82E1;
GL_PROGRAM                        : u32 : 0x82E2;
GL_QUERY                          : u32 : 0x82E3;
GL_PROGRAM_PIPELINE               : u32 : 0x82E4;
GL_SAMPLER                        : u32 : 0x82E6;
GL_MAX_LABEL_LENGTH               : u32 : 0x82E8;
GL_DEBUG_OUTPUT                   : u32 : 0x92E0;
GL_CONTEXT_FLAG_DEBUG_BIT         : u32 : 0x00000002;
GL_MAX_UNIFORM_LOCATIONS          : u32 : 0x826E;
GL_FRAMEBUFFER_DEFAULT_WIDTH      : u32 : 0x9310;
GL_FRAMEBUFFER_DEFAULT_HEIGHT     : u32 : 0x9311;
GL_FRAMEBUFFER_DEFAULT_LAYERS     : u32 : 0x9312;
GL_FRAMEBUFFER_DEFAULT_SAMPLES    : u32 : 0x9313;
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS : u32 : 0x9314;
GL_MAX_FRAMEBUFFER_WIDTH          : u32 : 0x9315;
GL_MAX_FRAMEBUFFER_HEIGHT         : u32 : 0x9316;
GL_MAX_FRAMEBUFFER_LAYERS         : u32 : 0x9317;
GL_MAX_FRAMEBUFFER_SAMPLES        : u32 : 0x9318;
GL_INTERNALFORMAT_SUPPORTED       : u32 : 0x826F;
GL_INTERNALFORMAT_PREFERRED       : u32 : 0x8270;
GL_INTERNALFORMAT_RED_SIZE        : u32 : 0x8271;
GL_INTERNALFORMAT_GREEN_SIZE      : u32 : 0x8272;
GL_INTERNALFORMAT_BLUE_SIZE       : u32 : 0x8273;
GL_INTERNALFORMAT_ALPHA_SIZE      : u32 : 0x8274;
GL_INTERNALFORMAT_DEPTH_SIZE      : u32 : 0x8275;
GL_INTERNALFORMAT_STENCIL_SIZE    : u32 : 0x8276;
GL_INTERNALFORMAT_SHARED_SIZE     : u32 : 0x8277;
GL_INTERNALFORMAT_RED_TYPE        : u32 : 0x8278;
GL_INTERNALFORMAT_GREEN_TYPE      : u32 : 0x8279;
GL_INTERNALFORMAT_BLUE_TYPE       : u32 : 0x827A;
GL_INTERNALFORMAT_ALPHA_TYPE      : u32 : 0x827B;
GL_INTERNALFORMAT_DEPTH_TYPE      : u32 : 0x827C;
GL_INTERNALFORMAT_STENCIL_TYPE    : u32 : 0x827D;
GL_MAX_WIDTH                      : u32 : 0x827E;
GL_MAX_HEIGHT                     : u32 : 0x827F;
GL_MAX_DEPTH                      : u32 : 0x8280;
GL_MAX_LAYERS                     : u32 : 0x8281;
GL_MAX_COMBINED_DIMENSIONS        : u32 : 0x8282;
GL_COLOR_COMPONENTS               : u32 : 0x8283;
GL_DEPTH_COMPONENTS               : u32 : 0x8284;
GL_STENCIL_COMPONENTS             : u32 : 0x8285;
GL_COLOR_RENDERABLE               : u32 : 0x8286;
GL_DEPTH_RENDERABLE               : u32 : 0x8287;
GL_STENCIL_RENDERABLE             : u32 : 0x8288;
GL_FRAMEBUFFER_RENDERABLE         : u32 : 0x8289;
GL_FRAMEBUFFER_RENDERABLE_LAYERED : u32 : 0x828A;
GL_FRAMEBUFFER_BLEND              : u32 : 0x828B;
GL_READ_PIXELS                    : u32 : 0x828C;
GL_READ_PIXELS_FORMAT             : u32 : 0x828D;
GL_READ_PIXELS_TYPE               : u32 : 0x828E;
GL_TEXTURE_IMAGE_FORMAT           : u32 : 0x828F;
GL_TEXTURE_IMAGE_TYPE             : u32 : 0x8290;
GL_GET_TEXTURE_IMAGE_FORMAT       : u32 : 0x8291;
GL_GET_TEXTURE_IMAGE_TYPE         : u32 : 0x8292;
GL_MIPMAP                         : u32 : 0x8293;
GL_MANUAL_GENERATE_MIPMAP         : u32 : 0x8294;
GL_AUTO_GENERATE_MIPMAP           : u32 : 0x8295;
GL_COLOR_ENCODING                 : u32 : 0x8296;
GL_SRGB_READ                      : u32 : 0x8297;
GL_SRGB_WRITE                     : u32 : 0x8298;
GL_FILTER                         : u32 : 0x829A;
GL_VERTEX_TEXTURE                 : u32 : 0x829B;
GL_TESS_CONTROL_TEXTURE           : u32 : 0x829C;
GL_TESS_EVALUATION_TEXTURE        : u32 : 0x829D;
GL_GEOMETRY_TEXTURE               : u32 : 0x829E;
GL_FRAGMENT_TEXTURE               : u32 : 0x829F;
GL_COMPUTE_TEXTURE                : u32 : 0x82A0;
GL_TEXTURE_SHADOW                 : u32 : 0x82A1;
GL_TEXTURE_GATHER                 : u32 : 0x82A2;
GL_TEXTURE_GATHER_SHADOW          : u32 : 0x82A3;
GL_SHADER_IMAGE_LOAD              : u32 : 0x82A4;
GL_SHADER_IMAGE_STORE             : u32 : 0x82A5;
GL_SHADER_IMAGE_ATOMIC            : u32 : 0x82A6;
GL_IMAGE_TEXEL_SIZE               : u32 : 0x82A7;
GL_IMAGE_COMPATIBILITY_CLASS      : u32 : 0x82A8;
GL_IMAGE_PIXEL_FORMAT             : u32 : 0x82A9;
GL_IMAGE_PIXEL_TYPE               : u32 : 0x82AA;
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST : u32 : 0x82AC;
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST : u32 : 0x82AD;
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE : u32 : 0x82AE;
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE : u32 : 0x82AF;
GL_TEXTURE_COMPRESSED_BLOCK_WIDTH : u32 : 0x82B1;
GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT : u32 : 0x82B2;
GL_TEXTURE_COMPRESSED_BLOCK_SIZE  : u32 : 0x82B3;
GL_CLEAR_BUFFER                   : u32 : 0x82B4;
GL_TEXTURE_VIEW                   : u32 : 0x82B5;
GL_VIEW_COMPATIBILITY_CLASS       : u32 : 0x82B6;
GL_FULL_SUPPORT                   : u32 : 0x82B7;
GL_CAVEAT_SUPPORT                 : u32 : 0x82B8;
GL_IMAGE_CLASS_4_X_32             : u32 : 0x82B9;
GL_IMAGE_CLASS_2_X_32             : u32 : 0x82BA;
GL_IMAGE_CLASS_1_X_32             : u32 : 0x82BB;
GL_IMAGE_CLASS_4_X_16             : u32 : 0x82BC;
GL_IMAGE_CLASS_2_X_16             : u32 : 0x82BD;
GL_IMAGE_CLASS_1_X_16             : u32 : 0x82BE;
GL_IMAGE_CLASS_4_X_8              : u32 : 0x82BF;
GL_IMAGE_CLASS_2_X_8              : u32 : 0x82C0;
GL_IMAGE_CLASS_1_X_8              : u32 : 0x82C1;
GL_IMAGE_CLASS_11_11_10           : u32 : 0x82C2;
GL_IMAGE_CLASS_10_10_10_2         : u32 : 0x82C3;
GL_VIEW_CLASS_128_BITS            : u32 : 0x82C4;
GL_VIEW_CLASS_96_BITS             : u32 : 0x82C5;
GL_VIEW_CLASS_64_BITS             : u32 : 0x82C6;
GL_VIEW_CLASS_48_BITS             : u32 : 0x82C7;
GL_VIEW_CLASS_32_BITS             : u32 : 0x82C8;
GL_VIEW_CLASS_24_BITS             : u32 : 0x82C9;
GL_VIEW_CLASS_16_BITS             : u32 : 0x82CA;
GL_VIEW_CLASS_8_BITS              : u32 : 0x82CB;
GL_VIEW_CLASS_S3TC_DXT1_RGB       : u32 : 0x82CC;
GL_VIEW_CLASS_S3TC_DXT1_RGBA      : u32 : 0x82CD;
GL_VIEW_CLASS_S3TC_DXT3_RGBA      : u32 : 0x82CE;
GL_VIEW_CLASS_S3TC_DXT5_RGBA      : u32 : 0x82CF;
GL_VIEW_CLASS_RGTC1_RED           : u32 : 0x82D0;
GL_VIEW_CLASS_RGTC2_RG            : u32 : 0x82D1;
GL_VIEW_CLASS_BPTC_UNORM          : u32 : 0x82D2;
GL_VIEW_CLASS_BPTC_FLOAT          : u32 : 0x82D3;
GL_UNIFORM                        : u32 : 0x92E1;
GL_UNIFORM_BLOCK                  : u32 : 0x92E2;
GL_PROGRAM_INPUT                  : u32 : 0x92E3;
GL_PROGRAM_OUTPUT                 : u32 : 0x92E4;
GL_BUFFER_VARIABLE                : u32 : 0x92E5;
GL_SHADER_STORAGE_BLOCK           : u32 : 0x92E6;
GL_VERTEX_SUBROUTINE              : u32 : 0x92E8;
GL_TESS_CONTROL_SUBROUTINE        : u32 : 0x92E9;
GL_TESS_EVALUATION_SUBROUTINE     : u32 : 0x92EA;
GL_GEOMETRY_SUBROUTINE            : u32 : 0x92EB;
GL_FRAGMENT_SUBROUTINE            : u32 : 0x92EC;
GL_COMPUTE_SUBROUTINE             : u32 : 0x92ED;
GL_VERTEX_SUBROUTINE_UNIFORM      : u32 : 0x92EE;
GL_TESS_CONTROL_SUBROUTINE_UNIFORM : u32 : 0x92EF;
GL_TESS_EVALUATION_SUBROUTINE_UNIFORM : u32 : 0x92F0;
GL_GEOMETRY_SUBROUTINE_UNIFORM    : u32 : 0x92F1;
GL_FRAGMENT_SUBROUTINE_UNIFORM    : u32 : 0x92F2;
GL_COMPUTE_SUBROUTINE_UNIFORM     : u32 : 0x92F3;
GL_TRANSFORM_FEEDBACK_VARYING     : u32 : 0x92F4;
GL_ACTIVE_RESOURCES               : u32 : 0x92F5;
GL_MAX_NAME_LENGTH                : u32 : 0x92F6;
GL_MAX_NUM_ACTIVE_VARIABLES       : u32 : 0x92F7;
GL_MAX_NUM_COMPATIBLE_SUBROUTINES : u32 : 0x92F8;
GL_NAME_LENGTH                    : u32 : 0x92F9;
GL_TYPE                           : u32 : 0x92FA;
GL_ARRAY_SIZE                     : u32 : 0x92FB;
GL_OFFSET                         : u32 : 0x92FC;
GL_BLOCK_INDEX                    : u32 : 0x92FD;
GL_ARRAY_STRIDE                   : u32 : 0x92FE;
GL_MATRIX_STRIDE                  : u32 : 0x92FF;
GL_IS_ROW_MAJOR                   : u32 : 0x9300;
GL_ATOMIC_COUNTER_BUFFER_INDEX    : u32 : 0x9301;
GL_BUFFER_BINDING                 : u32 : 0x9302;
GL_BUFFER_DATA_SIZE               : u32 : 0x9303;
GL_NUM_ACTIVE_VARIABLES           : u32 : 0x9304;
GL_ACTIVE_VARIABLES               : u32 : 0x9305;
GL_REFERENCED_BY_VERTEX_SHADER    : u32 : 0x9306;
GL_REFERENCED_BY_TESS_CONTROL_SHADER : u32 : 0x9307;
GL_REFERENCED_BY_TESS_EVALUATION_SHADER : u32 : 0x9308;
GL_REFERENCED_BY_GEOMETRY_SHADER  : u32 : 0x9309;
GL_REFERENCED_BY_FRAGMENT_SHADER  : u32 : 0x930A;
GL_REFERENCED_BY_COMPUTE_SHADER   : u32 : 0x930B;
GL_TOP_LEVEL_ARRAY_SIZE           : u32 : 0x930C;
GL_TOP_LEVEL_ARRAY_STRIDE         : u32 : 0x930D;
GL_LOCATION                       : u32 : 0x930E;
GL_LOCATION_INDEX                 : u32 : 0x930F;
GL_IS_PER_PATCH                   : u32 : 0x92E7;
GL_SHADER_STORAGE_BUFFER          : u32 : 0x90D2;
GL_SHADER_STORAGE_BUFFER_BINDING  : u32 : 0x90D3;
GL_SHADER_STORAGE_BUFFER_START    : u32 : 0x90D4;
GL_SHADER_STORAGE_BUFFER_SIZE     : u32 : 0x90D5;
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS : u32 : 0x90D6;
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS : u32 : 0x90D7;
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS : u32 : 0x90D8;
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS : u32 : 0x90D9;
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS : u32 : 0x90DA;
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS : u32 : 0x90DB;
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS : u32 : 0x90DC;
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS : u32 : 0x90DD;
GL_MAX_SHADER_STORAGE_BLOCK_SIZE  : u32 : 0x90DE;
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT : u32 : 0x90DF;
GL_SHADER_STORAGE_BARRIER_BIT     : u32 : 0x00002000;
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES : u32 : 0x8F39;
GL_DEPTH_STENCIL_TEXTURE_MODE     : u32 : 0x90EA;
GL_TEXTURE_BUFFER_OFFSET          : u32 : 0x919D;
GL_TEXTURE_BUFFER_SIZE            : u32 : 0x919E;
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT : u32 : 0x919F;
GL_TEXTURE_VIEW_MIN_LEVEL         : u32 : 0x82DB;
GL_TEXTURE_VIEW_NUM_LEVELS        : u32 : 0x82DC;
GL_TEXTURE_VIEW_MIN_LAYER         : u32 : 0x82DD;
GL_TEXTURE_VIEW_NUM_LAYERS        : u32 : 0x82DE;
GL_TEXTURE_IMMUTABLE_LEVELS       : u32 : 0x82DF;
GL_VERTEX_ATTRIB_BINDING          : u32 : 0x82D4;
GL_VERTEX_ATTRIB_RELATIVE_OFFSET  : u32 : 0x82D5;
GL_VERTEX_BINDING_DIVISOR         : u32 : 0x82D6;
GL_VERTEX_BINDING_OFFSET          : u32 : 0x82D7;
GL_VERTEX_BINDING_STRIDE          : u32 : 0x82D8;
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET : u32 : 0x82D9;
GL_MAX_VERTEX_ATTRIB_BINDINGS     : u32 : 0x82DA;
GL_VERTEX_BINDING_BUFFER          : u32 : 0x8F4F;
/* GL_VERSION_4_3 */

//#ifndef GL_VERSION_4_4
//#define GL_VERSION_4_4 1
GL_MAX_VERTEX_ATTRIB_STRIDE       : u32 :0x82E5;
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED : u32 :0x8221;
GL_TEXTURE_BUFFER_BINDING         : u32 :0x8C2A;
GL_MAP_PERSISTENT_BIT             : u32 :0x0040;
GL_MAP_COHERENT_BIT               : u32 :0x0080;
GL_DYNAMIC_STORAGE_BIT            : u32 :0x0100;
GL_CLIENT_STORAGE_BIT             : u32 :0x0200;
GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT : u32 :0x00004000;
GL_BUFFER_IMMUTABLE_STORAGE       : u32 :0x821F;
GL_BUFFER_STORAGE_FLAGS           : u32 :0x8220;
GL_CLEAR_TEXTURE                  : u32 :0x9365;
GL_LOCATION_COMPONENT             : u32 :0x934A;
GL_TRANSFORM_FEEDBACK_BUFFER_INDEX : u32 :0x934B;
GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE : u32 :0x934C;
GL_QUERY_BUFFER                   : u32 :0x9192;
GL_QUERY_BUFFER_BARRIER_BIT       : u32 :0x00008000;
GL_QUERY_BUFFER_BINDING           : u32 :0x9193;
GL_QUERY_RESULT_NO_WAIT           : u32 :0x9194;
GL_MIRROR_CLAMP_TO_EDGE           : u32 :0x8743;
/* GL_VERSION_4_4 */

//#ifndef GL_VERSION_4_5
//#define GL_VERSION_4_5 1
GL_CONTEXT_LOST                   : u32 : 0x0507;
GL_NEGATIVE_ONE_TO_ONE            : u32 : 0x935E;
GL_ZERO_TO_ONE                    : u32 : 0x935F;
GL_CLIP_ORIGIN                    : u32 : 0x935C;
GL_CLIP_DEPTH_MODE                : u32 : 0x935D;
GL_QUERY_WAIT_INVERTED            : u32 : 0x8E17;
GL_QUERY_NO_WAIT_INVERTED         : u32 : 0x8E18;
GL_QUERY_BY_REGION_WAIT_INVERTED  : u32 : 0x8E19;
GL_QUERY_BY_REGION_NO_WAIT_INVERTED : u32 : 0x8E1A;
GL_MAX_CULL_DISTANCES             : u32 : 0x82F9;
GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES : u32 : 0x82FA;
GL_TEXTURE_TARGET                 : u32 : 0x1006;
GL_QUERY_TARGET                   : u32 : 0x82EA;
GL_GUILTY_CONTEXT_RESET           : u32 : 0x8253;
GL_INNOCENT_CONTEXT_RESET         : u32 : 0x8254;
GL_UNKNOWN_CONTEXT_RESET          : u32 : 0x8255;
GL_RESET_NOTIFICATION_STRATEGY    : u32 : 0x8256;
GL_LOSE_CONTEXT_ON_RESET          : u32 : 0x8252;
GL_NO_RESET_NOTIFICATION          : u32 : 0x8261;
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT : u32 : 0x00000004;
GL_CONTEXT_RELEASE_BEHAVIOR       : u32 : 0x82FB;
GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH : u32 : 0x82FC;
/* GL_VERSION_4_5 */

//#ifndef GL_VERSION_4_6
//#define GL_VERSION_4_6 1
GL_SHADER_BINARY_FORMAT_SPIR_V    : u32 : 0x9551;
GL_SPIR_V_BINARY                  : u32 : 0x9552;
GL_PARAMETER_BUFFER               : u32 : 0x80EE;
GL_PARAMETER_BUFFER_BINDING       : u32 : 0x80EF;
GL_CONTEXT_FLAG_NO_ERROR_BIT      : u32 : 0x00000008;
GL_VERTICES_SUBMITTED             : u32 : 0x82EE;
GL_PRIMITIVES_SUBMITTED           : u32 : 0x82EF;
GL_VERTEX_SHADER_INVOCATIONS      : u32 : 0x82F0;
GL_TESS_CONTROL_SHADER_PATCHES    : u32 : 0x82F1;
GL_TESS_EVALUATION_SHADER_INVOCATIONS : u32 : 0x82F2;
GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED : u32 : 0x82F3;
GL_FRAGMENT_SHADER_INVOCATIONS    : u32 : 0x82F4;
GL_COMPUTE_SHADER_INVOCATIONS     : u32 : 0x82F5;
GL_CLIPPING_INPUT_PRIMITIVES      : u32 : 0x82F6;
GL_CLIPPING_OUTPUT_PRIMITIVES     : u32 : 0x82F7;
GL_POLYGON_OFFSET_CLAMP           : u32 : 0x8E1B;
GL_SPIR_V_EXTENSIONS              : u32 : 0x9553;
GL_NUM_SPIR_V_EXTENSIONS          : u32 : 0x9554;
GL_TEXTURE_MAX_ANISOTROPY         : u32 : 0x84FE;
GL_MAX_TEXTURE_MAX_ANISOTROPY     : u32 : 0x84FF;
GL_TRANSFORM_FEEDBACK_OVERFLOW    : u32 : 0x82EC;
GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW : u32 : 0x82ED;
/* GL_VERSION_4_6 */

#foreign("GL")

glXGetProcAddress :: (proc_name : ^GLubyte) -> ^void;

//glClear : (GLbitfield) -> void;
glClearBufferiv : (GLenum, GLint, ^GLint) -> void;
glClearBufferuiv : (GLenum, GLint, ^GLuint) -> void;
glClearBufferfv : (GLenum, GLint, ^GLfloat) -> void;
glClearBufferfi : (GLenum, GLint, GLfloat, GLint) -> void;
glClearNamedFramebufferiv : (GLuint, GLenum, GLint, ^GLint) -> void;
glClearNamedFramebufferuiv : (GLuint, GLuint, GLint, ^GLuint) -> void;
glClearNamedFramebufferfv : (GLuint, GLuint, GLint, ^GLfloat) -> void;
glClearNamedFramebufferfi : (GLuint, GLuint, GLint, GLfloat, GLint) -> void;
glNamedFramebufferReadBuffer : (GLuint, GLenum) -> void;
glReadnPixels : (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ^void) -> void;
//glClearColor : (GLfloat, GLfloat, GLfloat, GLfloat) -> void;
glClearDepth : (GLdouble) -> void;
glClearStencil : (GLint) -> void;
glDrawBuffer : (GLenum) -> void;
glFinish : () -> void;
glFlush : () -> void;
glReadBuffer : (GLenum) -> void;
glReadPixels : (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ^GLvoid) -> void;

glActiveTexture : (GLenum) -> void;
glBindImageTexture : (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) -> void;
glBindImageTextures : (GLuint, GLsizei, ^GLuint) -> void;
glBindTexture : (GLenum, GLuint) -> void;
glBindTextureUnit : (GLuint, GLuint) -> void;
glBindTextures : (GLuint, GLsizei, ^GLuint) -> void;
glClearTexImage : (GLuint, GLint, GLenum, GLenum, ^void) -> void;
glClearTexSubImage : (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ^void) -> void;
glCompressedTexImage1D : (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ^GLvoid) -> void;
glCompressedTexImage2D : (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ^GLvoid) -> void;
glCompressedTexImage3D : (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ^GLvoid) -> void;
glCompressedTexSubImage1D : (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ^GLvoid) -> void;
glCompressedTextureSubImage1D : (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ^void) -> void;
glCompressedTexSubImage2D : (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ^GLvoid) -> void;
glCompressedTextureSubImage2D : (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ^void) -> void;
glCompressedTexSubImage3D : (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ^GLvoid) -> void;
glCompressedTextureSubImage3D : (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ^void) -> void;
glCopyTextureSubImage1D : (GLuint, GLint, GLint, GLint, GLint, GLsizei) -> void;
glCopyTextureSubImage2D : (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
glCopyImageSubData : (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> void;
glCopyTexImage1D : (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) -> void;
glCopyTexImage2D : (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) -> void;
glCopyTexSubImage1D : (GLenum, GLint, GLint, GLint, GLint, GLsizei) -> void;
glCopyTexSubImage2D : (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
glCopyTexSubImage3D : (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
glCopyTextureSubImage3D : (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
glCreateTextures : (GLenum, GLsizei, ^GLuint) -> void;
glDeleteTextures : (GLsizei, ^GLuint) -> void;
glGenTextures : (GLsizei, ^GLuint) -> void;
glGetCompressedTexImage : (GLenum, GLint, ^GLvoid) -> void;
glGetnCompressedTexImage : (GLenum, GLint, GLsizei, ^void) -> void;
glGetCompressedTextureImage : (GLuint, GLint, GLsizei, ^void) -> void;
glGetCompressedTextureSubImage : (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ^void) -> void;
glGetTexImage : (GLenum, GLint, GLenum, GLenum, ^GLvoid) -> void;
glGetnTexImage : (GLenum, GLint, GLenum, GLenum, GLsizei, ^void) -> void;
glGetTextureImage : (GLuint, GLint, GLenum, GLenum, GLsizei, ^void) -> void;
glGetTexLevelParameterfv : (GLenum, GLint, GLenum, ^GLfloat) -> void;
glGetTexLevelParameteriv : (GLenum, GLint, GLenum, ^GLint) -> void;
glGetTextureLevelParameterfv : (GLuint, GLint, GLenum, ^GLfloat) -> void;
glGetTextureLevelParameteriv : (GLuint, GLint, GLenum, ^GLint) -> void;
glGetTexParameterfv : (GLenum, GLint, GLenum, ^GLfloat) -> void;
glGetTexParameteriv : (GLenum, GLint, GLenum, ^GLint) -> void;
glGetTexParameterIiv : (GLenum, GLenum, ^GLint) -> void;
glGetTexParameterIuiv : (GLenum, GLenum, ^GLuint) -> void;
glGetTextureParameterfv : (GLuint, GLenum, ^GLfloat) -> void;
glGetTextureParameteriv : (GLuint, GLenum, ^GLint) -> void;
glGetTextureParameterIiv : (GLuint, GLenum, ^GLint) -> void;
glGetTextureParameterIuiv : (GLuint, GLenum, ^GLuint) -> void;
glGetTextureSubImage : (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ^void) -> void;
glInvalidateTexImage : (GLuint, GLint) -> void;
glInvalidateTexSubImage : (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> void;
glIsTexture : (GLuint) -> GLboolean;
glTexBuffer : (GLenum, GLenum, GLuint) -> void;
glTextureBuffer : (GLuint, GLenum, GLuint) -> void;
glTexBufferRange : (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) -> void;
glTextureBufferRange : (GLenum, GLenum, GLuint, GLintptr, GLsizei) -> void;
glTexImage1D : (GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ^GLvoid) -> void;
glTexImage2D : (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ^GLvoid) -> void;
glTexImage2DMultisample : (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> void;
glTexImage3D : (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ^GLvoid) -> void;
glTexImage3DMultisample : (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> void;
glTexParameterf : (GLenum, GLenum, GLfloat) -> void;
glTexParameteri : (GLenum, GLenum, GLint) -> void;
glTextureParameterf : (GLenum, GLenum, GLfloat) -> void;
glTextureParameteri : (GLenum, GLenum, GLint) -> void;
glTexParameterfv : (GLenum, GLenum, ^GLfloat) -> void;
glTexParameteriv : (GLenum, GLenum, ^GLint) -> void;
glTexParameterIiv : (GLenum, GLenum, ^GLint) -> void;
glTexParameterIuiv : (GLenum, GLenum, ^GLuint) -> void;
glTextureParameterfv : (GLuint, GLenum, ^GLfloat) -> void;
glTextureParameteriv : (GLuint, GLenum, ^GLint) -> void;
glTextureParameterIiv : (GLuint, GLenum, ^GLint) -> void;
glTextureParameterIuiv : (GLuint, GLenum, ^GLuint) -> void;
glTexStorage1D : (GLenum, GLsizei, GLenum, GLsizei) -> void;
glTextureStorage1D : (GLuint, GLsizei, GLenum, GLsizei) -> void;
glTexStorage2D : (GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> void;
glTextureStorage2D : (GLuint, GLsizei, GLenum, GLsizei, GLsizei) -> void;
glTexStorage2DMultisample : (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> void;
glTextureStorage2DMultisample : (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> void;
glTexStorage3D : (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> void;
glTextureStorage3D : (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> void;
glTexStorage3DMultisample : (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> void;
glTextureStorage3DMultisample : (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> void;
glTexSubImage1D : (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ^GLvoid) -> void;
glTextureSubImage1D : (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ^void) -> void;
glTexSubImage2D : (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ^GLvoid) -> void;
glTextureSubImage2D : (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ^void) -> void;
glTexSubImage3D : (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ^GLvoid) -> void;
glTextureSubImage3D : (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ^void) -> void;
glTextureView : (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) -> void;

glBindFramebuffer : (GLenum, GLuint) -> void;
glBindRenderbuffer : (GLenum, GLuint) -> void;
glBlitFramebuffer : (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> void;
glBlitNamedFramebuffer : (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> void;
glCheckFramebufferStatus : (GLenum) -> GLenum;
glCheckNamedFramebufferStatus : (GLuint, GLenum) -> GLenum;
glCreateFramebuffers : (GLsizei, ^GLuint) -> void;
glCreateRenderbuffers : (GLsizei, ^GLuint) -> void;
glDeleteFramebuffers : (GLsizei, ^GLuint) -> void;
glDeleteRenderbuffers : (GLsizei, ^GLuint) -> void;
glDrawBuffers : (GLsizei, ^GLenum) -> void;
glNamedFramebufferDrawBuffers : (GLuint, GLsizei, ^GLenum) -> void;
glFramebufferParameteri : (GLenum, GLenum, GLint) -> void;
glNamedFramebufferParameteri : (GLuint, GLenum, GLint) -> void;
glFramebufferRenderbuffer : (GLenum, GLenum, GLenum, GLuint) -> void;
glNamedFramebufferRenderbuffer : (GLuint, GLenum, GLenum, GLuint) -> void;
glFramebufferTexture : (GLenum, GLenum, GLuint, GLint) -> void;
glFramebufferTexture1D : (GLenum, GLenum, GLenum, GLuint, GLint) -> void;
glFramebufferTexture2D : (GLenum, GLenum, GLenum, GLuint, GLint) -> void;
glFramebufferTexture3D : (GLenum, GLenum, GLenum, GLuint, GLint, GLint) -> void;
glNamedFramebufferTexture : (GLuint, GLenum, GLuint, GLint) -> void;
glFramebufferTextureLayer : (GLenum, GLenum, GLuint, GLint, GLint) -> void;
glNamedFramebufferTextureLayer : (GLuint, GLenum, GLuint, GLint, GLint) -> void;
glGenFramebuffers : (GLsizei, ^GLuint) -> void;
glGenRenderbuffers : (GLsizei, ^GLuint) -> void;
glGenerateMipmap : (GLenum) -> void;
glGenerateTextureMipmap : (GLuint) -> void;
glGetFramebufferAttachmentParameteriv : (GLenum, GLenum, GLenum, ^GLint) -> void;
glGetNamedFramebufferAttachmentParameteriv : (GLuint, GLenum, GLenum, ^GLint) -> void;
glGetFramebufferParameteriv : (GLenum, GLenum, ^GLint) -> void;
glGetNamedFramebufferParameteriv : (GLuint, GLenum, ^GLint) -> void;
glGetRenderbufferParameteriv : (GLenum, GLenum, ^GLint) -> void;
glGetNamedRenderbufferParameteriv : (GLuint, GLenum, ^GLint) -> void;
glInvalidateFramebuffer : (GLenum, GLsizei, ^GLenum) -> void;
glInvalidateNamedFramebufferData : (GLuint, GLsizei, ^GLenum) -> void;
glInvalidateSubFramebuffer : (GLenum, GLsizei, ^GLenum, GLint, GLint, GLint, GLint) -> void;
glInvalidateNamedFramebufferSubData : (GLuint, GLsizei, ^GLenum, GLint, GLint, GLsizei, GLsizei) -> void;
glIsFramebuffer : (GLuint) -> GLboolean;
glIsRenderbuffer : (GLuint) -> GLboolean;
glRenderbufferStorage : (GLenum, GLenum, GLsizei, GLsizei) -> void;
glNamedRenderbufferStorage : (GLuint, GLenum, GLsizei, GLsizei) -> void;
glRenderbufferStorageMultisample : (GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> void;
glNamedRenderbufferStorageMultisample : (GLuint, GLsizei, GLenum, GLsizei, GLsizei) -> void;
glSampleMaski : (GLuint, GLbitfield) -> void;

glAttachShader : (GLuint, GLuint) -> void;
glBindAttribLocation : (GLuint, GLuint, ^GLchar) -> void;
glBindFragDataLocation : (GLuint, GLuint, ^s8) -> void;
glBindFragDataLocationIndexed : (GLuint, GLuint, GLuint, ^s8) -> void;
glCompileShader : (GLuint) -> void;
glCreateProgram : () -> GLuint;
glCreateShader : (GLenum) -> GLuint;
glCreateShaderProgramv : (GLenum, GLsizei, ^^s8) -> GLuint;
glDeleteProgram : (GLuint) -> void;
glDeleteShader : (GLuint) -> void;
glDetachShader : (GLuint, GLuint) -> void;
glGetActiveAtomicCounterBufferiv : (GLuint, GLuint, GLenum, ^GLint) -> void;
glGetActiveAttrib : (GLuint, GLuint, GLsizei, ^GLsizei, ^GLint, ^GLenum, ^GLchar) -> void;
glGetActiveSubroutineName : (GLuint, GLenum, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetActiveSubroutineUniformiv : (GLuint, GLenum, GLuint, GLenum, ^GLint) -> void;
glGetActiveSubroutineUniformName : (GLuint, GLenum, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetActiveUniform : (GLuint, GLuint, GLsizei, ^GLsizei, ^GLint, ^GLenum, ^GLchar) -> void;
glGetActiveUniformBlockiv : (GLuint, GLuint, GLenum, ^GLint) -> void;
glGetActiveUniformBlockName : (GLuint, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetActiveUniformName : (GLuint, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetActiveUniformsiv : (GLuint, GLsizei, ^GLuint, GLenum, ^GLint) -> void;
glGetAttachedShaders : (GLuint, GLsizei, ^GLsizei, ^GLuint) -> void;
glGetAttribLocation : (GLuint, ^GLchar) -> GLint;
glGetFragDataIndex : (GLuint, ^s8) -> GLint;
glGetFragDataLocation : (GLuint, ^s8) -> GLint;
glGetProgramiv : (GLuint, GLenum, ^GLint) -> void;
glGetProgramBinary : (GLuint, GLsizei, ^GLsizei, ^GLenum, ^void) -> void;
glGetProgramInfoLog : (GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetProgramResourceiv : (GLuint, GLenum, GLuint, GLsizei, ^GLenum, GLsizei, ^GLsizei, ^GLint) -> void;
glGetProgramResourceIndex : (GLuint, GLenum, ^s8) -> GLuint;
glGetProgramResourceLocation : (GLuint, GLenum, ^s8) -> GLint;
glGetProgramResourceLocationIndex : (GLuint, GLenum, ^s8) -> GLint;
glGetProgramResourceName : (GLuint, GLenum, GLuint, GLsizei, ^GLsizei, ^s8) -> void;
glGetProgramStageiv : (GLuint, GLenum, GLenum, ^GLint) -> void;
glGetShaderiv : (GLuint, GLenum, ^GLint) -> void;
glGetShaderInfoLog : (GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetShaderPrecisionFormat : (GLenum, GLenum, ^GLint, ^GLint) -> void;
glGetShaderSource : (GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetSubroutineIndex : (GLuint, GLenum, ^GLchar) -> GLuint;
glGetSubroutineUniformLocation : (GLuint, GLenum, ^GLchar) -> GLint;
glGetUniformfv : (GLuint, GLint, ^GLfloat) -> void;
glGetUniformiv : (GLuint, GLint, ^GLint) -> void;
glGetUniformuiv : (GLuint, GLint, ^GLuint) -> void;
glGetUniformdv : (GLuint, GLint, ^GLdouble) -> void;
glGetnUniformfv : (GLuint, GLint, GLsizei, ^GLfloat) -> void;
glGetnUniformiv : (GLuint, GLint, GLsizei, ^GLint) -> void;
glGetnUniformuiv : (GLuint, GLint, GLsizei, ^GLuint) -> void;
glGetnUniformdv : (GLuint, GLint, GLsizei, ^GLdouble) -> void;
glGetUniformBlockIndex : (GLuint, ^GLchar) -> GLuint;
glGetUniformIndices : (GLuint, GLsizei, ^^GLchar, ^GLuint) -> void;
glGetUniformLocation : (GLuint, ^GLchar) -> GLint;
glGetUniformSubroutineuiv : (GLenum, GLint, ^GLuint) -> void;
glIsProgram : (GLuint) -> GLboolean;
glIsShader : (GLuint) -> GLboolean;
glLinkProgram : (GLuint) -> void;
glMinSampleShading : (GLfloat) -> void;
glProgramBinary : (GLuint, GLenum, ^void, GLsizei) -> void;
glProgramParameteri : (GLuint, GLenum, GLint) -> void;
glProgramUniform1f : (GLuint, GLint, GLfloat) -> void;
glProgramUniform2f : (GLuint, GLint, GLfloat, GLfloat) -> void;
glProgramUniform3f : (GLuint, GLint, GLfloat, GLfloat, GLfloat) -> void;
glProgramUniform4f : (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
glProgramUniform1i : (GLuint, GLint, GLint) -> void;
glProgramUniform2i : (GLuint, GLint, GLint, GLint) -> void;
glProgramUniform3i : (GLuint, GLint, GLint, GLint, GLint) -> void;
glProgramUniform4i : (GLuint, GLint, GLint, GLint, GLint, GLint) -> void;
glProgramUniform1ui : (GLuint, GLint, GLuint) -> void;
glProgramUniform2ui : (GLuint, GLint, GLint, GLuint) -> void;
glProgramUniform3ui : (GLuint, GLint, GLint, GLint, GLuint) -> void;
glProgramUniform4ui : (GLuint, GLint, GLint, GLint, GLint, GLuint) -> void;
glProgramUniform1fv : (GLuint, GLint, GLsizei, ^GLfloat) -> void;
glProgramUniform2fv : (GLuint, GLint, GLsizei, ^GLfloat) -> void;
glProgramUniform3fv : (GLuint, GLint, GLsizei, ^GLfloat) -> void;
glProgramUniform4fv : (GLuint, GLint, GLsizei, ^GLfloat) -> void;
glProgramUniform1iv : (GLuint, GLint, GLsizei, ^GLint) -> void;
glProgramUniform2iv : (GLuint, GLint, GLsizei, ^GLint) -> void;
glProgramUniform3iv : (GLuint, GLint, GLsizei, ^GLint) -> void;
glProgramUniform4iv : (GLuint, GLint, GLsizei, ^GLint) -> void;
glProgramUniform1uiv : (GLuint, GLint, GLsizei, ^GLuint) -> void;
glProgramUniform2uiv : (GLuint, GLint, GLsizei, ^GLuint) -> void;
glProgramUniform3uiv : (GLuint, GLint, GLsizei, ^GLuint) -> void;
glProgramUniform4uiv : (GLuint, GLint, GLsizei, ^GLuint) -> void;
glProgramUniformMatrix2fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix3fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix4fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix2x3fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix3x2fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix2x4fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix4x2fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix3x4fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix4x3fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glReleaseShaderCompiler : () -> void;
glShaderBinary : (GLsizei, ^GLuint, GLenum, ^void, GLsizei) -> void;
glShaderSource : (GLuint, GLsizei, ^^GLchar, ^GLint) -> void;
glShaderStorageBlockBinding : (GLuint, GLuint, GLuint) -> void;
glUniform1f : (GLint, GLfloat) -> void;
glUniform2f : (GLint, GLfloat, GLfloat) -> void;
glUniform3f : (GLint, GLfloat, GLfloat, GLfloat) -> void;
glUniform4f : (GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
glUniform1i : (GLint, GLint) -> void;
glUniform2i : (GLint, GLint, GLint) -> void;
glUniform3i : (GLint, GLint, GLint, GLint) -> void;
glUniform4i : (GLint, GLint, GLint, GLint, GLint) -> void;
glUniform1ui : (GLint, GLuint) -> void;
glUniform2ui : (GLint, GLuint, GLuint) -> void;
glUniform3ui : (GLint, GLuint, GLuint, GLuint) -> void;
glUniform4ui : (GLint, GLuint, GLuint, GLuint, GLuint) -> void;
glUniform1fv : (GLint, GLsizei, ^GLfloat) -> void;
glUniform2fv : (GLint, GLsizei, ^GLfloat) -> void;
glUniform3fv : (GLint, GLsizei, ^GLfloat) -> void;
glUniform4fv : (GLint, GLsizei, ^GLfloat) -> void;
glUniform1iv : (GLint, GLsizei, ^GLint) -> void;
glUniform2iv : (GLint, GLsizei, ^GLint) -> void;
glUniform3iv : (GLint, GLsizei, ^GLint) -> void;
glUniform4iv : (GLint, GLsizei, ^GLint) -> void;
glUniform1uiv : (GLint, GLsizei, ^GLuint) -> void;
glUniform2uiv : (GLint, GLsizei, ^GLuint) -> void;
glUniform3uiv : (GLint, GLsizei, ^GLuint) -> void;
glUniform4uiv : (GLint, GLsizei, ^GLuint) -> void;
glUniformMatrix2fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix3fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix4fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix2x3fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix3x2fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix2x4fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix4x2fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix3x4fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix4x3fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformBlockBinding : (GLuint, GLuint, GLuint) -> void;
glUniformSubroutinesuiv : (GLenum, GLsizei, ^GLuint) -> void;
glUseProgram : (GLuint) -> void;
glUseProgramStages : (GLuint, GLbitfield, GLuint) -> void;
glValidateProgram : (GLuint) -> void;

glBlendColor : (GLfloat, GLfloat, GLfloat, GLfloat) -> void;
glBlendEquation : (GLenum) -> void;
glBlendEquationi : (GLuint, GLenum) -> void;
glBlendEquationSeparate : (GLenum, GLenum) -> void;
glBlendEquationSeparatei : (GLuint, GLenum, GLenum) -> void;
glBlendFunc : (GLenum, GLenum) -> void;
glBlendFunci : (GLuint, GLenum, GLenum) -> void;
glBlendFuncSeparate : (GLenum, GLenum, GLenum, GLenum) -> void;
glBlendFuncSeparatei : (GLuint, GLenum, GLenum, GLenum, GLenum) -> void;
glClampColor : (GLenum, GLenum) -> void;
glClipControl : (GLenum, GLenum) -> void;
glColorMask : (GLboolean, GLboolean, GLboolean, GLboolean) -> void;
glColorMaski : (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) -> void;
glCullFace : (GLenum) -> void;
glDepthFunc : (GLenum) -> void;
glDepthMask : (GLboolean) -> void;
glDepthRange : (GLdouble, GLdouble) -> void;
glDepthRangef : (GLfloat, GLfloat) -> void;
glDepthRangeArrayv : (GLuint, GLsizei, ^GLdouble) -> void;
glDepthRangeIndexed : (GLuint, GLdouble, GLdouble) -> void;
glDisable : (GLenum) -> void;
glEnablei : (GLenum, GLuint) -> void;
glDisablei : (GLenum, GLuint) -> void;
//glEnable : (GLenum) -> void;
glFrontFace : (GLenum) -> void;
glGetBooleanv : (GLenum, ^GLboolean) -> void;
glGetDoublev : (GLenum, ^GLdouble) -> void;
glGetFloatv : (GLenum, ^GLfloat) -> void;
glGetIntegerv : (GLenum, ^GLint) -> void;
glGetInteger64v : (GLenum, ^GLint64) -> void;
glGetBooleani_v : (GLenum, GLuint, ^GLboolean) -> void;
glGetFloati_v : (GLenum, GLuint, ^GLfloat) -> void;
glGetDoublei_v : (GLenum, GLuint, ^GLdouble) -> void;
glGetInteger64i_v : (GLenum, GLuint, ^GLint64) -> void;
glGetError : () -> GLenum;
glHint : (GLenum, GLenum) -> void;
glIsEnabled : (GLenum) -> GLboolean;
glIsEnabledi : (GLenum, GLuint) -> GLboolean;
glLineWidth : (GLfloat) -> void;
glLogicOp : (GLenum) -> void;
glPixelStoref : (GLenum, GLfloat) -> void;
glPixelStorei : (GLenum, GLint) -> void;
glPointParameterf : (GLenum, GLfloat) -> void;
glPointParameteri : (GLenum, GLint) -> void;
glPointParameterfv : (GLenum, ^GLfloat) -> void;
glPointParameteriv : (GLenum, ^GLint) -> void;
glPointSize : (GLfloat) -> void;
glPolygonMode : (GLenum, GLenum) -> void;
glPolygonOffset : (GLfloat, GLfloat) -> void;
glScissor : (GLint, GLint, GLsizei, GLsizei) -> void;
glSampleCoverage : (GLfloat, GLboolean) -> void;
glScissorArrayv : (GLuint, GLsizei, ^GLint) -> void;
glScissorIndexed : (GLuint, GLint, GLint, GLsizei, GLsizei) -> void;
glScissorIndexedv : (GLuint, ^GLint) -> void;
glStencilFunc : (GLenum, GLint, GLuint) -> void;
glStencilFuncSeparate : (GLenum, GLenum, GLint, GLuint) -> void;
glStencilMask : (GLuint) -> void;
glStencilMaskSeparate : (GLenum, GLuint) -> void;
glStencilOp : (GLenum, GLenum, GLenum) -> void;
glStencilOpSeparate : (GLenum, GLenum, GLenum, GLenum) -> void;
//glViewport : (GLint, GLint, GLsizei, GLsizei) -> void;
glViewportArrayv : (GLuint, GLsizei, ^GLfloat) -> void;
glViewportIndexedf : (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
glViewportIndexedfv : (GLuint, ^GLfloat) -> void;

glBeginTransformFeedback : (GLenum) -> void;
glBindTransformFeedback : (GLenum, GLuint) -> void;
glCreateTransformFeedbacks : (GLsizei, ^GLuint) -> void;
glDeleteTransformFeedbacks : (GLsizei, ^GLuint) -> void;
glDrawTransformFeedback : (GLenum, GLuint) -> void;
glDrawTransformFeedbackInstanced : (GLenum, GLuint, GLsizei) -> void;
glDrawTransformFeedbackStream : (GLenum, GLuint, GLuint) -> void;
glDrawTransformFeedbackStreamInstanced : (GLenum, GLuint, GLuint, GLsizei) -> void;
glEndTransformFeedback : () -> void;
glGenTransformFeedbacks : (GLsizei, ^GLuint) -> void;
glGetTransformFeedbackiv : (GLuint, GLenum, ^GLint) -> void;
glGetTransformFeedbacki_v : (GLuint, GLenum, GLuint, ^GLint) -> void;
glGetTransformFeedbacki64_v : (GLuint, GLenum, GLuint, ^GLint64) -> void;
glGetTransformFeedbackVarying : (GLuint, GLuint, GLsizei, ^GLsizei, ^GLsizei, ^GLenum, ^s8) -> void;
glIsTransformFeedback : (GLuint) -> GLboolean;
glPauseTransformFeedback : () -> void;
glResumeTransformFeedback : () -> void;
glTransformFeedbackBufferBase : (GLuint, GLuint, GLuint) -> void;
glTransformFeedbackBufferRange : (GLuint, GLuint, GLuint, GLintptr, GLsizei) -> void;
glTransformFeedbackVaryings : (GLuint, GLsizei, ^^s8, GLenum) -> void;

glDispatchCompute : (GLuint, GLuint, GLuint) -> void;
glDispatchComputeIndirect : (GLintptr) -> void;
glGetGraphicsResetStatus : () -> GLenum;
glGetInternalformativ : (GLenum, GLenum, GLenum, GLsizei, ^GLint) -> void;
glGetInternalformati64v : (GLenum, GLenum, GLenum, GLsizei, ^GLint) -> void;
glGetMultisamplefv : (GLenum, GLuint, ^GLfloat) -> void;
glGetString : (GLenum) -> ^GLubyte;
glGetStringi : (GLenum, GLuint) -> ^GLubyte;
glMemoryBarrier : (GLbitfield) -> void;
glMemoryBarrierByRegion : (GLbitfield) -> void;

glBeginConditionalRender : (GLuint, GLenum) -> void;
glBeginQuery : (GLenum, GLuint) -> void;
glBeginQueryIndexed : (GLenum, GLuint, GLuint) -> void;
glCreateQueries : (GLenum, GLsizei, ^GLuint) -> void;
glDeleteQueries : (GLsizei, ^GLuint) -> void;
glEndConditionalRender : () -> void;
glEndQuery : (GLenum) -> void;
glEndQueryIndexed : (GLenum, GLuint) -> void;
glGenQueries : (GLsizei, ^GLuint) -> void;
glGetQueryIndexediv : (GLenum, GLuint, GLenum, ^GLint) -> void;
glGetQueryObjectiv : (GLuint, GLenum, ^GLint) -> void;
glGetQueryObjectuiv : (GLuint, GLenum, ^GLuint) -> void;
glGetQueryObjecti64v : (GLuint, GLenum, ^GLint64) -> void;
glGetQueryObjectui64v : (GLuint, GLenum, ^GLuint64) -> void;
glGetQueryiv : (GLenum, GLenum, ^GLint) -> void;
glIsQuery : (GLuint) -> GLboolean;
glQueryCounter : (GLuint, GLenum) -> void;

glClientWaitSync : (GLsync, GLbitfield, GLuint64) -> GLenum;
glDeleteSync : (GLsync) -> void;
glFenceSync : (GLenum, GLbitfield) -> GLsync;
glGetSynciv : (GLsync, GLenum, GLsizei, ^GLsizei, ^GLint) -> void;
glIsSync : (GLsync) -> GLboolean;
glTextureBarrier : () -> void;
glWaitSync : (GLsync, GLbitfield, GLuint64) -> void;

glBindVertexArray : (GLuint) -> void;
glDeleteVertexArrays : (GLsizei, ^GLuint) -> void;
glGenVertexArrays : (GLsizei, ^GLuint) -> void;
glIsVertexArray : (GLuint) -> GLboolean;

glBindSampler : (GLuint, GLuint) -> void;
glBindSamplers : (GLuint, GLsizei, ^GLuint) -> void;
glCreateSamplers : (GLsizei, ^GLuint) -> void;
glDeleteSamplers : (GLsizei, ^GLuint) -> void;
glGenSamplers : (GLsizei, ^GLuint) -> void;
glGetSamplerParameterfv : (GLuint, GLenum, ^GLfloat) -> void;
glGetSamplerParameteriv : (GLuint, GLenum, ^GLint) -> void;
glGetSamplerParameterIiv : (GLuint, GLenum, ^GLint) -> void;
glGetSamplerParameterIuiv : (GLuint, GLenum, ^GLuint) -> void;
glIsSampler : (GLuint) -> GLboolean;
glSamplerParameterf : (GLuint, GLenum, GLfloat) -> void;
glSamplerParameteri : (GLuint, GLenum, GLint) -> void;
glSamplerParameterfv : (GLuint, GLenum, ^GLfloat) -> void;
glSamplerParameteriv : (GLuint, GLenum, ^GLint) -> void;
glSamplerParameterIiv : (GLuint, GLenum, ^GLint) -> void;
glSamplerParameterIuiv : (GLuint, GLenum, ^GLuint) -> void;

glActiveShaderProgram : (GLuint, GLuint) -> void;
glBindProgramPipeline : (GLuint) -> void;
glCreateProgramPipelines : (GLsizei, ^GLuint) -> void;
glDeleteProgramPipelines : (GLsizei, ^GLuint) -> void;
glGenProgramPipelines : (GLsizei, ^GLuint) -> void;
glGetProgramPipelineiv : (GLuint, GLenum, ^GLint) -> void;
glGetProgramPipelineInfoLog : (GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glIsProgramPipeline : (GLuint) -> GLboolean;
glValidateProgramPipeline : (GLuint) -> void;

glDebugMessageCallback : (GLDEBUGPROC, ^void) -> void;
glDebugMessageControl : (GLenum, GLenum, GLenum, GLsizei, ^GLuint, GLboolean) -> void;
glDebugMessageInsert : (GLenum, GLenum, GLuint, GLenum, GLsizei, ^s8) -> void;
glGetDebugMessageLog : (GLuint, GLsizei, ^GLenum, ^GLenum, ^GLuint, ^GLenum, ^GLsizei, ^GLchar) -> GLuint;
glGetObjectLabel : (GLenum, GLuint, GLsizei, ^GLsizei, ^s8) -> void;
glGetObjectPtrLabel : (^void, GLsizei, ^GLsizei, ^s8) -> void;
glGetPointerv : (GLenum, ^^GLvoid) -> void;
glGetProgramInterfaceiv : (GLuint, GLenum, GLenum, ^GLint) -> void;
glObjectLabel : (GLenum, GLuint, GLsizei, ^s8) -> void;
glObjectPtrLabel : (^void, GLsizei, ^s8) -> void;
glPopDebugGroup : () -> void;
glPushDebugGroup : (GLenum, GLuint, GLsizei, ^s8) -> void;

glBindBuffer : (GLenum, GLuint) -> void;
glBindBufferBase : (GLenum, GLuint, GLuint) -> void;
glBindBufferRange : (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) -> void;
glBindBuffersBase : (GLenum, GLuint, GLsizei, ^GLuint) -> void;
glBindBuffersRange : (GLenum, GLuint, GLsizei, ^GLuint, ^GLintptr, ^GLintptr) -> void;
glBindVertexBuffer : (GLuint, GLuint, GLintptr, GLintptr) -> void;
glVertexArrayVertexBuffer : (GLuint, GLuint, GLuint, GLintptr, GLsizei) -> void;
glBindVertexBuffers : (GLuint, GLsizei, ^GLuint, ^GLintptr, ^GLsizei) -> void;
glVertexArrayVertexBuffers : (GLuint, GLuint, GLsizei, ^GLuint, ^GLintptr, ^GLsizei) -> void;
glBufferData : (GLenum, GLsizeiptr, ^GLvoid, GLenum) -> void;
glNamedBufferData : (GLuint, GLsizei, ^void, GLenum) -> void;
glBufferStorage : (GLenum, GLsizeiptr, ^GLvoid, GLbitfield) -> void;
glNamedBufferStorage : (GLuint, GLsizei, ^void, GLbitfield) -> void;
glBufferSubData : (GLenum, GLintptr, GLsizeiptr, ^GLvoid) -> void;
glNamedBufferSubData : (GLuint, GLintptr, GLsizei, ^void) -> void;
glClearBufferData : (GLenum, GLenum, GLenum, GLenum, ^void) -> void;
glClearNamedBufferData : (GLuint, GLenum, GLenum, GLenum, ^void) -> void;
glClearBufferSubData : (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ^void) -> void;
glClearNamedBufferSubData : (GLuint, GLenum, GLintptr, GLsizei, GLenum, GLenum, ^void) -> void;
glCopyBufferSubData : (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) -> void;
glCopyNamedBufferSubData : (GLuint, GLuint, GLintptr, GLintptr, GLsizei) -> void;
glCreateBuffers : (GLsizei, ^GLuint) -> void;
glCreateVertexArrays : (GLsizei, ^GLuint) -> void;
glDeleteBuffers : (GLsizei, ^GLuint) -> void;
glDisableVertexAttribArray : (GLuint) -> void;
glDisableVertexArrayAttrib : (GLuint, GLuint) -> void;
glDrawArrays : (GLenum, GLint, GLsizei) -> void;
glDrawArraysIndirect : (GLenum, ^void) -> void;
glDrawArraysInstanced : (GLenum, GLint, GLsizei, GLsizei) -> void;
glDrawArraysInstancedBaseInstance : (GLenum, GLint, GLsizei, GLsizei, GLuint) -> void;
glDrawElements : (GLenum, GLsizei, GLenum, ^GLvoid) -> void;
glDrawElementsBaseVertex : (GLenum, GLsizei, GLenum, ^GLvoid, GLint) -> void;
glDrawElementsIndirect : (GLenum, GLenum, ^void) -> void;
glDrawElementsInstanced : (GLenum, GLsizei, GLenum, ^void, GLsizei) -> void;
glDrawElementsInstancedBaseInstance : (GLenum, GLsizei, GLenum, ^void, GLsizei, GLuint) -> void;
glDrawElementsInstancedBaseVertex : (GLenum, GLsizei, GLenum, ^GLvoid, GLsizei, GLint) -> void;
glDrawElementsInstancedBaseVertexBaseInstance : (GLenum, GLsizei, GLenum, ^GLvoid, GLsizei, GLint, GLuint) -> void;
glDrawRangeElements : (GLenum, GLuint, GLuint, GLsizei, GLenum, ^GLvoid) -> void;
glDrawRangeElementsBaseVertex : (GLenum, GLuint, GLuint, GLsizei, GLenum, ^GLvoid, GLint) -> void;
glEnableVertexAttribArray : (GLuint) -> void;
glEnableVertexArrayAttrib : (GLuint, GLuint) -> void;
glFlushMappedBufferRange : (GLenum, GLintptr, GLsizeiptr) -> void;
glFlushMappedNamedBufferRange : (GLuint, GLintptr, GLsizei) -> void;
glGenBuffers : (GLsizei, ^GLuint) -> void;
glGetBufferParameteriv : (GLenum, GLenum, ^GLint) -> void;
glGetBufferParameteri64v : (GLenum, GLenum, ^GLint64) -> void;
glGetNamedBufferParameteriv : (GLuint, GLenum, ^GLint) -> void;
glGetNamedBufferParameteri64v : (GLuint, GLenum, ^GLint64) -> void;
glGetBufferPointerv : (GLenum, GLenum, ^^GLvoid) -> void;
glGetNamedBufferPointerv : (GLuint, GLenum, ^^void) -> void;
glGetBufferSubData : (GLenum, GLintptr, GLsizeiptr, ^GLvoid) -> void;
glGetNamedBufferSubData : (GLuint, GLintptr, GLsizei, ^void) -> void;
glGetVertexArrayIndexediv : (GLuint, GLuint, GLenum, ^GLint) -> void;
glGetVertexArrayIndexed64iv : (GLuint, GLuint, GLenum, ^GLint64) -> void;
glGetVertexArrayiv : (GLuint, GLenum, ^GLint) -> void;
glGetVertexAttribdv : (GLuint, GLenum, ^GLdouble) -> void;
glGetVertexAttribfv : (GLuint, GLenum, ^GLfloat) -> void;
glGetVertexAttribiv : (GLuint, GLenum, ^GLint) -> void;
glGetVertexAttribIiv : (GLuint, GLenum, ^GLint) -> void;
glGetVertexAttribIuiv : (GLuint, GLenum, ^GLuint) -> void;
glGetVertexAttribLdv : (GLuint, GLenum, ^GLdouble) -> void;
glGetVertexAttribPointerv : (GLuint, GLenum, ^^GLvoid) -> void;
glInvalidateBufferData : (GLuint) -> void;
glInvalidateBufferSubData : (GLuint, GLintptr, GLsizeiptr) -> void;
glIsBuffer : (GLuint) -> GLboolean;
glMapBuffer : (GLenum, GLenum) -> ^void;
glMapNamedBuffer : (GLuint, GLenum) -> ^void;
glMapBufferRange : (GLenum, GLintptr, GLsizeiptr, GLbitfield) -> ^void;
glMapNamedBufferRange : (GLuint, GLintptr, GLsizei, GLbitfield) -> ^void;
glMultiDrawArrays : (GLenum, ^GLint, ^GLsizei, GLsizei) -> void;
glMultiDrawArraysIndirect : (GLenum, ^void, GLsizei, GLsizei) -> void;
glMultiDrawElements : (GLenum, ^GLsizei, GLenum, ^^GLvoid, GLsizei) -> void;
glMultiDrawElementsBaseVertex : (GLenum, ^GLsizei, GLenum, ^^GLvoid, GLsizei, ^GLint) -> void;
glMultiDrawElementsIndirect : (GLenum, GLenum, ^void, GLsizei, GLsizei) -> void;
glPatchParameteri : (GLenum, GLint) -> void;
glPatchParameterfv : (GLenum, ^GLfloat) -> void;
glPrimitiveRestartIndex : (GLuint) -> void;
glProvokingVertex : (GLenum) -> void;
glUnmapBuffer : (GLenum) -> GLboolean;
glUnmapNamedBuffer : (GLuint) -> GLboolean;
glVertexArrayElementBuffer : (GLuint, GLuint) -> void;
glVertexAttrib1f : (GLuint, GLfloat) -> void;
glVertexAttrib1s : (GLuint, GLshort) -> void;
glVertexAttrib1d : (GLuint, GLdouble) -> void;
glVertexAttribI1i : (GLuint, GLint) -> void;
glVertexAttribI1ui : (GLuint, GLuint) -> void;
glVertexAttrib2f : (GLuint, GLfloat, GLfloat) -> void;
glVertexAttrib2s : (GLuint, GLshort, GLshort) -> void;
glVertexAttrib2d : (GLuint, GLdouble, GLdouble) -> void;
glVertexAttribI2i : (GLuint, GLint, GLint) -> void;
glVertexAttribI2ui : (GLuint, GLint, GLint) -> void;
glVertexAttrib3f : (GLuint, GLfloat, GLfloat, GLfloat) -> void;
glVertexAttrib3s : (GLuint, GLshort, GLshort, GLshort) -> void;
glVertexAttrib3d : (GLuint, GLdouble, GLdouble, GLdouble) -> void;
glVertexAttribI3i : (GLuint, GLint, GLint, GLint) -> void;
glVertexAttribI3ui : (GLuint, GLuint, GLuint, GLuint) -> void;
glVertexAttrib4f : (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
glVertexAttrib4s : (GLuint, GLshort, GLshort, GLshort, GLshort) -> void;
glVertexAttrib4d : (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> void;
glVertexAttrib4Nub : (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) -> void;
glVertexAttribI4i : (GLuint, GLint, GLint, GLint, GLint) -> void;
glVertexAttribI4ui : (GLuint, GLuint, GLuint, GLuint, GLuint) -> void;
glVertexAttribL1d : (GLuint, GLdouble) -> void;
glVertexAttribL2d : (GLuint, GLdouble, GLdouble) -> void;
glVertexAttribL3d : (GLuint, GLdouble, GLdouble, GLdouble) -> void;
glVertexAttribL4d : (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> void;
glVertexAttrib1fv : (GLuint, ^GLfloat) -> void;
glVertexAttrib1sv : (GLuint, ^GLshort) -> void;
glVertexAttrib1dv : (GLuint, ^GLdouble) -> void;
glVertexAttribI1iv : (GLuint, ^GLint) -> void;
glVertexAttribI1uiv : (GLuint, ^GLuint) -> void;
glVertexAttrib2fv : (GLuint, ^GLfloat) -> void;
glVertexAttrib2sv : (GLuint, ^GLshort) -> void;
glVertexAttrib2dv : (GLuint, ^GLdouble) -> void;
glVertexAttribI2iv : (GLuint, ^GLint) -> void;
glVertexAttribI2uiv : (GLuint, ^GLuint) -> void;
glVertexAttrib3fv : (GLuint, ^GLfloat) -> void;
glVertexAttrib3sv : (GLuint, ^GLshort) -> void;
glVertexAttrib3dv : (GLuint, ^GLdouble) -> void;
glVertexAttribI3iv : (GLuint, ^GLint) -> void;
glVertexAttribI3uiv : (GLuint, ^GLuint) -> void;
glVertexAttrib4fv : (GLuint, ^GLfloat) -> void;
glVertexAttrib4sv : (GLuint, ^GLshort) -> void;
glVertexAttrib4dv : (GLuint, ^GLdouble) -> void;
glVertexAttrib4iv : (GLuint, ^GLint) -> void;
glVertexAttrib4bv : (GLuint, ^GLbyte) -> void;
glVertexAttrib4ubv : (GLuint, ^GLubyte) -> void;
glVertexAttrib4usv : (GLuint, ^GLushort) -> void;
glVertexAttrib4uiv : (GLuint, ^GLuint) -> void;
glVertexAttrib4Nbv : (GLuint, ^GLbyte) -> void;
glVertexAttrib4Nsv : (GLuint, ^GLshort) -> void;
glVertexAttrib4Niv : (GLuint, ^GLint) -> void;
glVertexAttrib4Nubv : (GLuint, ^GLubyte) -> void;
glVertexAttrib4Nusv : (GLuint, ^GLushort) -> void;
glVertexAttrib4Nuiv : (GLuint, ^GLuint) -> void;
glVertexAttribI4bv : (GLuint, ^GLbyte) -> void;
glVertexAttribI4ubv : (GLuint, ^GLubyte) -> void;
glVertexAttribI4sv : (GLuint, ^GLshort) -> void;
glVertexAttribI4usv : (GLuint, ^GLushort) -> void;
glVertexAttribI4iv : (GLuint, ^GLint) -> void;
glVertexAttribI4uiv : (GLuint, ^GLuint) -> void;
glVertexAttribL1dv : (GLuint, ^GLdouble) -> void;
glVertexAttribL2dv : (GLuint, ^GLdouble) -> void;
glVertexAttribL3dv : (GLuint, ^GLdouble) -> void;
glVertexAttribL4dv : (GLuint, ^GLdouble) -> void;
glVertexAttribP1ui : (GLuint, GLenum, GLboolean, GLuint) -> void;
glVertexAttribP2ui : (GLuint, GLenum, GLboolean, GLuint) -> void;
glVertexAttribP3ui : (GLuint, GLenum, GLboolean, GLuint) -> void;
glVertexAttribP4ui : (GLuint, GLenum, GLboolean, GLuint) -> void;
glVertexAttribBinding : (GLuint, GLuint) -> void;
glVertexArrayAttribBinding : (GLuint, GLuint, GLuint) -> void;
glVertexAttribDivisor : (GLuint, GLuint) -> void;
glVertexAttribFormat : (GLuint, GLint, GLenum, GLboolean, GLuint) -> void;
glVertexAttribIFormat : (GLuint, GLint, GLenum, GLuint) -> void;
glVertexAttribLFormat : (GLuint, GLint, GLenum, GLuint) -> void;
glVertexArrayAttribFormat : (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) -> void;
glVertexArrayAttribIFormat : (GLuint, GLuint, GLint, GLenum, GLuint) -> void;
glVertexArrayAttribLFormat : (GLuint, GLuint, GLint, GLenum, GLuint) -> void;
glVertexAttribPointer : (GLuint, GLint, GLenum, GLboolean, GLsizei, ^GLvoid) -> void;
glVertexAttribIPointer : (GLuint, GLint, GLenum, GLsizei, ^GLvoid) -> void;
glVertexAttribLPointer : (GLuint, GLint, GLenum, GLsizei, ^GLvoid) -> void;
glVertexBindingDivisor : (GLuint, GLuint) -> void;
glVertexArrayBindingDivisor : (GLuint, GLuint, GLuint) -> void;

hogl_init_extensions :: () -> s32 {
    glClearBufferiv = [(GLenum, GLint, ^GLint) -> void]glXGetProcAddress("glClearBufferiv".data);
    glClearBufferuiv = [(GLenum, GLint, ^GLuint) -> void]glXGetProcAddress("glClearBufferuiv".data);
    glClearBufferfv = [(GLenum, GLint, ^GLfloat) -> void]glXGetProcAddress("glClearBufferfv".data);
    glClearBufferfi = [(GLenum, GLint, GLfloat, GLint) -> void]glXGetProcAddress("glClearBufferfi".data);
    glClearNamedFramebufferiv = [(GLuint, GLenum, GLint, ^GLint) -> void]glXGetProcAddress("glClearNamedFramebufferiv".data);
    glClearNamedFramebufferuiv = [(GLuint, GLuint, GLint, ^GLuint) -> void]glXGetProcAddress("glClearNamedFramebufferuiv".data);
    glClearNamedFramebufferfv = [(GLuint, GLuint, GLint, ^GLfloat) -> void]glXGetProcAddress("glClearNamedFramebufferfv".data);
    glClearNamedFramebufferfi = [(GLuint, GLuint, GLint, GLfloat, GLint) -> void]glXGetProcAddress("glClearNamedFramebufferfi".data);
    glNamedFramebufferReadBuffer = [(GLuint, GLenum) -> void]glXGetProcAddress("glNamedFramebufferReadBuffer".data);
    glReadnPixels = [(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ^void) -> void]glXGetProcAddress("glReadnPixels".data);
    glClearDepth = [(GLdouble) -> void]glXGetProcAddress("glClearDepth".data);
    glClearStencil = [(GLint) -> void]glXGetProcAddress("glClearStencil".data);
    glDrawBuffer = [(GLenum) -> void]glXGetProcAddress("glDrawBuffer".data);
    glFinish = [() -> void]glXGetProcAddress("glFinish".data);
    glFlush = [() -> void]glXGetProcAddress("glFlush".data);
    glReadBuffer = [(GLenum) -> void]glXGetProcAddress("glReadBuffer".data);
    glReadPixels = [(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ^GLvoid) -> void]glXGetProcAddress("glReadPixels".data);

    glActiveTexture = [(GLenum) -> void]glXGetProcAddress("glActiveTexture".data);
    glBindImageTexture = [(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) -> void]glXGetProcAddress("glBindImageTexture".data);
    glBindImageTextures = [(GLuint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glBindImageTextures".data);
    glBindTexture = [(GLenum, GLuint) -> void]glXGetProcAddress("glBindTexture".data);
    glBindTextureUnit = [(GLuint, GLuint) -> void]glXGetProcAddress("glBindTextureUnit".data);
    glBindTextures = [(GLuint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glBindTextures".data);
    glClearTexImage = [(GLuint, GLint, GLenum, GLenum, ^void) -> void]glXGetProcAddress("glClearTexImage".data);
    glClearTexSubImage = [(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ^void) -> void]glXGetProcAddress("glClearTexSubImage".data);
    glCompressedTexImage1D = [(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ^GLvoid) -> void]glXGetProcAddress("glCompressedTexImage1D".data);
    glCompressedTexImage2D = [(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ^GLvoid) -> void]glXGetProcAddress("glCompressedTexImage2D".data);
    glCompressedTexImage3D = [(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ^GLvoid) -> void]glXGetProcAddress("glCompressedTexImage3D".data);
    glCompressedTexSubImage1D = [(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ^GLvoid) -> void]glXGetProcAddress("glCompressedTexSubImage1D".data);
    glCompressedTextureSubImage1D = [(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ^void) -> void]glXGetProcAddress("glCompressedTextureSubImage1D".data);
    glCompressedTexSubImage2D = [(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ^GLvoid) -> void]glXGetProcAddress("glCompressedTexSubImage2D".data);
    glCompressedTextureSubImage2D = [(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ^void) -> void]glXGetProcAddress("glCompressedTextureSubImage2D".data);
    glCompressedTexSubImage3D = [(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ^GLvoid) -> void]glXGetProcAddress("glCompressedTexSubImage3D".data);
    glCompressedTextureSubImage3D = [(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ^void) -> void]glXGetProcAddress("glCompressedTextureSubImage3D".data);
    glCopyTextureSubImage1D = [(GLuint, GLint, GLint, GLint, GLint, GLsizei) -> void]glXGetProcAddress("glCopyTextureSubImage1D".data);
    glCopyTextureSubImage2D = [(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void]glXGetProcAddress("glCopyTextureSubImage2D".data);
    glCopyImageSubData = [(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> void]glXGetProcAddress("glCopyImageSubData".data);
    glCopyTexImage1D = [(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) -> void]glXGetProcAddress("glCopyTexImage1D".data);
    glCopyTexImage2D = [(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) -> void]glXGetProcAddress("glCopyTexImage2D".data);
    glCopyTexSubImage1D = [(GLenum, GLint, GLint, GLint, GLint, GLsizei) -> void]glXGetProcAddress("glCopyTexSubImage1D".data);
    glCopyTexSubImage2D = [(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void]glXGetProcAddress("glCopyTexSubImage2D".data);
    glCopyTexSubImage3D = [(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void]glXGetProcAddress("glCopyTexSubImage3D".data);
    glCopyTextureSubImage3D = [(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void]glXGetProcAddress("glCopyTextureSubImage3D".data);
    glCreateTextures = [(GLenum, GLsizei, ^GLuint) -> void]glXGetProcAddress("glCreateTextures".data);
    glDeleteTextures = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glDeleteTextures".data);
    glGenTextures = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glGenTextures".data);
    glGetCompressedTexImage = [(GLenum, GLint, ^GLvoid) -> void]glXGetProcAddress("glGetCompressedTexImage".data);
    glGetnCompressedTexImage = [(GLenum, GLint, GLsizei, ^void) -> void]glXGetProcAddress("glGetnCompressedTexImage".data);
    glGetCompressedTextureImage = [(GLuint, GLint, GLsizei, ^void) -> void]glXGetProcAddress("glGetCompressedTextureImage".data);
    glGetCompressedTextureSubImage = [(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ^void) -> void]glXGetProcAddress("glGetCompressedTextureSubImage".data);
    glGetTexImage = [(GLenum, GLint, GLenum, GLenum, ^GLvoid) -> void]glXGetProcAddress("glGetTexImage".data);
    glGetnTexImage = [(GLenum, GLint, GLenum, GLenum, GLsizei, ^void) -> void]glXGetProcAddress("glGetnTexImage".data);
    glGetTextureImage = [(GLuint, GLint, GLenum, GLenum, GLsizei, ^void) -> void]glXGetProcAddress("glGetTextureImage".data);
    glGetTexLevelParameterfv = [(GLenum, GLint, GLenum, ^GLfloat) -> void]glXGetProcAddress("glGetTexLevelParameterfv".data);
    glGetTexLevelParameteriv = [(GLenum, GLint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetTexLevelParameteriv".data);
    glGetTextureLevelParameterfv = [(GLuint, GLint, GLenum, ^GLfloat) -> void]glXGetProcAddress("glGetTextureLevelParameterfv".data);
    glGetTextureLevelParameteriv = [(GLuint, GLint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetTextureLevelParameteriv".data);
    glGetTexParameterfv = [(GLenum, GLint, GLenum, ^GLfloat) -> void]glXGetProcAddress("glGetTexParameterfv".data);
    glGetTexParameteriv = [(GLenum, GLint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetTexParameteriv".data);
    glGetTexParameterIiv = [(GLenum, GLenum, ^GLint) -> void]glXGetProcAddress("glGetTexParameterIiv".data);
    glGetTexParameterIuiv = [(GLenum, GLenum, ^GLuint) -> void]glXGetProcAddress("glGetTexParameterIuiv".data);
    glGetTextureParameterfv = [(GLuint, GLenum, ^GLfloat) -> void]glXGetProcAddress("glGetTextureParameterfv".data);
    glGetTextureParameteriv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetTextureParameteriv".data);
    glGetTextureParameterIiv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetTextureParameterIiv".data);
    glGetTextureParameterIuiv = [(GLuint, GLenum, ^GLuint) -> void]glXGetProcAddress("glGetTextureParameterIuiv".data);
    glGetTextureSubImage = [(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ^void) -> void]glXGetProcAddress("glGetTextureSubImage".data);
    glInvalidateTexImage = [(GLuint, GLint) -> void]glXGetProcAddress("glInvalidateTexImage".data);
    glInvalidateTexSubImage = [(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> void]glXGetProcAddress("glInvalidateTexSubImage".data);
    glIsTexture = [(GLuint) -> GLboolean]glXGetProcAddress("glIsTexture".data);
    glTexBuffer = [(GLenum, GLenum, GLuint) -> void]glXGetProcAddress("glTexBuffer".data);
    glTextureBuffer = [(GLuint, GLenum, GLuint) -> void]glXGetProcAddress("glTextureBuffer".data);
    glTexBufferRange = [(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) -> void]glXGetProcAddress("glTexBufferRange".data);
    glTextureBufferRange = [(GLenum, GLenum, GLuint, GLintptr, GLsizei) -> void]glXGetProcAddress("glTextureBufferRange".data);
    glTexImage1D = [(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ^GLvoid) -> void]glXGetProcAddress("glTexImage1D".data);
    glTexImage2D = [(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ^GLvoid) -> void]glXGetProcAddress("glTexImage2D".data);
    glTexImage2DMultisample = [(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> void]glXGetProcAddress("glTexImage2DMultisample".data);
    glTexImage3D = [(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ^GLvoid) -> void]glXGetProcAddress("glTexImage3D".data);
    glTexImage3DMultisample = [(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> void]glXGetProcAddress("glTexImage3DMultisample".data);
    glTexParameterf = [(GLenum, GLenum, GLfloat) -> void]glXGetProcAddress("glTexParameterf".data);
    glTexParameteri = [(GLenum, GLenum, GLint) -> void]glXGetProcAddress("glTexParameteri".data);
    glTextureParameterf = [(GLenum, GLenum, GLfloat) -> void]glXGetProcAddress("glTextureParameterf".data);
    glTextureParameteri = [(GLenum, GLenum, GLint) -> void]glXGetProcAddress("glTextureParameteri".data);
    glTexParameterfv = [(GLenum, GLenum, ^GLfloat) -> void]glXGetProcAddress("glTexParameterfv".data);
    glTexParameteriv = [(GLenum, GLenum, ^GLint) -> void]glXGetProcAddress("glTexParameteriv".data);
    glTexParameterIiv = [(GLenum, GLenum, ^GLint) -> void]glXGetProcAddress("glTexParameterIiv".data);
    glTexParameterIuiv = [(GLenum, GLenum, ^GLuint) -> void]glXGetProcAddress("glTexParameterIuiv".data);
    glTextureParameterfv = [(GLuint, GLenum, ^GLfloat) -> void]glXGetProcAddress("glTextureParameterfv".data);
    glTextureParameteriv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glTextureParameteriv".data);
    glTextureParameterIiv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glTextureParameterIiv".data);
    glTextureParameterIuiv = [(GLuint, GLenum, ^GLuint) -> void]glXGetProcAddress("glTextureParameterIuiv".data);
    glTexStorage1D = [(GLenum, GLsizei, GLenum, GLsizei) -> void]glXGetProcAddress("glTexStorage1D".data);
    glTextureStorage1D = [(GLuint, GLsizei, GLenum, GLsizei) -> void]glXGetProcAddress("glTextureStorage1D".data);
    glTexStorage2D = [(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> void]glXGetProcAddress("glTexStorage2D".data);
    glTextureStorage2D = [(GLuint, GLsizei, GLenum, GLsizei, GLsizei) -> void]glXGetProcAddress("glTextureStorage2D".data);
    glTexStorage2DMultisample = [(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> void]glXGetProcAddress("glTexStorage2DMultisample".data);
    glTextureStorage2DMultisample = [(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> void]glXGetProcAddress("glTextureStorage2DMultisample".data);
    glTexStorage3D = [(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> void]glXGetProcAddress("glTexStorage3D".data);
    glTextureStorage3D = [(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> void]glXGetProcAddress("glTextureStorage3D".data);
    glTexStorage3DMultisample = [(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> void]glXGetProcAddress("glTexStorage3DMultisample".data);
    glTextureStorage3DMultisample = [(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> void]glXGetProcAddress("glTextureStorage3DMultisample".data);
    glTexSubImage1D = [(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ^GLvoid) -> void]glXGetProcAddress("glTexSubImage1D".data);
    glTextureSubImage1D = [(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ^void) -> void]glXGetProcAddress("glTextureSubImage1D".data);
    glTexSubImage2D = [(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ^GLvoid) -> void]glXGetProcAddress("glTexSubImage2D".data);
    glTextureSubImage2D = [(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ^void) -> void]glXGetProcAddress("glTextureSubImage2D".data);
    glTexSubImage3D = [(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ^GLvoid) -> void]glXGetProcAddress("glTexSubImage3D".data);
    glTextureSubImage3D = [(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ^void) -> void]glXGetProcAddress("glTextureSubImage3D".data);
    glTextureView = [(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) -> void]glXGetProcAddress("glTextureView".data);

    glBindFramebuffer = [(GLenum, GLuint) -> void]glXGetProcAddress("glBindFramebuffer".data);
    glBindRenderbuffer = [(GLenum, GLuint) -> void]glXGetProcAddress("glBindRenderbuffer".data);
    glBlitFramebuffer = [(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> void]glXGetProcAddress("glBlitFramebuffer".data);
    glBlitNamedFramebuffer = [(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> void]glXGetProcAddress("glBlitNamedFramebuffer".data);
    glCheckFramebufferStatus = [(GLenum) -> GLenum]glXGetProcAddress("glCheckFramebufferStatus".data);
    glCheckNamedFramebufferStatus = [(GLuint, GLenum) -> GLenum]glXGetProcAddress("glCheckNamedFramebufferStatus".data);
    glCreateFramebuffers = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glCreateFramebuffers".data);
    glCreateRenderbuffers = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glCreateRenderbuffers".data);
    glDeleteFramebuffers = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glDeleteFramebuffers".data);
    glDeleteRenderbuffers = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glDeleteRenderbuffers".data);
    glDrawBuffers = [(GLsizei, ^GLenum) -> void]glXGetProcAddress("glDrawBuffers".data);
    glNamedFramebufferDrawBuffers = [(GLuint, GLsizei, ^GLenum) -> void]glXGetProcAddress("glNamedFramebufferDrawBuffers".data);
    glFramebufferParameteri = [(GLenum, GLenum, GLint) -> void]glXGetProcAddress("glFramebufferParameteri".data);
    glNamedFramebufferParameteri = [(GLuint, GLenum, GLint) -> void]glXGetProcAddress("glNamedFramebufferParameteri".data);
    glFramebufferRenderbuffer = [(GLenum, GLenum, GLenum, GLuint) -> void]glXGetProcAddress("glFramebufferRenderbuffer".data);
    glNamedFramebufferRenderbuffer = [(GLuint, GLenum, GLenum, GLuint) -> void]glXGetProcAddress("glNamedFramebufferRenderbuffer".data);
    glFramebufferTexture = [(GLenum, GLenum, GLuint, GLint) -> void]glXGetProcAddress("glFramebufferTexture".data);
    glFramebufferTexture1D = [(GLenum, GLenum, GLenum, GLuint, GLint) -> void]glXGetProcAddress("glFramebufferTexture1D".data);
    glFramebufferTexture2D = [(GLenum, GLenum, GLenum, GLuint, GLint) -> void]glXGetProcAddress("glFramebufferTexture2D".data);
    glFramebufferTexture3D = [(GLenum, GLenum, GLenum, GLuint, GLint, GLint) -> void]glXGetProcAddress("glFramebufferTexture3D".data);
    glNamedFramebufferTexture = [(GLuint, GLenum, GLuint, GLint) -> void]glXGetProcAddress("glNamedFramebufferTexture".data);
    glFramebufferTextureLayer = [(GLenum, GLenum, GLuint, GLint, GLint) -> void]glXGetProcAddress("glFramebufferTextureLayer".data);
    glNamedFramebufferTextureLayer = [(GLuint, GLenum, GLuint, GLint, GLint) -> void]glXGetProcAddress("glNamedFramebufferTextureLayer".data);
    glGenFramebuffers = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glGenFramebuffers".data);
    glGenRenderbuffers = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glGenRenderbuffers".data);
    glGenerateMipmap = [(GLenum) -> void]glXGetProcAddress("glGenerateMipmap".data);
    glGenerateTextureMipmap = [(GLuint) -> void]glXGetProcAddress("glGenerateTextureMipmap".data);
    glGetFramebufferAttachmentParameteriv = [(GLenum, GLenum, GLenum, ^GLint) -> void]glXGetProcAddress("glGetFramebufferAttachmentParameteriv".data);
    glGetNamedFramebufferAttachmentParameteriv = [(GLuint, GLenum, GLenum, ^GLint) -> void]glXGetProcAddress("glGetNamedFramebufferAttachmentParameteriv".data);
    glGetFramebufferParameteriv = [(GLenum, GLenum, ^GLint) -> void]glXGetProcAddress("glGetFramebufferParameteriv".data);
    glGetNamedFramebufferParameteriv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetNamedFramebufferParameteriv".data);
    glGetRenderbufferParameteriv = [(GLenum, GLenum, ^GLint) -> void]glXGetProcAddress("glGetRenderbufferParameteriv".data);
    glGetNamedRenderbufferParameteriv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetNamedRenderbufferParameteriv".data);
    glInvalidateFramebuffer = [(GLenum, GLsizei, ^GLenum) -> void]glXGetProcAddress("glInvalidateFramebuffer".data);
    glInvalidateNamedFramebufferData = [(GLuint, GLsizei, ^GLenum) -> void]glXGetProcAddress("glInvalidateNamedFramebufferData".data);
    glInvalidateSubFramebuffer = [(GLenum, GLsizei, ^GLenum, GLint, GLint, GLint, GLint) -> void]glXGetProcAddress("glInvalidateSubFramebuffer".data);
    glInvalidateNamedFramebufferSubData = [(GLuint, GLsizei, ^GLenum, GLint, GLint, GLsizei, GLsizei) -> void]glXGetProcAddress("glInvalidateNamedFramebufferSubData".data);
    glIsFramebuffer = [(GLuint) -> GLboolean]glXGetProcAddress("glIsFramebuffer".data);
    glIsRenderbuffer = [(GLuint) -> GLboolean]glXGetProcAddress("glIsRenderbuffer".data);
    glRenderbufferStorage = [(GLenum, GLenum, GLsizei, GLsizei) -> void]glXGetProcAddress("glRenderbufferStorage".data);
    glNamedRenderbufferStorage = [(GLuint, GLenum, GLsizei, GLsizei) -> void]glXGetProcAddress("glNamedRenderbufferStorage".data);
    glRenderbufferStorageMultisample = [(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> void]glXGetProcAddress("glRenderbufferStorageMultisample".data);
    glNamedRenderbufferStorageMultisample = [(GLuint, GLsizei, GLenum, GLsizei, GLsizei) -> void]glXGetProcAddress("glNamedRenderbufferStorageMultisample".data);
    glSampleMaski = [(GLuint, GLbitfield) -> void]glXGetProcAddress("glSampleMaski".data);

    glAttachShader = [(GLuint, GLuint) -> void]glXGetProcAddress("glAttachShader".data);
    glBindAttribLocation = [(GLuint, GLuint, ^GLchar) -> void]glXGetProcAddress("glBindAttribLocation".data);
    glBindFragDataLocation = [(GLuint, GLuint, ^s8) -> void]glXGetProcAddress("glBindFragDataLocation".data);
    glBindFragDataLocationIndexed = [(GLuint, GLuint, GLuint, ^s8) -> void]glXGetProcAddress("glBindFragDataLocationIndexed".data);
    glCompileShader = [(GLuint) -> void]glXGetProcAddress("glCompileShader".data);
    glCreateProgram = [() -> GLuint]glXGetProcAddress("glCreateProgram".data);
    glCreateShader = [(GLenum) -> GLuint]glXGetProcAddress("glCreateShader".data);
    glCreateShaderProgramv = [(GLenum, GLsizei, ^^s8) -> GLuint]glXGetProcAddress("glCreateShaderProgramv".data);
    glDeleteProgram = [(GLuint) -> void]glXGetProcAddress("glDeleteProgram".data);
    glDeleteShader = [(GLuint) -> void]glXGetProcAddress("glDeleteShader".data);
    glDetachShader = [(GLuint, GLuint) -> void]glXGetProcAddress("glDetachShader".data);
    glGetActiveAtomicCounterBufferiv = [(GLuint, GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetActiveAtomicCounterBufferiv".data);
    glGetActiveAttrib = [(GLuint, GLuint, GLsizei, ^GLsizei, ^GLint, ^GLenum, ^GLchar) -> void]glXGetProcAddress("glGetActiveAttrib".data);
    glGetActiveSubroutineName = [(GLuint, GLenum, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void]glXGetProcAddress("glGetActiveSubroutineName".data);
    glGetActiveSubroutineUniformiv = [(GLuint, GLenum, GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetActiveSubroutineUniformiv".data);
    glGetActiveSubroutineUniformName = [(GLuint, GLenum, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void]glXGetProcAddress("glGetActiveSubroutineUniformName".data);
    glGetActiveUniform = [(GLuint, GLuint, GLsizei, ^GLsizei, ^GLint, ^GLenum, ^GLchar) -> void]glXGetProcAddress("glGetActiveUniform".data);
    glGetActiveUniformBlockiv = [(GLuint, GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetActiveUniformBlockiv".data);
    glGetActiveUniformBlockName = [(GLuint, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void]glXGetProcAddress("glGetActiveUniformBlockName".data);
    glGetActiveUniformName = [(GLuint, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void]glXGetProcAddress("glGetActiveUniformName".data);
    glGetActiveUniformsiv = [(GLuint, GLsizei, ^GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetActiveUniformsiv".data);
    glGetAttachedShaders = [(GLuint, GLsizei, ^GLsizei, ^GLuint) -> void]glXGetProcAddress("glGetAttachedShaders".data);
    glGetAttribLocation = [(GLuint, ^GLchar) -> GLint]glXGetProcAddress("glGetAttribLocation".data);
    glGetFragDataIndex = [(GLuint, ^s8) -> GLint]glXGetProcAddress("glGetFragDataIndex".data);
    glGetFragDataLocation = [(GLuint, ^s8) -> GLint]glXGetProcAddress("glGetFragDataLocation".data);
    glGetProgramiv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetProgramiv".data);
    glGetProgramBinary = [(GLuint, GLsizei, ^GLsizei, ^GLenum, ^void) -> void]glXGetProcAddress("glGetProgramBinary".data);
    glGetProgramInfoLog = [(GLuint, GLsizei, ^GLsizei, ^GLchar) -> void]glXGetProcAddress("glGetProgramInfoLog".data);
    glGetProgramResourceiv = [(GLuint, GLenum, GLuint, GLsizei, ^GLenum, GLsizei, ^GLsizei, ^GLint) -> void]glXGetProcAddress("glGetProgramResourceiv".data);
    glGetProgramResourceIndex = [(GLuint, GLenum, ^s8) -> GLuint]glXGetProcAddress("glGetProgramResourceIndex".data);
    glGetProgramResourceLocation = [(GLuint, GLenum, ^s8) -> GLint]glXGetProcAddress("glGetProgramResourceLocation".data);
    glGetProgramResourceLocationIndex = [(GLuint, GLenum, ^s8) -> GLint]glXGetProcAddress("glGetProgramResourceLocationIndex".data);
    glGetProgramResourceName = [(GLuint, GLenum, GLuint, GLsizei, ^GLsizei, ^s8) -> void]glXGetProcAddress("glGetProgramResourceName".data);
    glGetProgramStageiv = [(GLuint, GLenum, GLenum, ^GLint) -> void]glXGetProcAddress("glGetProgramStageiv".data);
    glGetShaderiv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetShaderiv".data);
    glGetShaderInfoLog = [(GLuint, GLsizei, ^GLsizei, ^GLchar) -> void]glXGetProcAddress("glGetShaderInfoLog".data);
    glGetShaderPrecisionFormat = [(GLenum, GLenum, ^GLint, ^GLint) -> void]glXGetProcAddress("glGetShaderPrecisionFormat".data);
    glGetShaderSource = [(GLuint, GLsizei, ^GLsizei, ^GLchar) -> void]glXGetProcAddress("glGetShaderSource".data);
    glGetSubroutineIndex = [(GLuint, GLenum, ^GLchar) -> GLuint]glXGetProcAddress("glGetSubroutineIndex".data);
    glGetSubroutineUniformLocation = [(GLuint, GLenum, ^GLchar) -> GLint]glXGetProcAddress("glGetSubroutineUniformLocation".data);
    glGetUniformfv = [(GLuint, GLint, ^GLfloat) -> void]glXGetProcAddress("glGetUniformfv".data);
    glGetUniformiv = [(GLuint, GLint, ^GLint) -> void]glXGetProcAddress("glGetUniformiv".data);
    glGetUniformuiv = [(GLuint, GLint, ^GLuint) -> void]glXGetProcAddress("glGetUniformuiv".data);
    glGetUniformdv = [(GLuint, GLint, ^GLdouble) -> void]glXGetProcAddress("glGetUniformdv".data);
    glGetnUniformfv = [(GLuint, GLint, GLsizei, ^GLfloat) -> void]glXGetProcAddress("glGetnUniformfv".data);
    glGetnUniformiv = [(GLuint, GLint, GLsizei, ^GLint) -> void]glXGetProcAddress("glGetnUniformiv".data);
    glGetnUniformuiv = [(GLuint, GLint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glGetnUniformuiv".data);
    glGetnUniformdv = [(GLuint, GLint, GLsizei, ^GLdouble) -> void]glXGetProcAddress("glGetnUniformdv".data);
    glGetUniformBlockIndex = [(GLuint, ^GLchar) -> GLuint]glXGetProcAddress("glGetUniformBlockIndex".data);
    glGetUniformIndices = [(GLuint, GLsizei, ^^GLchar, ^GLuint) -> void]glXGetProcAddress("glGetUniformIndices".data);
    glGetUniformLocation = [(GLuint, ^GLchar) -> GLint]glXGetProcAddress("glGetUniformLocation".data);
    glGetUniformSubroutineuiv = [(GLenum, GLint, ^GLuint) -> void]glXGetProcAddress("glGetUniformSubroutineuiv".data);
    glIsProgram = [(GLuint) -> GLboolean]glXGetProcAddress("glIsProgram".data);
    glIsShader = [(GLuint) -> GLboolean]glXGetProcAddress("glIsShader".data);
    glLinkProgram = [(GLuint) -> void]glXGetProcAddress("glLinkProgram".data);
    glMinSampleShading = [(GLfloat) -> void]glXGetProcAddress("glMinSampleShading".data);
    glProgramBinary = [(GLuint, GLenum, ^void, GLsizei) -> void]glXGetProcAddress("glProgramBinary".data);
    glProgramParameteri = [(GLuint, GLenum, GLint) -> void]glXGetProcAddress("glProgramParameteri".data);
    glProgramUniform1f = [(GLuint, GLint, GLfloat) -> void]glXGetProcAddress("glProgramUniform1f".data);
    glProgramUniform2f = [(GLuint, GLint, GLfloat, GLfloat) -> void]glXGetProcAddress("glProgramUniform2f".data);
    glProgramUniform3f = [(GLuint, GLint, GLfloat, GLfloat, GLfloat) -> void]glXGetProcAddress("glProgramUniform3f".data);
    glProgramUniform4f = [(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> void]glXGetProcAddress("glProgramUniform4f".data);
    glProgramUniform1i = [(GLuint, GLint, GLint) -> void]glXGetProcAddress("glProgramUniform1i".data);
    glProgramUniform2i = [(GLuint, GLint, GLint, GLint) -> void]glXGetProcAddress("glProgramUniform2i".data);
    glProgramUniform3i = [(GLuint, GLint, GLint, GLint, GLint) -> void]glXGetProcAddress("glProgramUniform3i".data);
    glProgramUniform4i = [(GLuint, GLint, GLint, GLint, GLint, GLint) -> void]glXGetProcAddress("glProgramUniform4i".data);
    glProgramUniform1ui = [(GLuint, GLint, GLuint) -> void]glXGetProcAddress("glProgramUniform1ui".data);
    glProgramUniform2ui = [(GLuint, GLint, GLint, GLuint) -> void]glXGetProcAddress("glProgramUniform2ui".data);
    glProgramUniform3ui = [(GLuint, GLint, GLint, GLint, GLuint) -> void]glXGetProcAddress("glProgramUniform3ui".data);
    glProgramUniform4ui = [(GLuint, GLint, GLint, GLint, GLint, GLuint) -> void]glXGetProcAddress("glProgramUniform4ui".data);
    glProgramUniform1fv = [(GLuint, GLint, GLsizei, ^GLfloat) -> void]glXGetProcAddress("glProgramUniform1fv".data);
    glProgramUniform2fv = [(GLuint, GLint, GLsizei, ^GLfloat) -> void]glXGetProcAddress("glProgramUniform2fv".data);
    glProgramUniform3fv = [(GLuint, GLint, GLsizei, ^GLfloat) -> void]glXGetProcAddress("glProgramUniform3fv".data);
    glProgramUniform4fv = [(GLuint, GLint, GLsizei, ^GLfloat) -> void]glXGetProcAddress("glProgramUniform4fv".data);
    glProgramUniform1iv = [(GLuint, GLint, GLsizei, ^GLint) -> void]glXGetProcAddress("glProgramUniform1iv".data);
    glProgramUniform2iv = [(GLuint, GLint, GLsizei, ^GLint) -> void]glXGetProcAddress("glProgramUniform2iv".data);
    glProgramUniform3iv = [(GLuint, GLint, GLsizei, ^GLint) -> void]glXGetProcAddress("glProgramUniform3iv".data);
    glProgramUniform4iv = [(GLuint, GLint, GLsizei, ^GLint) -> void]glXGetProcAddress("glProgramUniform4iv".data);
    glProgramUniform1uiv = [(GLuint, GLint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glProgramUniform1uiv".data);
    glProgramUniform2uiv = [(GLuint, GLint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glProgramUniform2uiv".data);
    glProgramUniform3uiv = [(GLuint, GLint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glProgramUniform3uiv".data);
    glProgramUniform4uiv = [(GLuint, GLint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glProgramUniform4uiv".data);
    glProgramUniformMatrix2fv = [(GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glProgramUniformMatrix2fv".data);
    glProgramUniformMatrix3fv = [(GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glProgramUniformMatrix3fv".data);
    glProgramUniformMatrix4fv = [(GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glProgramUniformMatrix4fv".data);
    glProgramUniformMatrix2x3fv = [(GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glProgramUniformMatrix2x3fv".data);
    glProgramUniformMatrix3x2fv = [(GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glProgramUniformMatrix3x2fv".data);
    glProgramUniformMatrix2x4fv = [(GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glProgramUniformMatrix2x4fv".data);
    glProgramUniformMatrix4x2fv = [(GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glProgramUniformMatrix4x2fv".data);
    glProgramUniformMatrix3x4fv = [(GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glProgramUniformMatrix3x4fv".data);
    glProgramUniformMatrix4x3fv = [(GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glProgramUniformMatrix4x3fv".data);
    glReleaseShaderCompiler = [() -> void]glXGetProcAddress("glReleaseShaderCompiler".data);
    glShaderBinary = [(GLsizei, ^GLuint, GLenum, ^void, GLsizei) -> void]glXGetProcAddress("glShaderBinary".data);
    glShaderSource = [(GLuint, GLsizei, ^^GLchar, ^GLint) -> void]glXGetProcAddress("glShaderSource".data);
    glShaderStorageBlockBinding = [(GLuint, GLuint, GLuint) -> void]glXGetProcAddress("glShaderStorageBlockBinding".data);
    glUniform1f = [(GLint, GLfloat) -> void]glXGetProcAddress("glUniform1f".data);
    glUniform2f = [(GLint, GLfloat, GLfloat) -> void]glXGetProcAddress("glUniform2f".data);
    glUniform3f = [(GLint, GLfloat, GLfloat, GLfloat) -> void]glXGetProcAddress("glUniform3f".data);
    glUniform4f = [(GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> void]glXGetProcAddress("glUniform4f".data);
    glUniform1i = [(GLint, GLint) -> void]glXGetProcAddress("glUniform1i".data);
    glUniform2i = [(GLint, GLint, GLint) -> void]glXGetProcAddress("glUniform2i".data);
    glUniform3i = [(GLint, GLint, GLint, GLint) -> void]glXGetProcAddress("glUniform3i".data);
    glUniform4i = [(GLint, GLint, GLint, GLint, GLint) -> void]glXGetProcAddress("glUniform4i".data);
    glUniform1ui = [(GLint, GLuint) -> void]glXGetProcAddress("glUniform1ui".data);
    glUniform2ui = [(GLint, GLuint, GLuint) -> void]glXGetProcAddress("glUniform2ui".data);
    glUniform3ui = [(GLint, GLuint, GLuint, GLuint) -> void]glXGetProcAddress("glUniform3ui".data);
    glUniform4ui = [(GLint, GLuint, GLuint, GLuint, GLuint) -> void]glXGetProcAddress("glUniform4ui".data);
    glUniform1fv = [(GLint, GLsizei, ^GLfloat) -> void]glXGetProcAddress("glUniform1fv".data);
    glUniform2fv = [(GLint, GLsizei, ^GLfloat) -> void]glXGetProcAddress("glUniform2fv".data);
    glUniform3fv = [(GLint, GLsizei, ^GLfloat) -> void]glXGetProcAddress("glUniform3fv".data);
    glUniform4fv = [(GLint, GLsizei, ^GLfloat) -> void]glXGetProcAddress("glUniform4fv".data);
    glUniform1iv = [(GLint, GLsizei, ^GLint) -> void]glXGetProcAddress("glUniform1iv".data);
    glUniform2iv = [(GLint, GLsizei, ^GLint) -> void]glXGetProcAddress("glUniform2iv".data);
    glUniform3iv = [(GLint, GLsizei, ^GLint) -> void]glXGetProcAddress("glUniform3iv".data);
    glUniform4iv = [(GLint, GLsizei, ^GLint) -> void]glXGetProcAddress("glUniform4iv".data);
    glUniform1uiv = [(GLint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glUniform1uiv".data);
    glUniform2uiv = [(GLint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glUniform2uiv".data);
    glUniform3uiv = [(GLint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glUniform3uiv".data);
    glUniform4uiv = [(GLint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glUniform4uiv".data);
    glUniformMatrix2fv = [(GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glUniformMatrix2fv".data);
    glUniformMatrix3fv = [(GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glUniformMatrix3fv".data);
    glUniformMatrix4fv = [(GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glUniformMatrix4fv".data);
    glUniformMatrix2x3fv = [(GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glUniformMatrix2x3fv".data);
    glUniformMatrix3x2fv = [(GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glUniformMatrix3x2fv".data);
    glUniformMatrix2x4fv = [(GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glUniformMatrix2x4fv".data);
    glUniformMatrix4x2fv = [(GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glUniformMatrix4x2fv".data);
    glUniformMatrix3x4fv = [(GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glUniformMatrix3x4fv".data);
    glUniformMatrix4x3fv = [(GLint, GLsizei, GLboolean, ^GLfloat) -> void]glXGetProcAddress("glUniformMatrix4x3fv".data);
    glUniformBlockBinding = [(GLuint, GLuint, GLuint) -> void]glXGetProcAddress("glUniformBlockBinding".data);
    glUniformSubroutinesuiv = [(GLenum, GLsizei, ^GLuint) -> void]glXGetProcAddress("glUniformSubroutinesuiv".data);
    glUseProgram = [(GLuint) -> void]glXGetProcAddress("glUseProgram".data);
    glUseProgramStages = [(GLuint, GLbitfield, GLuint) -> void]glXGetProcAddress("glUseProgramStages".data);
    glValidateProgram = [(GLuint) -> void]glXGetProcAddress("glValidateProgram".data);

    glBlendColor = [(GLfloat, GLfloat, GLfloat, GLfloat) -> void]glXGetProcAddress("glBlendColor".data);
    glBlendEquation = [(GLenum) -> void]glXGetProcAddress("glBlendEquation".data);
    glBlendEquationi = [(GLuint, GLenum) -> void]glXGetProcAddress("glBlendEquationi".data);
    glBlendEquationSeparate = [(GLenum, GLenum) -> void]glXGetProcAddress("glBlendEquationSeparate".data);
    glBlendEquationSeparatei = [(GLuint, GLenum, GLenum) -> void]glXGetProcAddress("glBlendEquationSeparatei".data);
    glBlendFunc = [(GLenum, GLenum) -> void]glXGetProcAddress("glBlendFunc".data);
    glBlendFunci = [(GLuint, GLenum, GLenum) -> void]glXGetProcAddress("glBlendFunci".data);
    glBlendFuncSeparate = [(GLenum, GLenum, GLenum, GLenum) -> void]glXGetProcAddress("glBlendFuncSeparate".data);
    glBlendFuncSeparatei = [(GLuint, GLenum, GLenum, GLenum, GLenum) -> void]glXGetProcAddress("glBlendFuncSeparatei".data);
    glClampColor = [(GLenum, GLenum) -> void]glXGetProcAddress("glClampColor".data);
    glClipControl = [(GLenum, GLenum) -> void]glXGetProcAddress("glClipControl".data);
    glColorMask = [(GLboolean, GLboolean, GLboolean, GLboolean) -> void]glXGetProcAddress("glColorMask".data);
    glColorMaski = [(GLuint, GLboolean, GLboolean, GLboolean, GLboolean) -> void]glXGetProcAddress("glColorMaski".data);
    glCullFace = [(GLenum) -> void]glXGetProcAddress("glCullFace".data);
    glDepthFunc = [(GLenum) -> void]glXGetProcAddress("glDepthFunc".data);
    glDepthMask = [(GLboolean) -> void]glXGetProcAddress("glDepthMask".data);
    glDepthRange = [(GLdouble, GLdouble) -> void]glXGetProcAddress("glDepthRange".data);
    glDepthRangef = [(GLfloat, GLfloat) -> void]glXGetProcAddress("glDepthRangef".data);
    glDepthRangeArrayv = [(GLuint, GLsizei, ^GLdouble) -> void]glXGetProcAddress("glDepthRangeArrayv".data);
    glDepthRangeIndexed = [(GLuint, GLdouble, GLdouble) -> void]glXGetProcAddress("glDepthRangeIndexed".data);
    glDisable = [(GLenum) -> void]glXGetProcAddress("glDisable".data);
    glEnablei = [(GLenum, GLuint) -> void]glXGetProcAddress("glEnablei".data);
    glDisablei = [(GLenum, GLuint) -> void]glXGetProcAddress("glDisablei".data);
    glFrontFace = [(GLenum) -> void]glXGetProcAddress("glFrontFace".data);
    glGetBooleanv = [(GLenum, ^GLboolean) -> void]glXGetProcAddress("glGetBooleanv".data);
    glGetDoublev = [(GLenum, ^GLdouble) -> void]glXGetProcAddress("glGetDoublev".data);
    glGetFloatv = [(GLenum, ^GLfloat) -> void]glXGetProcAddress("glGetFloatv".data);
    glGetIntegerv = [(GLenum, ^GLint) -> void]glXGetProcAddress("glGetIntegerv".data);
    glGetInteger64v = [(GLenum, ^GLint64) -> void]glXGetProcAddress("glGetInteger64v".data);
    glGetBooleani_v = [(GLenum, GLuint, ^GLboolean) -> void]glXGetProcAddress("glGetBooleani_v".data);
    glGetFloati_v = [(GLenum, GLuint, ^GLfloat) -> void]glXGetProcAddress("glGetFloati_v".data);
    glGetDoublei_v = [(GLenum, GLuint, ^GLdouble) -> void]glXGetProcAddress("glGetDoublei_v".data);
    glGetInteger64i_v = [(GLenum, GLuint, ^GLint64) -> void]glXGetProcAddress("glGetInteger64i_v".data);
    glGetError = [() -> GLenum]glXGetProcAddress("glGetError".data);
    glHint = [(GLenum, GLenum) -> void]glXGetProcAddress("glHint".data);
    glIsEnabled = [(GLenum) -> GLboolean]glXGetProcAddress("glIsEnabled".data);
    glIsEnabledi = [(GLenum, GLuint) -> GLboolean]glXGetProcAddress("glIsEnabledi".data);
    glLineWidth = [(GLfloat) -> void]glXGetProcAddress("glLineWidth".data);
    glLogicOp = [(GLenum) -> void]glXGetProcAddress("glLogicOp".data);
    glPixelStoref = [(GLenum, GLfloat) -> void]glXGetProcAddress("glPixelStoref".data);
    glPixelStorei = [(GLenum, GLint) -> void]glXGetProcAddress("glPixelStorei".data);
    glPointParameterf = [(GLenum, GLfloat) -> void]glXGetProcAddress("glPointParameterf".data);
    glPointParameteri = [(GLenum, GLint) -> void]glXGetProcAddress("glPointParameteri".data);
    glPointParameterfv = [(GLenum, ^GLfloat) -> void]glXGetProcAddress("glPointParameterfv".data);
    glPointParameteriv = [(GLenum, ^GLint) -> void]glXGetProcAddress("glPointParameteriv".data);
    glPointSize = [(GLfloat) -> void]glXGetProcAddress("glPointSize".data);
    glPolygonMode = [(GLenum, GLenum) -> void]glXGetProcAddress("glPolygonMode".data);
    glPolygonOffset = [(GLfloat, GLfloat) -> void]glXGetProcAddress("glPolygonOffset".data);
    glScissor = [(GLint, GLint, GLsizei, GLsizei) -> void]glXGetProcAddress("glScissor".data);
    glSampleCoverage = [(GLfloat, GLboolean) -> void]glXGetProcAddress("glSampleCoverage".data);
    glScissorArrayv = [(GLuint, GLsizei, ^GLint) -> void]glXGetProcAddress("glScissorArrayv".data);
    glScissorIndexed = [(GLuint, GLint, GLint, GLsizei, GLsizei) -> void]glXGetProcAddress("glScissorIndexed".data);
    glScissorIndexedv = [(GLuint, ^GLint) -> void]glXGetProcAddress("glScissorIndexedv".data);
    glStencilFunc = [(GLenum, GLint, GLuint) -> void]glXGetProcAddress("glStencilFunc".data);
    glStencilFuncSeparate = [(GLenum, GLenum, GLint, GLuint) -> void]glXGetProcAddress("glStencilFuncSeparate".data);
    glStencilMask = [(GLuint) -> void]glXGetProcAddress("glStencilMask".data);
    glStencilMaskSeparate = [(GLenum, GLuint) -> void]glXGetProcAddress("glStencilMaskSeparate".data);
    glStencilOp = [(GLenum, GLenum, GLenum) -> void]glXGetProcAddress("glStencilOp".data);
    glStencilOpSeparate = [(GLenum, GLenum, GLenum, GLenum) -> void]glXGetProcAddress("glStencilOpSeparate".data);
    glViewportArrayv = [(GLuint, GLsizei, ^GLfloat) -> void]glXGetProcAddress("glViewportArrayv".data);
    glViewportIndexedf = [(GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> void]glXGetProcAddress("glViewportIndexedf".data);
    glViewportIndexedfv = [(GLuint, ^GLfloat) -> void]glXGetProcAddress("glViewportIndexedfv".data);

    glBeginTransformFeedback = [(GLenum) -> void]glXGetProcAddress("glBeginTransformFeedback".data);
    glBindTransformFeedback = [(GLenum, GLuint) -> void]glXGetProcAddress("glBindTransformFeedback".data);
    glCreateTransformFeedbacks = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glCreateTransformFeedbacks".data);
    glDeleteTransformFeedbacks = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glDeleteTransformFeedbacks".data);
    glDrawTransformFeedback = [(GLenum, GLuint) -> void]glXGetProcAddress("glDrawTransformFeedback".data);
    glDrawTransformFeedbackInstanced = [(GLenum, GLuint, GLsizei) -> void]glXGetProcAddress("glDrawTransformFeedbackInstanced".data);
    glDrawTransformFeedbackStream = [(GLenum, GLuint, GLuint) -> void]glXGetProcAddress("glDrawTransformFeedbackStream".data);
    glDrawTransformFeedbackStreamInstanced = [(GLenum, GLuint, GLuint, GLsizei) -> void]glXGetProcAddress("glDrawTransformFeedbackStreamInstanced".data);
    glEndTransformFeedback = [() -> void]glXGetProcAddress("glEndTransformFeedback".data);
    glGenTransformFeedbacks = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glGenTransformFeedbacks".data);
    glGetTransformFeedbackiv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetTransformFeedbackiv".data);
    glGetTransformFeedbacki_v = [(GLuint, GLenum, GLuint, ^GLint) -> void]glXGetProcAddress("glGetTransformFeedbacki_v".data);
    glGetTransformFeedbacki64_v = [(GLuint, GLenum, GLuint, ^GLint64) -> void]glXGetProcAddress("glGetTransformFeedbacki64_v".data);
    glGetTransformFeedbackVarying = [(GLuint, GLuint, GLsizei, ^GLsizei, ^GLsizei, ^GLenum, ^s8) -> void]glXGetProcAddress("glGetTransformFeedbackVarying".data);
    glIsTransformFeedback = [(GLuint) -> GLboolean]glXGetProcAddress("glIsTransformFeedback".data);
    glPauseTransformFeedback = [() -> void]glXGetProcAddress("glPauseTransformFeedback".data);
    glResumeTransformFeedback = [() -> void]glXGetProcAddress("glResumeTransformFeedback".data);
    glTransformFeedbackBufferBase = [(GLuint, GLuint, GLuint) -> void]glXGetProcAddress("glTransformFeedbackBufferBase".data);
    glTransformFeedbackBufferRange = [(GLuint, GLuint, GLuint, GLintptr, GLsizei) -> void]glXGetProcAddress("glTransformFeedbackBufferRange".data);
    glTransformFeedbackVaryings = [(GLuint, GLsizei, ^^s8, GLenum) -> void]glXGetProcAddress("glTransformFeedbackVaryings".data);

    glDispatchCompute = [(GLuint, GLuint, GLuint) -> void]glXGetProcAddress("glDispatchCompute".data);
    glDispatchComputeIndirect = [(GLintptr) -> void]glXGetProcAddress("glDispatchComputeIndirect".data);
    glGetGraphicsResetStatus = [() -> GLenum]glXGetProcAddress("glGetGraphicsResetStatus".data);
    glGetInternalformativ = [(GLenum, GLenum, GLenum, GLsizei, ^GLint) -> void]glXGetProcAddress("glGetInternalformativ".data);
    glGetInternalformati64v = [(GLenum, GLenum, GLenum, GLsizei, ^GLint) -> void]glXGetProcAddress("glGetInternalformati64v".data);
    glGetMultisamplefv = [(GLenum, GLuint, ^GLfloat) -> void]glXGetProcAddress("glGetMultisamplefv".data);
    glGetString = [(GLenum) -> ^GLubyte]glXGetProcAddress("glGetString".data);
    glGetStringi = [(GLenum, GLuint) -> ^GLubyte]glXGetProcAddress("glGetStringi".data);
    glMemoryBarrier = [(GLbitfield) -> void]glXGetProcAddress("glMemoryBarrier".data);
    glMemoryBarrierByRegion = [(GLbitfield) -> void]glXGetProcAddress("glMemoryBarrierByRegion".data);

    glBeginConditionalRender = [(GLuint, GLenum) -> void]glXGetProcAddress("glBeginConditionalRender".data);
    glBeginQuery = [(GLenum, GLuint) -> void]glXGetProcAddress("glBeginQuery".data);
    glBeginQueryIndexed = [(GLenum, GLuint, GLuint) -> void]glXGetProcAddress("glBeginQueryIndexed".data);
    glCreateQueries = [(GLenum, GLsizei, ^GLuint) -> void]glXGetProcAddress("glCreateQueries".data);
    glDeleteQueries = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glDeleteQueries".data);
    glEndConditionalRender = [() -> void]glXGetProcAddress("glEndConditionalRender".data);
    glEndQuery = [(GLenum) -> void]glXGetProcAddress("glEndQuery".data);
    glEndQueryIndexed = [(GLenum, GLuint) -> void]glXGetProcAddress("glEndQueryIndexed".data);
    glGenQueries = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glGenQueries".data);
    glGetQueryIndexediv = [(GLenum, GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetQueryIndexediv".data);
    glGetQueryObjectiv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetQueryObjectiv".data);
    glGetQueryObjectuiv = [(GLuint, GLenum, ^GLuint) -> void]glXGetProcAddress("glGetQueryObjectuiv".data);
    glGetQueryObjecti64v = [(GLuint, GLenum, ^GLint64) -> void]glXGetProcAddress("glGetQueryObjecti64v".data);
    glGetQueryObjectui64v = [(GLuint, GLenum, ^GLuint64) -> void]glXGetProcAddress("glGetQueryObjectui64v".data);
    glGetQueryiv = [(GLenum, GLenum, ^GLint) -> void]glXGetProcAddress("glGetQueryiv".data);
    glIsQuery = [(GLuint) -> GLboolean]glXGetProcAddress("glIsQuery".data);
    glQueryCounter = [(GLuint, GLenum) -> void]glXGetProcAddress("glQueryCounter".data);

    glClientWaitSync = [(GLsync, GLbitfield, GLuint64) -> GLenum]glXGetProcAddress("glClientWaitSync".data);
    glDeleteSync = [(GLsync) -> void]glXGetProcAddress("glDeleteSync".data);
    glFenceSync = [(GLenum, GLbitfield) -> GLsync]glXGetProcAddress("glFenceSync".data);
    glGetSynciv = [(GLsync, GLenum, GLsizei, ^GLsizei, ^GLint) -> void]glXGetProcAddress("glGetSynciv".data);
    glIsSync = [(GLsync) -> GLboolean]glXGetProcAddress("glIsSync".data);
    glTextureBarrier = [() -> void]glXGetProcAddress("glTextureBarrier".data);
    glWaitSync = [(GLsync, GLbitfield, GLuint64) -> void]glXGetProcAddress("glWaitSync".data);

    glBindVertexArray = [(GLuint) -> void]glXGetProcAddress("glBindVertexArray".data);
    glDeleteVertexArrays = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glDeleteVertexArrays".data);
    glGenVertexArrays = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glGenVertexArrays".data);
    glIsVertexArray = [(GLuint) -> GLboolean]glXGetProcAddress("glIsVertexArray".data);

    glBindSampler = [(GLuint, GLuint) -> void]glXGetProcAddress("glBindSampler".data);
    glBindSamplers = [(GLuint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glBindSamplers".data);
    glCreateSamplers = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glCreateSamplers".data);
    glDeleteSamplers = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glDeleteSamplers".data);
    glGenSamplers = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glGenSamplers".data);
    glGetSamplerParameterfv = [(GLuint, GLenum, ^GLfloat) -> void]glXGetProcAddress("glGetSamplerParameterfv".data);
    glGetSamplerParameteriv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetSamplerParameteriv".data);
    glGetSamplerParameterIiv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetSamplerParameterIiv".data);
    glGetSamplerParameterIuiv = [(GLuint, GLenum, ^GLuint) -> void]glXGetProcAddress("glGetSamplerParameterIuiv".data);
    glIsSampler = [(GLuint) -> GLboolean]glXGetProcAddress("glIsSampler".data);
    glSamplerParameterf = [(GLuint, GLenum, GLfloat) -> void]glXGetProcAddress("glSamplerParameterf".data);
    glSamplerParameteri = [(GLuint, GLenum, GLint) -> void]glXGetProcAddress("glSamplerParameteri".data);
    glSamplerParameterfv = [(GLuint, GLenum, ^GLfloat) -> void]glXGetProcAddress("glSamplerParameterfv".data);
    glSamplerParameteriv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glSamplerParameteriv".data);
    glSamplerParameterIiv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glSamplerParameterIiv".data);
    glSamplerParameterIuiv = [(GLuint, GLenum, ^GLuint) -> void]glXGetProcAddress("glSamplerParameterIuiv".data);

    glActiveShaderProgram = [(GLuint, GLuint) -> void]glXGetProcAddress("glActiveShaderProgram".data);
    glBindProgramPipeline = [(GLuint) -> void]glXGetProcAddress("glBindProgramPipeline".data);
    glCreateProgramPipelines = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glCreateProgramPipelines".data);
    glDeleteProgramPipelines = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glDeleteProgramPipelines".data);
    glGenProgramPipelines = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glGenProgramPipelines".data);
    glGetProgramPipelineiv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetProgramPipelineiv".data);
    glGetProgramPipelineInfoLog = [(GLuint, GLsizei, ^GLsizei, ^GLchar) -> void]glXGetProcAddress("glGetProgramPipelineInfoLog".data);
    glIsProgramPipeline = [(GLuint) -> GLboolean]glXGetProcAddress("glIsProgramPipeline".data);
    glValidateProgramPipeline = [(GLuint) -> void]glXGetProcAddress("glValidateProgramPipeline".data);

    glDebugMessageCallback = [(GLDEBUGPROC, ^void) -> void]glXGetProcAddress("glDebugMessageCallback".data);
    glDebugMessageControl = [(GLenum, GLenum, GLenum, GLsizei, ^GLuint, GLboolean) -> void]glXGetProcAddress("glDebugMessageControl".data);
    glDebugMessageInsert = [(GLenum, GLenum, GLuint, GLenum, GLsizei, ^s8) -> void]glXGetProcAddress("glDebugMessageInsert".data);
    glGetDebugMessageLog = [(GLuint, GLsizei, ^GLenum, ^GLenum, ^GLuint, ^GLenum, ^GLsizei, ^GLchar) -> GLuint]glXGetProcAddress("glGetDebugMessageLog".data);
    glGetObjectLabel = [(GLenum, GLuint, GLsizei, ^GLsizei, ^s8) -> void]glXGetProcAddress("glGetObjectLabel".data);
    glGetObjectPtrLabel = [(^void, GLsizei, ^GLsizei, ^s8) -> void]glXGetProcAddress("glGetObjectPtrLabel".data);
    glGetPointerv = [(GLenum, ^^GLvoid) -> void]glXGetProcAddress("glGetPointerv".data);
    glGetProgramInterfaceiv = [(GLuint, GLenum, GLenum, ^GLint) -> void]glXGetProcAddress("glGetProgramInterfaceiv".data);
    glObjectLabel = [(GLenum, GLuint, GLsizei, ^s8) -> void]glXGetProcAddress("glObjectLabel".data);
    glObjectPtrLabel = [(^void, GLsizei, ^s8) -> void]glXGetProcAddress("glObjectPtrLabel".data);
    glPopDebugGroup = [() -> void]glXGetProcAddress("glPopDebugGroup".data);
    glPushDebugGroup = [(GLenum, GLuint, GLsizei, ^s8) -> void]glXGetProcAddress("glPushDebugGroup".data);

    glBindBuffer = [(GLenum, GLuint) -> void]glXGetProcAddress("glBindBuffer".data);
    glBindBufferBase = [(GLenum, GLuint, GLuint) -> void]glXGetProcAddress("glBindBufferBase".data);
    glBindBufferRange = [(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) -> void]glXGetProcAddress("glBindBufferRange".data);
    glBindBuffersBase = [(GLenum, GLuint, GLsizei, ^GLuint) -> void]glXGetProcAddress("glBindBuffersBase".data);
    glBindBuffersRange = [(GLenum, GLuint, GLsizei, ^GLuint, ^GLintptr, ^GLintptr) -> void]glXGetProcAddress("glBindBuffersRange".data);
    glBindVertexBuffer = [(GLuint, GLuint, GLintptr, GLintptr) -> void]glXGetProcAddress("glBindVertexBuffer".data);
    glVertexArrayVertexBuffer = [(GLuint, GLuint, GLuint, GLintptr, GLsizei) -> void]glXGetProcAddress("glVertexArrayVertexBuffer".data);
    glBindVertexBuffers = [(GLuint, GLsizei, ^GLuint, ^GLintptr, ^GLsizei) -> void]glXGetProcAddress("glBindVertexBuffers".data);
    glVertexArrayVertexBuffers = [(GLuint, GLuint, GLsizei, ^GLuint, ^GLintptr, ^GLsizei) -> void]glXGetProcAddress("glVertexArrayVertexBuffers".data);
    glBufferData = [(GLenum, GLsizeiptr, ^GLvoid, GLenum) -> void]glXGetProcAddress("glBufferData".data);
    glNamedBufferData = [(GLuint, GLsizei, ^void, GLenum) -> void]glXGetProcAddress("glNamedBufferData".data);
    glBufferStorage = [(GLenum, GLsizeiptr, ^GLvoid, GLbitfield) -> void]glXGetProcAddress("glBufferStorage".data);
    glNamedBufferStorage = [(GLuint, GLsizei, ^void, GLbitfield) -> void]glXGetProcAddress("glNamedBufferStorage".data);
    glBufferSubData = [(GLenum, GLintptr, GLsizeiptr, ^GLvoid) -> void]glXGetProcAddress("glBufferSubData".data);
    glNamedBufferSubData = [(GLuint, GLintptr, GLsizei, ^void) -> void]glXGetProcAddress("glNamedBufferSubData".data);
    glClearBufferData = [(GLenum, GLenum, GLenum, GLenum, ^void) -> void]glXGetProcAddress("glClearBufferData".data);
    glClearNamedBufferData = [(GLuint, GLenum, GLenum, GLenum, ^void) -> void]glXGetProcAddress("glClearNamedBufferData".data);
    glClearBufferSubData = [(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ^void) -> void]glXGetProcAddress("glClearBufferSubData".data);
    glClearNamedBufferSubData = [(GLuint, GLenum, GLintptr, GLsizei, GLenum, GLenum, ^void) -> void]glXGetProcAddress("glClearNamedBufferSubData".data);
    glCopyBufferSubData = [(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) -> void]glXGetProcAddress("glCopyBufferSubData".data);
    glCopyNamedBufferSubData = [(GLuint, GLuint, GLintptr, GLintptr, GLsizei) -> void]glXGetProcAddress("glCopyNamedBufferSubData".data);
    glCreateBuffers = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glCreateBuffers".data);
    glCreateVertexArrays = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glCreateVertexArrays".data);
    glDeleteBuffers = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glDeleteBuffers".data);
    glDisableVertexAttribArray = [(GLuint) -> void]glXGetProcAddress("glDisableVertexAttribArray".data);
    glDisableVertexArrayAttrib = [(GLuint, GLuint) -> void]glXGetProcAddress("glDisableVertexArrayAttrib".data);
    glDrawArrays = [(GLenum, GLint, GLsizei) -> void]glXGetProcAddress("glDrawArrays".data);
    glDrawArraysIndirect = [(GLenum, ^void) -> void]glXGetProcAddress("glDrawArraysIndirect".data);
    glDrawArraysInstanced = [(GLenum, GLint, GLsizei, GLsizei) -> void]glXGetProcAddress("glDrawArraysInstanced".data);
    glDrawArraysInstancedBaseInstance = [(GLenum, GLint, GLsizei, GLsizei, GLuint) -> void]glXGetProcAddress("glDrawArraysInstancedBaseInstance".data);
    glDrawElements = [(GLenum, GLsizei, GLenum, ^GLvoid) -> void]glXGetProcAddress("glDrawElements".data);
    glDrawElementsBaseVertex = [(GLenum, GLsizei, GLenum, ^GLvoid, GLint) -> void]glXGetProcAddress("glDrawElementsBaseVertex".data);
    glDrawElementsIndirect = [(GLenum, GLenum, ^void) -> void]glXGetProcAddress("glDrawElementsIndirect".data);
    glDrawElementsInstanced = [(GLenum, GLsizei, GLenum, ^void, GLsizei) -> void]glXGetProcAddress("glDrawElementsInstanced".data);
    glDrawElementsInstancedBaseInstance = [(GLenum, GLsizei, GLenum, ^void, GLsizei, GLuint) -> void]glXGetProcAddress("glDrawElementsInstancedBaseInstance".data);
    glDrawElementsInstancedBaseVertex = [(GLenum, GLsizei, GLenum, ^GLvoid, GLsizei, GLint) -> void]glXGetProcAddress("glDrawElementsInstancedBaseVertex".data);
    glDrawElementsInstancedBaseVertexBaseInstance = [(GLenum, GLsizei, GLenum, ^GLvoid, GLsizei, GLint, GLuint) -> void]glXGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance".data);
    glDrawRangeElements = [(GLenum, GLuint, GLuint, GLsizei, GLenum, ^GLvoid) -> void]glXGetProcAddress("glDrawRangeElements".data);
    glDrawRangeElementsBaseVertex = [(GLenum, GLuint, GLuint, GLsizei, GLenum, ^GLvoid, GLint) -> void]glXGetProcAddress("glDrawRangeElementsBaseVertex".data);
    glEnableVertexAttribArray = [(GLuint) -> void]glXGetProcAddress("glEnableVertexAttribArray".data);
    glEnableVertexArrayAttrib = [(GLuint, GLuint) -> void]glXGetProcAddress("glEnableVertexArrayAttrib".data);
    glFlushMappedBufferRange = [(GLenum, GLintptr, GLsizeiptr) -> void]glXGetProcAddress("glFlushMappedBufferRange".data);
    glFlushMappedNamedBufferRange = [(GLuint, GLintptr, GLsizei) -> void]glXGetProcAddress("glFlushMappedNamedBufferRange".data);
    glGenBuffers = [(GLsizei, ^GLuint) -> void]glXGetProcAddress("glGenBuffers".data);
    glGetBufferParameteriv = [(GLenum, GLenum, ^GLint) -> void]glXGetProcAddress("glGetBufferParameteriv".data);
    glGetBufferParameteri64v = [(GLenum, GLenum, ^GLint64) -> void]glXGetProcAddress("glGetBufferParameteri64v".data);
    glGetNamedBufferParameteriv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetNamedBufferParameteriv".data);
    glGetNamedBufferParameteri64v = [(GLuint, GLenum, ^GLint64) -> void]glXGetProcAddress("glGetNamedBufferParameteri64v".data);
    glGetBufferPointerv = [(GLenum, GLenum, ^^GLvoid) -> void]glXGetProcAddress("glGetBufferPointerv".data);
    glGetNamedBufferPointerv = [(GLuint, GLenum, ^^void) -> void]glXGetProcAddress("glGetNamedBufferPointerv".data);
    glGetBufferSubData = [(GLenum, GLintptr, GLsizeiptr, ^GLvoid) -> void]glXGetProcAddress("glGetBufferSubData".data);
    glGetNamedBufferSubData = [(GLuint, GLintptr, GLsizei, ^void) -> void]glXGetProcAddress("glGetNamedBufferSubData".data);
    glGetVertexArrayIndexediv = [(GLuint, GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetVertexArrayIndexediv".data);
    glGetVertexArrayIndexed64iv = [(GLuint, GLuint, GLenum, ^GLint64) -> void]glXGetProcAddress("glGetVertexArrayIndexed64iv".data);
    glGetVertexArrayiv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetVertexArrayiv".data);
    glGetVertexAttribdv = [(GLuint, GLenum, ^GLdouble) -> void]glXGetProcAddress("glGetVertexAttribdv".data);
    glGetVertexAttribfv = [(GLuint, GLenum, ^GLfloat) -> void]glXGetProcAddress("glGetVertexAttribfv".data);
    glGetVertexAttribiv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetVertexAttribiv".data);
    glGetVertexAttribIiv = [(GLuint, GLenum, ^GLint) -> void]glXGetProcAddress("glGetVertexAttribIiv".data);
    glGetVertexAttribIuiv = [(GLuint, GLenum, ^GLuint) -> void]glXGetProcAddress("glGetVertexAttribIuiv".data);
    glGetVertexAttribLdv = [(GLuint, GLenum, ^GLdouble) -> void]glXGetProcAddress("glGetVertexAttribLdv".data);
    glGetVertexAttribPointerv = [(GLuint, GLenum, ^^GLvoid) -> void]glXGetProcAddress("glGetVertexAttribPointerv".data);
    glInvalidateBufferData = [(GLuint) -> void]glXGetProcAddress("glInvalidateBufferData".data);
    glInvalidateBufferSubData = [(GLuint, GLintptr, GLsizeiptr) -> void]glXGetProcAddress("glInvalidateBufferSubData".data);
    glIsBuffer = [(GLuint) -> GLboolean]glXGetProcAddress("glIsBuffer".data);
    glMapBuffer = [(GLenum, GLenum) -> ^void]glXGetProcAddress("glMapBuffer".data);
    glMapNamedBuffer = [(GLuint, GLenum) -> ^void]glXGetProcAddress("glMapNamedBuffer".data);
    glMapBufferRange = [(GLenum, GLintptr, GLsizeiptr, GLbitfield) -> ^void]glXGetProcAddress("glMapBufferRange".data);
    glMapNamedBufferRange = [(GLuint, GLintptr, GLsizei, GLbitfield) -> ^void]glXGetProcAddress("glMapNamedBufferRange".data);
    glMultiDrawArrays = [(GLenum, ^GLint, ^GLsizei, GLsizei) -> void]glXGetProcAddress("glMultiDrawArrays".data);
    glMultiDrawArraysIndirect = [(GLenum, ^void, GLsizei, GLsizei) -> void]glXGetProcAddress("glMultiDrawArraysIndirect".data);
    glMultiDrawElements = [(GLenum, ^GLsizei, GLenum, ^^GLvoid, GLsizei) -> void]glXGetProcAddress("glMultiDrawElements".data);
    glMultiDrawElementsBaseVertex = [(GLenum, ^GLsizei, GLenum, ^^GLvoid, GLsizei, ^GLint) -> void]glXGetProcAddress("glMultiDrawElementsBaseVertex".data);
    glMultiDrawElementsIndirect = [(GLenum, GLenum, ^void, GLsizei, GLsizei) -> void]glXGetProcAddress("glMultiDrawElementsIndirect".data);
    glPatchParameteri = [(GLenum, GLint) -> void]glXGetProcAddress("glPatchParameteri".data);
    glPatchParameterfv = [(GLenum, ^GLfloat) -> void]glXGetProcAddress("glPatchParameterfv".data);
    glPrimitiveRestartIndex = [(GLuint) -> void]glXGetProcAddress("glPrimitiveRestartIndex".data);
    glProvokingVertex = [(GLenum) -> void]glXGetProcAddress("glProvokingVertex".data);
    glUnmapBuffer = [(GLenum) -> GLboolean]glXGetProcAddress("glUnmapBuffer".data);
    glUnmapNamedBuffer = [(GLuint) -> GLboolean]glXGetProcAddress("glUnmapNamedBuffer".data);
    glVertexArrayElementBuffer = [(GLuint, GLuint) -> void]glXGetProcAddress("glVertexArrayElementBuffer".data);
    glVertexAttrib1f = [(GLuint, GLfloat) -> void]glXGetProcAddress("glVertexAttrib1f".data);
    glVertexAttrib1s = [(GLuint, GLshort) -> void]glXGetProcAddress("glVertexAttrib1s".data);
    glVertexAttrib1d = [(GLuint, GLdouble) -> void]glXGetProcAddress("glVertexAttrib1d".data);
    glVertexAttribI1i = [(GLuint, GLint) -> void]glXGetProcAddress("glVertexAttribI1i".data);
    glVertexAttribI1ui = [(GLuint, GLuint) -> void]glXGetProcAddress("glVertexAttribI1ui".data);
    glVertexAttrib2f = [(GLuint, GLfloat, GLfloat) -> void]glXGetProcAddress("glVertexAttrib2f".data);
    glVertexAttrib2s = [(GLuint, GLshort, GLshort) -> void]glXGetProcAddress("glVertexAttrib2s".data);
    glVertexAttrib2d = [(GLuint, GLdouble, GLdouble) -> void]glXGetProcAddress("glVertexAttrib2d".data);
    glVertexAttribI2i = [(GLuint, GLint, GLint) -> void]glXGetProcAddress("glVertexAttribI2i".data);
    glVertexAttribI2ui = [(GLuint, GLint, GLint) -> void]glXGetProcAddress("glVertexAttribI2ui".data);
    glVertexAttrib3f = [(GLuint, GLfloat, GLfloat, GLfloat) -> void]glXGetProcAddress("glVertexAttrib3f".data);
    glVertexAttrib3s = [(GLuint, GLshort, GLshort, GLshort) -> void]glXGetProcAddress("glVertexAttrib3s".data);
    glVertexAttrib3d = [(GLuint, GLdouble, GLdouble, GLdouble) -> void]glXGetProcAddress("glVertexAttrib3d".data);
    glVertexAttribI3i = [(GLuint, GLint, GLint, GLint) -> void]glXGetProcAddress("glVertexAttribI3i".data);
    glVertexAttribI3ui = [(GLuint, GLuint, GLuint, GLuint) -> void]glXGetProcAddress("glVertexAttribI3ui".data);
    glVertexAttrib4f = [(GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> void]glXGetProcAddress("glVertexAttrib4f".data);
    glVertexAttrib4s = [(GLuint, GLshort, GLshort, GLshort, GLshort) -> void]glXGetProcAddress("glVertexAttrib4s".data);
    glVertexAttrib4d = [(GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> void]glXGetProcAddress("glVertexAttrib4d".data);
    glVertexAttrib4Nub = [(GLuint, GLubyte, GLubyte, GLubyte, GLubyte) -> void]glXGetProcAddress("glVertexAttrib4Nub".data);
    glVertexAttribI4i = [(GLuint, GLint, GLint, GLint, GLint) -> void]glXGetProcAddress("glVertexAttribI4i".data);
    glVertexAttribI4ui = [(GLuint, GLuint, GLuint, GLuint, GLuint) -> void]glXGetProcAddress("glVertexAttribI4ui".data);
    glVertexAttribL1d = [(GLuint, GLdouble) -> void]glXGetProcAddress("glVertexAttribL1d".data);
    glVertexAttribL2d = [(GLuint, GLdouble, GLdouble) -> void]glXGetProcAddress("glVertexAttribL2d".data);
    glVertexAttribL3d = [(GLuint, GLdouble, GLdouble, GLdouble) -> void]glXGetProcAddress("glVertexAttribL3d".data);
    glVertexAttribL4d = [(GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> void]glXGetProcAddress("glVertexAttribL4d".data);
    glVertexAttrib1fv = [(GLuint, ^GLfloat) -> void]glXGetProcAddress("glVertexAttrib1fv".data);
    glVertexAttrib1sv = [(GLuint, ^GLshort) -> void]glXGetProcAddress("glVertexAttrib1sv".data);
    glVertexAttrib1dv = [(GLuint, ^GLdouble) -> void]glXGetProcAddress("glVertexAttrib1dv".data);
    glVertexAttribI1iv = [(GLuint, ^GLint) -> void]glXGetProcAddress("glVertexAttribI1iv".data);
    glVertexAttribI1uiv = [(GLuint, ^GLuint) -> void]glXGetProcAddress("glVertexAttribI1uiv".data);
    glVertexAttrib2fv = [(GLuint, ^GLfloat) -> void]glXGetProcAddress("glVertexAttrib2fv".data);
    glVertexAttrib2sv = [(GLuint, ^GLshort) -> void]glXGetProcAddress("glVertexAttrib2sv".data);
    glVertexAttrib2dv = [(GLuint, ^GLdouble) -> void]glXGetProcAddress("glVertexAttrib2dv".data);
    glVertexAttribI2iv = [(GLuint, ^GLint) -> void]glXGetProcAddress("glVertexAttribI2iv".data);
    glVertexAttribI2uiv = [(GLuint, ^GLuint) -> void]glXGetProcAddress("glVertexAttribI2uiv".data);
    glVertexAttrib3fv = [(GLuint, ^GLfloat) -> void]glXGetProcAddress("glVertexAttrib3fv".data);
    glVertexAttrib3sv = [(GLuint, ^GLshort) -> void]glXGetProcAddress("glVertexAttrib3sv".data);
    glVertexAttrib3dv = [(GLuint, ^GLdouble) -> void]glXGetProcAddress("glVertexAttrib3dv".data);
    glVertexAttribI3iv = [(GLuint, ^GLint) -> void]glXGetProcAddress("glVertexAttribI3iv".data);
    glVertexAttribI3uiv = [(GLuint, ^GLuint) -> void]glXGetProcAddress("glVertexAttribI3uiv".data);
    glVertexAttrib4fv = [(GLuint, ^GLfloat) -> void]glXGetProcAddress("glVertexAttrib4fv".data);
    glVertexAttrib4sv = [(GLuint, ^GLshort) -> void]glXGetProcAddress("glVertexAttrib4sv".data);
    glVertexAttrib4dv = [(GLuint, ^GLdouble) -> void]glXGetProcAddress("glVertexAttrib4dv".data);
    glVertexAttrib4iv = [(GLuint, ^GLint) -> void]glXGetProcAddress("glVertexAttrib4iv".data);
    glVertexAttrib4bv = [(GLuint, ^GLbyte) -> void]glXGetProcAddress("glVertexAttrib4bv".data);
    glVertexAttrib4ubv = [(GLuint, ^GLubyte) -> void]glXGetProcAddress("glVertexAttrib4ubv".data);
    glVertexAttrib4usv = [(GLuint, ^GLushort) -> void]glXGetProcAddress("glVertexAttrib4usv".data);
    glVertexAttrib4uiv = [(GLuint, ^GLuint) -> void]glXGetProcAddress("glVertexAttrib4uiv".data);
    glVertexAttrib4Nbv = [(GLuint, ^GLbyte) -> void]glXGetProcAddress("glVertexAttrib4Nbv".data);
    glVertexAttrib4Nsv = [(GLuint, ^GLshort) -> void]glXGetProcAddress("glVertexAttrib4Nsv".data);
    glVertexAttrib4Niv = [(GLuint, ^GLint) -> void]glXGetProcAddress("glVertexAttrib4Niv".data);
    glVertexAttrib4Nubv = [(GLuint, ^GLubyte) -> void]glXGetProcAddress("glVertexAttrib4Nubv".data);
    glVertexAttrib4Nusv = [(GLuint, ^GLushort) -> void]glXGetProcAddress("glVertexAttrib4Nusv".data);
    glVertexAttrib4Nuiv = [(GLuint, ^GLuint) -> void]glXGetProcAddress("glVertexAttrib4Nuiv".data);
    glVertexAttribI4bv = [(GLuint, ^GLbyte) -> void]glXGetProcAddress("glVertexAttribI4bv".data);
    glVertexAttribI4ubv = [(GLuint, ^GLubyte) -> void]glXGetProcAddress("glVertexAttribI4ubv".data);
    glVertexAttribI4sv = [(GLuint, ^GLshort) -> void]glXGetProcAddress("glVertexAttribI4sv".data);
    glVertexAttribI4usv = [(GLuint, ^GLushort) -> void]glXGetProcAddress("glVertexAttribI4usv".data);
    glVertexAttribI4iv = [(GLuint, ^GLint) -> void]glXGetProcAddress("glVertexAttribI4iv".data);
    glVertexAttribI4uiv = [(GLuint, ^GLuint) -> void]glXGetProcAddress("glVertexAttribI4uiv".data);
    glVertexAttribL1dv = [(GLuint, ^GLdouble) -> void]glXGetProcAddress("glVertexAttribL1dv".data);
    glVertexAttribL2dv = [(GLuint, ^GLdouble) -> void]glXGetProcAddress("glVertexAttribL2dv".data);
    glVertexAttribL3dv = [(GLuint, ^GLdouble) -> void]glXGetProcAddress("glVertexAttribL3dv".data);
    glVertexAttribL4dv = [(GLuint, ^GLdouble) -> void]glXGetProcAddress("glVertexAttribL4dv".data);
    glVertexAttribP1ui = [(GLuint, GLenum, GLboolean, GLuint) -> void]glXGetProcAddress("glVertexAttribP1ui".data);
    glVertexAttribP2ui = [(GLuint, GLenum, GLboolean, GLuint) -> void]glXGetProcAddress("glVertexAttribP2ui".data);
    glVertexAttribP3ui = [(GLuint, GLenum, GLboolean, GLuint) -> void]glXGetProcAddress("glVertexAttribP3ui".data);
    glVertexAttribP4ui = [(GLuint, GLenum, GLboolean, GLuint) -> void]glXGetProcAddress("glVertexAttribP4ui".data);
    glVertexAttribBinding = [(GLuint, GLuint) -> void]glXGetProcAddress("glVertexAttribBinding".data);
    glVertexArrayAttribBinding = [(GLuint, GLuint, GLuint) -> void]glXGetProcAddress("glVertexArrayAttribBinding".data);
    glVertexAttribDivisor = [(GLuint, GLuint) -> void]glXGetProcAddress("glVertexAttribDivisor".data);
    glVertexAttribFormat = [(GLuint, GLint, GLenum, GLboolean, GLuint) -> void]glXGetProcAddress("glVertexAttribFormat".data);
    glVertexAttribIFormat = [(GLuint, GLint, GLenum, GLuint) -> void]glXGetProcAddress("glVertexAttribIFormat".data);
    glVertexAttribLFormat = [(GLuint, GLint, GLenum, GLuint) -> void]glXGetProcAddress("glVertexAttribLFormat".data);
    glVertexArrayAttribFormat = [(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) -> void]glXGetProcAddress("glVertexArrayAttribFormat".data);
    glVertexArrayAttribIFormat = [(GLuint, GLuint, GLint, GLenum, GLuint) -> void]glXGetProcAddress("glVertexArrayAttribIFormat".data);
    glVertexArrayAttribLFormat = [(GLuint, GLuint, GLint, GLenum, GLuint) -> void]glXGetProcAddress("glVertexArrayAttribLFormat".data);
    glVertexAttribPointer = [(GLuint, GLint, GLenum, GLboolean, GLsizei, ^GLvoid) -> void]glXGetProcAddress("glVertexAttribPointer".data);
    glVertexAttribIPointer = [(GLuint, GLint, GLenum, GLsizei, ^GLvoid) -> void]glXGetProcAddress("glVertexAttribIPointer".data);
    glVertexAttribLPointer = [(GLuint, GLint, GLenum, GLsizei, ^GLvoid) -> void]glXGetProcAddress("glVertexAttribLPointer".data);
    glVertexBindingDivisor = [(GLuint, GLuint) -> void]glXGetProcAddress("glVertexBindingDivisor".data);
    glVertexArrayBindingDivisor = [(GLuint, GLuint, GLuint) -> void]glXGetProcAddress("glVertexArrayBindingDivisor".data);
}

#end