print_s64 :: (value : s64) -> s64 #foreign("print_string.obj");
print_r32 :: (value : r32) -> s64 #foreign("print_string.obj");
print_string :: (str : ^u8) -> s64 #foreign("print_string.obj");

GetStdHandle  :: (std_handle : u32) -> ^void #foreign("kernel32.lib");
WriteConsoleA :: (console_output : ^void, lp_buffer : ^void, num_chars_to_write : u32, num_chars_written : ^u32, reserved : ^void) -> bool #foreign("kernel32.lib");
/*
print_c_str(ptr : ^u8) {
	buffer : [256]u8;
	i := 0;
	for *ptr != 0 {
		buffer[i] = *ptr;
		i += 0;
		ptr += 1;
	}
}*/

pointer_arithmetic :: () {
	arr : [16]u8;
	ptr := cast(^u8)&arr;
	*ptr = 'H';
	*(ptr + 1) = 'e';
	*(ptr + 2) = 'l';
	*(ptr + 3) = 'l';
	*(ptr + 4) = 'o';
	*(ptr + 5) = ' ';
	*(ptr + 6) = 'W';
	*(ptr + 7) = 'o';
	*(ptr + 8) = 'r';
	*(ptr + 9) = 'l';
	*(ptr + 10) = 'd';
	
	written : u32;
	
	stdhandle := GetStdHandle(cast(u32)-11);
	
	{
		i := 0;
		err := WriteConsoleA(stdhandle, cast(^void)ptr, 11, &written, cast(^void)0);
		
		for i < 11 {
			i += 1;
		}
	}
	
}

main :: () -> s64 {
	pointer_arithmetic();
    return 0;
}

/*
bug1 :: () {
	matrix : [4][4]r32;
	v := matrix[0]
}

main :: () -> s64 {
	bug1();
	return 0;
}*/