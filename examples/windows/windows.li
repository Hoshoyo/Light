//DECLSPEC_ALIGN(16)
M128A :: struct {
	Low  : u64;
	High : s64;
}

//DECLSPEC_ALIGN(16)
CONTEXT :: struct {

    //
    // Register parameter home addresses.
    //
    // N.B. These fields are for convience - they could be used to extend the
    //      context record in the future.
    //

    P1Home : u64;
    P2Home : u64;
    P3Home : u64;
    P4Home : u64;
    P5Home : u64;
    P6Home : u64;

    //
    // Control flags.
    //

    ContextFlags : u32;
    MxCsr : u32;

    //
    // Segment Registers and processor flags.
    //

    SegCs : u16;
    SegDs : u16;
    SegEs : u16;
    SegFs : u16;
    SegGs : u16;
    SegSs : u16;
    EFlags : u32;

    //
    // Debug registers
    //

    Dr0 : u64;
    Dr1 : u64;
    Dr2 : u64;
    Dr3 : u64;
    Dr6 : u64;
    Dr7 : u64;

    //
    // Integer registers.
    //

    Rax : u64;
    Rcx : u64;
    Rdx : u64;
    Rbx : u64;
    Rsp : u64;
    Rbp : u64;
    Rsi : u64;
    Rdi : u64;
    R8  : u64;
    R9  : u64;
    R10 : u64;
    R11 : u64;
    R12 : u64;
    R13 : u64;
    R14 : u64;
    R15 : u64;

    //
    // Program counter.
    //

    Rip : u64;

    //
    // Floating point state.
    //

	Header : [2]M128A;
	Legacy : [8]M128A;
	Xmm0   : M128A;
	Xmm1   : M128A;
	Xmm2   : M128A;
	Xmm3   : M128A;
	Xmm4   : M128A;
	Xmm5   : M128A;
	Xmm6   : M128A;
	Xmm7   : M128A;
	Xmm8   : M128A;
	Xmm9   : M128A;
	Xmm10  : M128A;
	Xmm11  : M128A;
	Xmm12  : M128A;
	Xmm13  : M128A;
	Xmm14  : M128A;
	Xmm15  : M128A;

    //
    // Vector registers.
    //

    VectorRegister : [26]M128A;
    VectorControl  : u64;

    //
    // Special debug control registers.
    //

    DebugControl         : u64;
    LastBranchToRip      : u64;
    LastBranchFromRip    : u64;
    LastExceptionToRip   : u64;
    LastExceptionFromRip : u64;
}

EXCEPTION_RECORD :: struct {
	ExceptionCode    : u32;
	ExceptionFlags   : u32;
	ExceptionRecord  : ^EXCEPTION_RECORD;
	ExceptionAddress : ^void;
	NumberParameters : u32;
	ExceptionInformation : [15]u64;
}

EXCEPTION_POINTERS :: struct {
	ExceptionRecord : ^EXCEPTION_RECORD;
    ContextRecord   : ^CONTEXT;
}

OVERLAPPED :: struct {
	Internal     : ^u64;
	InternalHigh : ^u64;
	// union here
	Pointer      : ^void;
	hEvent  : ^void;
}

SECURITY_ATTRIBUTES :: struct {
	nLength              : u32;
	lpSecurityDescriptor : ^void;
	bInheritHandle       : bool;
}

OFSTRUCT :: struct {
	cBytes     : u8;
	fFixedDisk : u8;
	nErrCode   : u16;
	Reserved1  : u16;
	Reserved2  : u16;
	szPathName : [128]s8;
}

EXIT_SUCCESS      : s32 : 0;
EXIT_FAILED       : s32 : -1;

STD_INPUT_HANDLE  : u32 : -10;
STD_OUTPUT_HANDLE : u32 : -11;
STD_ERROR_HANDLE  : u32 : -12;

OF_CANCEL           : u32 : 0x00000800;
OF_CREATE           : u32 : 0x00001000;
OF_DELETE           : u32 : 0x00000200;
OF_EXIST            : u32 : 0x00004000;
OF_PARSE            : u32 : 0x00000100;
OF_PROMPT           : u32 : 0x00002000;
OF_READ             : u32 : 0x00000000;
OF_READWRITE        : u32 : 0x00000002;
OF_REOPEN           : u32 : 0x00008000;
OF_SHARE_COMPAT     : u32 : 0x00000000;
OF_SHARE_DENY_NONE  : u32 : 0x00000040;
OF_SHARE_DENY_READ  : u32 : 0x00000030;
OF_SHARE_DENY_WRITE : u32 : 0x00000020;
OF_SHARE_EXCLUSIVE  : u32 : 0x00000010;
OF_VERIFY           : u32 : 0x00000400;
OF_WRITE            : u32 : 0x00000001;

FILE_SHARE_DELETE : u32 : 0x00000004;
FILE_SHARE_READ   : u32 : 0x00000001;
FILE_SHARE_WRITE  : u32 : 0x00000002;

FILE_ATTRIBUTE_READONLY              : u32 : 0x00000001;  
FILE_ATTRIBUTE_HIDDEN                : u32 : 0x00000002;  
FILE_ATTRIBUTE_SYSTEM                : u32 : 0x00000004;  
FILE_ATTRIBUTE_DIRECTORY             : u32 : 0x00000010;  
FILE_ATTRIBUTE_ARCHIVE               : u32 : 0x00000020;  
FILE_ATTRIBUTE_DEVICE                : u32 : 0x00000040;  
FILE_ATTRIBUTE_NORMAL                : u32 : 0x00000080;  
FILE_ATTRIBUTE_TEMPORARY             : u32 : 0x00000100;  
FILE_ATTRIBUTE_SPARSE_FILE           : u32 : 0x00000200;  
FILE_ATTRIBUTE_REPARSE_POINT         : u32 : 0x00000400;  
FILE_ATTRIBUTE_COMPRESSED            : u32 : 0x00000800;  
FILE_ATTRIBUTE_OFFLINE               : u32 : 0x00001000;  
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED   : u32 : 0x00002000;  
FILE_ATTRIBUTE_ENCRYPTED             : u32 : 0x00004000;  
FILE_ATTRIBUTE_INTEGRITY_STREAM      : u32 : 0x00008000;  
FILE_ATTRIBUTE_VIRTUAL               : u32 : 0x00010000;  
FILE_ATTRIBUTE_NO_SCRUB_DATA         : u32 : 0x00020000;  
FILE_ATTRIBUTE_EA                    : u32 : 0x00040000;  
FILE_ATTRIBUTE_PINNED                : u32 : 0x00080000;  
FILE_ATTRIBUTE_UNPINNED              : u32 : 0x00100000;  
FILE_ATTRIBUTE_RECALL_ON_OPEN        : u32 : 0x00040000;  
FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS : u32 : 0x00400000;

FILE_FLAG_WRITE_THROUGH         : u32 : 0x80000000;
FILE_FLAG_OVERLAPPED            : u32 : 0x40000000;
FILE_FLAG_NO_BUFFERING          : u32 : 0x20000000;
FILE_FLAG_RANDOM_ACCESS         : u32 : 0x10000000;
FILE_FLAG_SEQUENTIAL_SCAN       : u32 : 0x08000000;
FILE_FLAG_DELETE_ON_CLOSE       : u32 : 0x04000000;
FILE_FLAG_BACKUP_SEMANTICS      : u32 : 0x02000000;
FILE_FLAG_POSIX_SEMANTICS       : u32 : 0x01000000;
FILE_FLAG_SESSION_AWARE         : u32 : 0x00800000;
FILE_FLAG_OPEN_REPARSE_POINT    : u32 : 0x00200000;
FILE_FLAG_OPEN_NO_RECALL        : u32 : 0x00100000;
FILE_FLAG_FIRST_PIPE_INSTANCE   : u32 : 0x00080000;

PAGE_NOACCESS               : u32 : 0x01;   
PAGE_READONLY               : u32 : 0x02;
PAGE_READWRITE              : u32 : 0x04;
PAGE_WRITECOPY              : u32 : 0x08;
PAGE_EXECUTE                : u32 : 0x10;
PAGE_EXECUTE_READ           : u32 : 0x20;
PAGE_EXECUTE_READWRITE      : u32 : 0x40;
PAGE_EXECUTE_WRITECOPY      : u32 : 0x80;
PAGE_GUARD                  : u32 : 0x100;
PAGE_NOCACHE                : u32 : 0x200;
PAGE_WRITECOMBINE           : u32 : 0x400;
PAGE_REVERT_TO_FILE_MAP     : u32 : 0x80000000;
PAGE_ENCLAVE_THREAD_CONTROL : u32 : 0x80000000;
PAGE_TARGETS_NO_UPDATE      : u32 : 0x40000000;
PAGE_TARGETS_INVALID        : u32 : 0x40000000;
PAGE_ENCLAVE_UNVALIDATED    : u32 : 0x20000000;
MEM_COMMIT                  : u32 : 0x00001000;
MEM_RESERVE                 : u32 : 0x00002000;
MEM_DECOMMIT                : u32 : 0x00004000;
MEM_RELEASE                 : u32 : 0x00008000;
MEM_FREE                    : u32 : 0x00010000;
MEM_PRIVATE                 : u32 : 0x00020000;
MEM_MAPPED                  : u32 : 0x00040000;
MEM_RESET                   : u32 : 0x00080000;
MEM_TOP_DOWN                : u32 : 0x00100000;
MEM_WRITE_WATCH             : u32 : 0x00200000;
MEM_PHYSICAL                : u32 : 0x00400000;
MEM_ROTATE                  : u32 : 0x00800000;
MEM_DIFFERENT_IMAGE_BASE_OK : u32 : 0x00800000;
MEM_RESET_UNDO              : u32 : 0x01000000;
MEM_LARGE_PAGES             : u32 : 0x20000000;
MEM_4MB_PAGES               : u32 : 0x80000000;
//MEM_64K_PAGES               : u32 : (MEM_LARGE_PAGES | MEM_PHYSICAL);
SEC_64K_PAGES               : u32 : 0x00080000;
SEC_FILE                    : u32 : 0x00800000;
SEC_IMAGE                   : u32 : 0x01000000;
SEC_PROTECTED_IMAGE         : u32 : 0x02000000;
SEC_RESERVE                 : u32 : 0x04000000;
SEC_COMMIT                  : u32 : 0x08000000;
SEC_NOCACHE                 : u32 : 0x10000000;
SEC_WRITECOMBINE            : u32 : 0x40000000;
SEC_LARGE_PAGES             : u32 : 0x80000000;
//SEC_IMAGE_NO_EXECUTE        : u32 : (SEC_IMAGE | SEC_NOCACHE);
//MEM_IMAGE                   : u32 : SEC_IMAGE;
WRITE_WATCH_FLAG_RESET          : u32 : 0x01;
MEM_UNMAP_WITH_TRANSIENT_BOOST  : u32 : 0x01;

CREATE_ALWAYS     : u32 : 2;
CREATE_NEW        : u32 : 1;
OPEN_ALWAYS       : u32 : 4;
OPEN_EXISTING     : u32 : 3;
TRUNCATE_EXISTING : u32 : 5;

ERROR_ALREADY_EXISTS : u32 : 183;
ERROR_PATH_NOT_FOUND : u32 : 3;

#foreign("Kernel32")
GetStdHandle  :: (std_handle : u32) -> ^void;
SetStdHandle  :: (std_handle : u32, handle : ^void) -> bool;

WriteConsoleA :: (handle_console_output : ^void, buffer : ^void, number_chars_to_write : u32, number_chars_written : ^u32, reserved : ^void) -> bool;
WriteConsoleW :: (handle_console_output : ^void, buffer : ^void, number_chars_to_write : u32, number_chars_written : ^u32, reserved : ^void) -> bool;
ReadConsole   :: (console_input : ^void, buffer : ^void, number_chars_to_read : u32, number_chars_read : ^u32, input_control : ^void) -> bool;

GetCommandLineA :: () -> ^u8;

GetLastError :: () -> u32;
//ExitProcess  :: (exit_code : u32) -> void #foreign("kernel32.lib");

ReadFile    :: (handle_file : ^void, buffer : ^void, number_bytes_to_read : u32, number_bytes_read : ^u32, overlapped : ^OVERLAPPED) -> bool;
WriteFile   :: (handle_file : ^void, buffer : ^void, number_bytes_to_write : u32, number_bytes_written : ^u32, overlapped : ^OVERLAPPED) -> bool;
OpenFile    :: (filename : ^u8, reopen_buff : ^OFSTRUCT, ustyle : u32) -> s32;
CloseHandle :: (handle_object : ^void) -> bool;
CreateFile  :: (filename : ^u8, desired_access : u32, share_mode : u32, security_attribs : ^SECURITY_ATTRIBUTES, creation_disposition : u32, flags_and_attribs : u32, handle_template_file : ^void) -> ^void;
CreateDirectory :: (pathname : ^u8, security_attribs : ^SECURITY_ATTRIBUTES) -> bool;
CreateDirectoryEx :: (template_directory : ^u8, new_directory : ^u8, security_attribs : ^SECURITY_ATTRIBUTES) -> bool;

VirtualAlloc :: (address : ^void, size : u64, allocation_type : u32, protect : u32) -> ^void;
VirtualFree  :: (address : ^void, size : u64, free_type : u32) -> bool;
MoveMemory   :: (destination : ^void, source : ^void, length : u64) -> void;
CopyMemory   :: (destination : ^void, source : ^void, length : u64) -> void;
SecureZeroMemory :: (ptr : ^void, count : u64) -> ^void;

SetUnhandledExceptionFilter :: (top_level_exception_filter : (^void) -> s64) -> (^void) -> s64;

#end