print_s64 :: (value : s64) -> s64 #foreign("print_string.obj");
print_r32 :: (value : r32) -> s64 #foreign("print_string.obj");
print_string :: (str : ^u8) -> s64 #foreign("print_string.obj");

factorial :: (v : s32) -> s32 {
    if v == 0 || v == 1 return 1;
    return v * factorial(v - 1);
}

fill_array :: () {	
    a : [10]s32;

    i := 0;
    for i < 10 {
        a[i] = factorial(cast(s32)i);
        i += 1;
    }

    i = 0;
    for i < 10 {
        print_s64(cast(s64)a[i]);
        i += 1;
    }
}

multi_array :: () {
	matrix : [4][4]r32;
	{
		x := 0;
		y := 0;
		for y < 4 {
			x = 0;
			for x < 4 {
				matrix[y][x] = cast(r32)(x * y);
				print_r32(matrix[y][x]);
				x += 1;
			}
			y += 1;
		}
	}
}

vec2 :: struct {
	x : r32;
	y : r32;
}

fill_struct :: () {
	pos : vec2;
	pos.x = 1.0;
	pos.y = 2.0;
	
	print_s64(pos.x);
	print_s64(pos.y);
}

pointer_arithmetic :: () {
	arr : [10]u8;
	ptr := cast(^u8)&arr;
	*ptr = 0x48;
	*(ptr + 1) = 0x49;
}

main :: () -> s64 {
	//fill_array();
	//fill_struct();
	//multi_array();
	pointer_arithmetic();
    return 0;
}
