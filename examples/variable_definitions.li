
main :: (argc : s32, argv : ^^u8) -> s32 {
	// Variable_Name : <Type> = expression;
	
	{
		// No initialization, type is mandatory
		// Default value is 0
		n1 : s32;
		n2 : ^void;
		
		// Explicit uninitialization
		n3 : s32 = ---;
		n4 : ^void = ---;
		
		Person :: struct {
			name : string;	// 16 bytes
 			age  : s32;		// 4 bytes
		}
		
		n5 : Person = ---;	// 20 bytes of allocated uninitialized data
	}

	{	
		// Explicit type
		v1 : s32 = 5;
		v2 : u32 = 'a';		// unicode is u32
	}
	
	{
		// Type inference
		p1 := v1 * 2;	// s32
		p2 := 5;		// s64 default
		p3 := 1.1;		// r32 default
		p4 := proc();	// ^r32
	}
	
	{
		// Multiple line declaration
		f1, f2, f3 : r32 = 5.0, 6.0, 7.0;
		f4, f5 := 5.0, 6.0;	// r32
	}
	
	{
		// @Possibly proc multiple return values?
		value, error := divide(1.0, 0.0);
	}
	
	return 0;
}

proc :: () -> ^r32 {
	return 0;
}

// @Feature
divide :: (v1 : r32, v2 : r32) -> (r32, s32) {
	if v2 == 0.0 return -1;
	
	return v1 / v2, 0;
}