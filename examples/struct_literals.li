print_r32 :: (v : r32) -> s64 #foreign("print_string.obj");
print_s32 :: (v : s32) -> s64 #foreign("print_string.obj");
print_s64 :: (v : s64) -> s64 #foreign("print_string.obj");
print_r64 :: (v : r64) -> s64 #foreign("print_string.obj");
println :: () -> void #foreign("print_string.obj");

vec2 :: struct {
	x : r32;
	y : r32;
}

Person :: struct {
	name   : string;
	age    : s32;
	height : r32;
	position : vec2;
}

string :: struct {
	length : s64;
	capacity : s64;
	data : ^u8;
}

print_str :: (str : string) {
	print_s64(str.length);
	println();
	print_s64(str.capacity);
	println();
	print_s64(cast(s64)str.data);
	println();
}

print_person :: (p : Person) {
	// name
	print_str(p.name);
	println();
	print_s32(p.age);
	println();
	print_s32(p.height);
	println();
	print_r32(p.position.x);
	print_r32(p.position.y);
}

main :: () -> s32 {
	//var : foo = foo{1.0, 2.0};
	//print_r32(var.x);
	ptr : ^u8;
	p := Person{string{0, -1, ptr}, 26, 1.0, vec2{1.0, 2.0}};

	print_person(p);

	//person1 := Person{ "P1", 26, 1.75 };
	//println(person1);

	//person2 := &Person{ "P2", 24, 1.78 };
	//println(person2);

	//person3 : Person;
	//person3.name = "P3";
	//person3.age = 17;
	//person3.height = 1.65;
	//println(person3);

	//person4 := Person{ name : "P4", age : 48 };
	//println(person4);
	return 0;
}