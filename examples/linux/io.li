STDIN_FILENO	: s32 : 0;	/* Standard input.  */
STDOUT_FILENO	: s32 : 1;	/* Standard output.  */
STDERR_FILENO	: s32 : 2;	/* Standard error output.  */

O_RDONLY : s32 : 0;
O_WRONLY : s32 : 1;
O_RDWR   : s32 : 2;
O_CREAT  : s32 : 100;

timespec :: struct {
    tv_sec  : s64;		/* Seconds.  */
    tv_nsec : s64;	    /* Nanoseconds.  */
}

stat :: struct {
    st_dev     : u64;   /* ID of device containing file */
    st_ino     : u64;   /* inode number */
    st_nlink   : u64;   /* number of hard links */
    st_mode    : u32;   /* protection */
    st_uid     : u32;   /* user ID of owner */
    st_gid     : u32;   /* group ID of owner */
    st_rdev    : u64;   /* device ID (if special file) */
    st_size    : s64;   /* total size, in bytes */
    st_blksize : s64;   /* blocksize for file system I/O */
    st_blocks  : s64;   /* number of 512B blocks allocated */
    st_atim    : timespec;
    st_mtim    : timespec;
    st_ctim    : timespec;
    __glibc_reserved : [3]s64;   /* time of last access */
}

#foreign("c")

write :: (fd : s32, buf : ^void, count : u64) -> u64;
read  :: (fd : s32, buf : ^void, count : u64) -> s64;
open  :: (pathname : ^u8, flags : s32) -> s32;
close :: (fd : s32) -> s32;
fstat :: (fd : s32, buf : ^stat) -> s32;

#end

read_entire_file :: (filename : string, allocator : (u64)->^void) -> string {
    result : string;
    descriptor := open(filename.data, O_RDONLY);

    if descriptor == -1 {
        return result;
    }
    file_info : stat;
    fstat(descriptor, &file_info);
  
    memory := allocator([u64]file_info.st_size);
    if memory == null {
        return result;
    }

    rd := read(descriptor, memory, [u64]file_info.st_size);
  
    close(descriptor);

    result.length = file_info.st_size;
    result.capacity = file_info.st_size;
    result.data = [^u8]memory;

    return result;
}

write_file :: (filename : string, buffer : ^void, buffer_size : u64) -> bool {
    descriptor := open(filename.data, O_WRONLY|O_CREAT);

    if descriptor == -1 {
        return false;
    }

    written := write(descriptor, buffer, buffer_size);

    if written != 0 {
        return true;
    }
    return false;
}