#import "x11.li"
#import "../../../modules/linux/print.li"
#import "renderer.li"

init_opengl : (display : ^Display) -> u64 {
	visual_attribs := [
		GLX_X_RENDERABLE, True,
		GLX_DRAWABLE_TYPE, GLX_WINDOW_BIT,
		GLX_RENDER_TYPE, GLX_RGBA_BIT,
		GLX_X_VISUAL_TYPE, GLX_TRUE_COLOR,
		GLX_RED_SIZE, 8,
		GLX_GREEN_SIZE, 8,
		GLX_BLUE_SIZE, 8,
		GLX_ALPHA_SIZE, 8,
		GLX_DEPTH_SIZE, 24,
		GLX_STENCIL_SIZE, 8,
		GLX_DOUBLEBUFFER, True,
		0
	];

	glx_minor : s32;
	glx_major : s32;

	if !glXQueryVersion(display, &glx_major, &glx_minor) || ((glx_major == 1) && (glx_minor < 3)) || (glx_major < 1){
		print_string("invalid glx version!\n");
		return 0;
	}

	print("GLX version queried Major %, Minor %\n", glx_major, glx_minor);
	
	// Getting framebuffer config
	fbcount : s32;
	fbc := glXChooseFBConfig(display, DefaultScreen(display), visual_attribs->^u32, &fbcount);

	if fbc == null -> ^GLXFBConfig {
		print_string("Failed to get framebuffer configuration\n");
		return 0;
	}

	best_fbc : s32 = -1;
	worst_fbc : s32 = -1;
	best_num_samp : s32 = -1;
	worst_num_samp : s32 = 999;

	for i :s32= 0; i < fbcount; i += 1 {
		vi : ^XVisualInfo = glXGetVisualFromFBConfig(display, fbc[i]);
		if vi != null -> ^XVisualInfo {
			samp_buf : s32;
			samples : s32;
			glXGetFBConfigAttrib(display, fbc[i], GLX_SAMPLE_BUFFERS, &samp_buf);
			glXGetFBConfigAttrib(display, fbc[i], GLX_SAMPLES       , &samples);

			print("  Matching fbconfig %, visual ID %: SAMPLE_BUFFERS = %, SAMPLES = %\n",
				i, vi.visualid -> u32, samp_buf, samples);

			if best_fbc < 0 || samp_buf != 0 && samples > best_num_samp {
				best_fbc = i;
				best_num_samp = samples;
			}
			if worst_fbc < 0 || samp_buf == 0 || samples < worst_num_samp {
				worst_fbc = i;
				worst_num_samp = samples;
			}
		}
		XFree(vi -> ^void);
	}

	bestFbc := fbc[best_fbc];
	XFree(fbc -> ^void);

	vi := glXGetVisualFromFBConfig(display, bestFbc);
	print("Chosen visual ID = %\n", vi.visualid -> u32);

	swa : XSetWindowAttributes;
	cmap : Colormap;

	cmap = XCreateColormap(display, RootWindow(display, vi.screen), vi.visual, 0);
	swa.colormap = cmap;
	swa.background_pixmap = 0;
	swa.border_pixel      = 0;
	swa.event_mask        = StructureNotifyMask;
	//info.cmap = cmap;

	print("Creating window\n");
	win := XCreateWindow(display, RootWindow(display, vi.screen),
			0, 0, 800, 600, 0, vi.depth, InputOutput, vi.visual,
			CWBorderPixel|CWColormap|CWEventMask, &swa);

	window_handle := win;

	if win == 0 {
		print("Failed to create window.\n");
		return 0;
	}

	XFree(vi -> ^void);

	XStoreName(display, win, "GL 3.0 Window".data);

	XSelectInput(display, window_handle, ExposureMask | KeyPressMask | KeyReleaseMask | StructureNotifyMask);

	print("Mapping window\n");
	XMapWindow(display, win);

	glXCreateContextAttribsARB := glXGetProcAddressARB("glXCreateContextAttribsARB\0".data) -> (^Display, GLXFBConfig, GLXContext, bool, ^s32) -> GLXContext;
	ctx : GLXContext;

	ctxErrorHandler : (^Display, ^XErrorEvent) -> s32;
	XSetErrorHandler(ctxErrorHandler);

	context_attribs := [
			GLX_CONTEXT_MAJOR_VERSION_ARB, 3,
			GLX_CONTEXT_MINOR_VERSION_ARB, 3,
			GLX_CONTEXT_FLAGS_ARB, GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB,
			//GLX_CONTEXT_PROFILE_MASK_ARB, GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB,
			0
	];

	ctx = glXCreateContextAttribsARB(display, bestFbc, null, true, context_attribs -> ^s32);
	//info.ctx = ctx;

	XSync(display, false);

	glXMakeCurrent(display, win, ctx -> ^void);

	// Verifying that context is a direct context
	if (!glXIsDirect(display, ctx)) {
		print_string( "Indirect GLX rendering context obtained\n" );
	} else {
		print_string( "Direct GLX rendering context obtained\n" );
	}

	return win;
}

position : vec2;
SPEED :: 500.0;

render : (width : s32, height : s32, dt : r32) {
	glClear(GL_COLOR_BUFFER_BIT);
	glClearColor(0.1, 0.1, 0.1, 1.0);

	q := quad_new(position, 100.0, 100.0, vec4:{1.0, 0.0, 1.0, 1.0});
	render_quad_immediate(&q);

	render_immediate_flush();
}

main : () -> s32 {
	display := XOpenDisplay(null);
	if display == null {
		print_string("could not open display\n");
		return 1;
	}

	window_handle := init_opengl(display);

	hogl_init_extensions();
	render_context_init();

	dt : r32 = 1.0 / 60.0;

	position.x = 0.0;
	position.y = 0.0;

	print("GL Error: %\n", glGetError());
	
	while true {
		attributes : XWindowAttributes;
		XGetWindowAttributes(display, window_handle, &attributes);

		event : XEvent;
		XNextEvent(display, &event);
		
		if event.type == KeyPress {
			keysym := XLookupKeysym(&event.xkey, 0);
			if keysym == 'a' {
				print("Hello\n");
			}
		}
		if event.type == KeyRelease {
			print("Released key\n");
		}

		render(attributes.width, attributes.height, dt);
		print("GL Error: %\n", glGetError());
		print("% %\n", attributes.width, attributes.height);

		glXSwapBuffers (display, window_handle);
		//usleep(1000);
	}

	return 0;
}