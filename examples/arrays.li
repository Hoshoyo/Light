print_s32 :: (val : s32) -> s64 #foreign("print_string.obj");
print_r32 :: (val : r32) -> s64 #foreign("print_string.obj");
print_s64 :: (val : s64) -> s64 #foreign("print_string.obj");
print_string :: (length : s64, str : ^u8) -> s64 #foreign("print_string.obj");

/*
handmade :: () {
    s : [4]u8;
    s[0] = 'h';
    s[1] = 'e';
    s[2] = 'l';
    s[3] = 'o';
    print_string(4, cast(^u8)s);
}
*/
vec2 :: struct {
    x : [2]r32;
    y : r32;
}

literal :: () {
    //s := array {array{1, 2}, array{3, 4}};
    //s : [4]u8 = array {'h', 'e', 'l', 'o'};
    //s := array {'h', 'e', 'l', 'o'};
    //s := array {'h', 'e', 'l', 'o'} + 1;
    //s : [0]u8 = array{'u'} + array{'u'};
    //s := array{ array {1, 2}, array{3, 4} };

    //matrix := array {
    //    array{1.0, 2.0, 3.0, 4.0},
    //    array{1.0, 2.0, 3.0, 4.0},
    //    array{1.0, 2.0, 3.0, 4.0},
    //    array{1.0, 2.0, 3.0, 4.0}
    //};

    //s := array {1, 3};
    //v := array {s, s, s};

    //s := 1.0;
    //v := array {s, 2.0};

    //a : vec2;
    //s := array {a, a};
    //print_r32((s[0]).x);
    //print_r32((s[0]).y);
}

main :: () -> s32 {
    //handmade();
    //literal();
    s : [2]vec2;
    s[0].x[0] = 2.0;
    x := s[0].x[0];
    print_r32(x);
    return 0;
}