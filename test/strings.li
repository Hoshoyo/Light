#import "../modules/windows/print.li"

load_basic_vshader : () -> string {
	basic_vshader := "#version 330 core
	layout(location = 0) in vec3 v_vertex;
	layout(location = 1) in vec2 v_tcoords;
	layout(location = 2) in vec3 v_normals;
	
	out vec2 o_tcoords;
	out vec4 o_color;
	out vec3 o_normals;
	out vec3 o_tolight;

	uniform mat4 u_model = mat4(1.0);
	uniform mat4 u_view = mat4(1.0);
	uniform mat4 u_projection = mat4(1.0);

	void main() {
		gl_Position = u_projection * u_view * u_model * vec4(v_vertex, 1.0);
		vec3 world_pos = (u_model * vec4(v_vertex, 1.0)).xyz;
		o_tcoords = v_tcoords;
		o_normals = vec3(u_model * vec4(v_normals, 0.0));
		o_tolight = vec3(30.0, 30.0, -30.0) - world_pos;
	}\0";
	return basic_vshader;
}

main : () -> s32 {
    basic_vshader := "#version 330 core
	layout(location = 0) in vec3 v_vertex;
	layout(location = 1) in vec2 v_tcoords;
	layout(location = 2) in vec3 v_normals;
	
	out vec2 o_tcoords;
	out vec4 o_color;
	out vec3 o_normals;
	out vec3 o_tolight;

	uniform mat4 u_model = mat4(1.0);
	uniform mat4 u_view = mat4(1.0);
	uniform mat4 u_projection = mat4(1.0);

	void main() {
		gl_Position = u_projection * u_view * u_model * vec4(v_vertex, 1.0);
		vec3 world_pos = (u_model * vec4(v_vertex, 1.0)).xyz;
		o_tcoords = v_tcoords;
		o_normals = vec3(u_model * vec4(v_normals, 0.0));
		o_tolight = vec3(30.0, 30.0, -30.0) - world_pos;
	}\0";
    print(basic_vshader);
    return 0;
}