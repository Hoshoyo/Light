#import "camera.li"
#import "../x11.li"

Event_Type s32;
EVENT_NOP            :: 0;
EVENT_MOUSE_INPUT    :: 1;
EVENT_KEYBOARD_INPUT :: 2;
EVENT_WINDOW         :: 3;

Mouse_Event_Type s32;
MOUSE_BUTTON_PRESS   :: 0;
MOUSE_BUTTON_RELEASE :: 1;
MOUSE_POSITION       :: 2;
MOUSE_WHEEL          :: 3;
MOUSE_LEFT_WINDOW    :: 4;
MOUSE_ENTER_WINDOW   :: 5;

Keyboard_Event_Type s32;
KEYBOARD_KEY_PRESS   :: 0;
KEYBOARD_KEY_RELEASE :: 1;
KEYBOARD_KEY_REPEAT  :: 2;
KEYBOARD_CHAR        :: 3;

Window_Event_Type s32;
WINDOW_RESIZE     :: 0;
WINDOW_FOCUSED    :: 1;
WINDOW_UNFOCUSED  :: 2;
WINDOW_DROP_FILES :: 3;

Event_Window struct {
    type   : Window_Event_Type;
    width  : s32;
    height : s32;
}

Event_Mouse struct {
    type        : Mouse_Event_Type;
    x           : r64;
    y           : r64;
    wheel_value : r32;
    button      : s32;
    mods        : s32;
}

Event_Keyboard struct {
    type     : Keyboard_Event_Type;
    unicode  : u32;
    scancode : s32;
    mods     : s32;
}

Event struct {
    type     : Event_Type;
    mouse    : Event_Mouse;
    keyboard : Event_Keyboard;
    window   : Event_Window;
}

EVENT_STATUS_HANDLED   :: 0;
EVENT_STATUS_UNHANDLED :: 1;

Event_Handle_Status s32;
input_handle:(e : ^Event, active_camera : ^Quaternion_Camera) -> Event_Handle_Status
{
	status := EVENT_STATUS_UNHANDLED;

    if e.type == EVENT_MOUSE_INPUT {
        if e.mouse.type == MOUSE_POSITION {
            handle_mouse_change(e.mouse.x, e.mouse.y, active_camera);
        } else if e.mouse.type == MOUSE_BUTTON_RELEASE {
            if (e.mouse.button == 1) // left click
                rotate_camera = false;
            if (e.mouse.button == 2) // scroll click
                move_camera = false;
        } else if e.mouse.type == MOUSE_BUTTON_PRESS {
            if (e.mouse.button == 1) // right click
                rotate_camera = true;
            if (e.mouse.button == 2) // scroll click
                move_camera = true;
        }
    } else if e.type == EVENT_WINDOW {
        if e.window.type == WINDOW_RESIZE {
            width := e.window.width;
            height := e.window.height;
            glViewport(0,0, width, height);

            camera := active_camera.c;
            camera.aspect_ratio = (width -> r32) / (height -> r32);
            active_camera.c.projection_matrix = perspective(camera.fov, camera.aspect_ratio, camera.near_plane, camera.far_plane);
        }
    }

	return status;
}

X11_Mouse_State struct {
    root_x : s32;
    root_y : s32;
    win_x  : s32;
    win_y  : s32;
    mask_r : u32;
}

input_x11_process_event:(xev : ^XEvent) -> Event {
    result : Event;

    // Window resizing
    if xev.type == Expose {
        e := xev-> ^XExposeEvent;
        result.type = EVENT_WINDOW;
        result.window.type = WINDOW_RESIZE;
        result.window.width = e.width;
        result.window.height = e.height;

        return result;
    }

    // Keyboard press and release
    if xev.type == KeyPress || xev.type == KeyRelease {
        e := xev -> ^XKeyEvent;
        key := XLookupKeysym(e, 0);

        result.type = EVENT_KEYBOARD_INPUT;
        result.keyboard.unicode = key;
        result.keyboard.scancode = e.keycode -> s32;
        result.keyboard.mods = e.state -> s32;

        if xev.type == KeyPress {
            result.keyboard.type = KEYBOARD_KEY_PRESS;
            if key <= 1024 && key > 0
                key_state[key] = true;
        }

        if xev.type == KeyRelease {
            result.keyboard.type = KEYBOARD_KEY_RELEASE;
            if key <= 1024 && key > 0
                key_state[key] = false;
        }
        return result;
    }

    // Mouse motion
    if xev.type == MotionNotify {
        e := xev -> ^XMotionEvent;
        result.type = EVENT_MOUSE_INPUT;
        result.mouse.type = MOUSE_POSITION;
        result.mouse.x = e.x -> r64;
        result.mouse.y = e.y -> r64;
        result.mouse.mods = e.state;
        return result;
    }

    // Mouse buttons
    if xev.type == ButtonPress || xev.type == ButtonRelease {
        e := xev -> ^XButtonEvent;

        result.type = EVENT_MOUSE_INPUT;
        result.mouse.x = e.x -> r64;
        result.mouse.y = e.y -> r64;
        result.mouse.mods = e.state -> s32;
        result.mouse.button = e.button -> s32;

        if xev.type == ButtonPress {
            result.mouse.type = MOUSE_BUTTON_PRESS;
        }

        if xev.type == ButtonRelease {
            result.mouse.type = MOUSE_BUTTON_RELEASE;
        }
        return result;
    }

    return result;
}