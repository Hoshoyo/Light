#import "math.li"

Quaternion struct {
    x : r32;
    y : r32;
    z : r32;
    w : r32;
}

quaternion_new:(axis: vec3, angle_deg: r32) -> Quaternion {
    if vec3_length(axis) != 0.0
        axis = vec3_normalize(axis);
    sang := sinf(DEGTORAD(angle_deg) / 2.0);

    quat : Quaternion;
    quat.w = cosf(DEGTORAD(angle_deg / 2.0));
    quat.x = axis.x * sang;
    quat.y = axis.y * sang;
    quat.z = axis.z * sang;

    return quat;
}

quaternion_product:(q1 : ^Quaternion, q2 : ^Quaternion) -> Quaternion {
    res : Quaternion;

    res.w = q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;
    res.x = q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y;
    res.y = q1.w * q2.y + q1.y * q2.w + q1.z * q2.x - q1.x * q2.z;
    res.z = q1.w * q2.z + q1.z * q2.w + q1.x * q2.y - q1.y * q2.x;

    return res;

}
quaternion_slerp:(q1 : ^Quaternion, q2 : ^Quaternion, t : r32) -> Quaternion {
    qm : Quaternion;

	// Calculate angle between them.
	cos_half_theta := q1.w * q2.w + q1.x * q2.x + q1.y * q2.y + q1.z * q2.z;
    if cos_half_theta < 0.0
    {
        q2.w = -q2.w;
        q2.x = -q2.x;
        q2.y = -q2.y;
        q2.z = q2.z;
        cos_half_theta = -cos_half_theta;
    }

	// if qa=qb or qa=-qb then theta = 0 and we can return qa
	if fabsf(cos_half_theta) >= 1.0
    {
		qm.w = q1.w;
        qm.x = q1.x;
        qm.y = q1.y;
        qm.z = q1.z;
		return qm;
	}

	// Calculate temporary values.
	half_theta := acosf(cos_half_theta);
	sin_half_theta := sqrtf(1.0 - cos_half_theta*cos_half_theta);

	// if theta = 180 degrees then result is not fully defined
	// we could rotate around any axis normal to qa or qb
	if fabsf(sin_half_theta) < 0.001
    {
		qm.w = (q1.w * 0.5 + q2.w * 0.5);
		qm.x = (q1.x * 0.5 + q2.x * 0.5);
		qm.y = (q1.y * 0.5 + q2.y * 0.5);
		qm.z = (q1.z * 0.5 + q2.z * 0.5);
		return qm;
	}

	ratio_a := sinf((1.0 - t) * half_theta) / sin_half_theta;
	ratio_b := sinf(t * half_theta) / sin_half_theta; 

	// Calculate Quaternion
	qm.w = (q1.w * ratio_a + q2.w * ratio_b);
	qm.x = (q1.x * ratio_a + q2.x * ratio_b);
	qm.y = (q1.y * ratio_a + q2.y * ratio_b);
	qm.z = (q1.z * ratio_a + q2.z * ratio_b);
	return qm;
}

quaternion_inverse:(q : ^Quaternion) -> Quaternion {
    result : Quaternion;
	result.x = -q.x;
	result.y = -q.y;
	result.z = -q.z;
	result.w = q.w;
	return result;
}

quaternion_get_matrix:(quat : ^Quaternion) -> mat4 {
    result : mat4;

	result.m[0][0] = 1.0 - 2.0 * quat.y * quat.y - 2.0 * quat.z * quat.z;
	result.m[1][0] = 2.0 * quat.x * quat.y + 2.0 * quat.w * quat.z;
	result.m[2][0] = 2.0 * quat.x * quat.z - 2.0 * quat.w * quat.y;
	result.m[3][0] = 0.0;

	result.m[0][1] = 2.0 * quat.x * quat.y - 2.0 * quat.w * quat.z;
	result.m[1][1] = 1.0 - (2.0 * quat.x * quat.x) - (2.0 * quat.z * quat.z);
	result.m[2][1] = 2.0 * quat.y * quat.z + 2.0 * quat.w * quat.x;
	result.m[3][1] = 0.0;

	result.m[0][2] = 2.0 * quat.x * quat.z + 2.0 * quat.w * quat.y;
	result.m[1][2] = 2.0 * quat.y * quat.z - 2.0 * quat.w * quat.x;
	result.m[2][2] = 1.0 - (2.0 * quat.x * quat.x) - (2.0 * quat.y * quat.y);
	result.m[3][2] = 0.0;

	result.m[0][3] = 0.0;
	result.m[1][3] = 0.0;
	result.m[2][3] = 0.0;
	result.m[3][3] = 1.0;

    return result;
}

quaternion_get_forward:(quat : ^Quaternion) -> vec3 {
    m := quaternion_get_matrix(quat);
	return vec3:{ m.m[2][0], m.m[2][1], m.m[2][2] };
}

quaternion_get_up:(quat : ^Quaternion) -> vec3 {
    m := quaternion_get_matrix(quat);
	return vec3:{ m.m[1][0], m.m[1][1], m.m[1][2] };
}

quaternion_get_right:(quat : ^Quaternion) -> vec3 {
    m := quaternion_get_matrix(quat);
	return vec3:{ m.m[0][0], m.m[0][1], m.m[0][2] };
}

quaternion_normalize:(q : ^Quaternion) -> Quaternion {
    len := sqrtf(q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w);
	return quaternion_new(vec3:{q.x / len, q.y / len, q.z / len}, q.w / len);
}