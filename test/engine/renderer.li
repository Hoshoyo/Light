/*
#import "math.li"
Vertex_3D struct {
	position           : vec3;
	texture_alpha      : r32;
	texture_coordinate : vec2;
	color              : vec4;
	mask               : r32;
}

Quad_2D struct {
	vertices : [4]Vertex_3D;
}

WindowContext struct {
	width  : s32;
	height : s32;
}
wnd_ctx : WindowContext;

ImmediateContext struct {
	quad_vao : u32;
	quad_vbo : u32;
	quad_ebo : u32;

	line_vao : u32;
	line_vbo : u32;

	shader : u32;
	shader_3D : u32;

	shader_3D_projection_matrix_location : s32;
	shader_3D_view_matrix_location : s32;
	shader_3D_model_matrix_location : s32;

	valid : bool;
	prerendering : bool;
	line_prerendering : bool;

	quads : ^void;
	quad_count : s64;
	quad_max_count : s64;

	shader_projection_matrix_location : s32;
	shader_translation_matrix_location : s32;
	shader_text_location : s32;
}

imm_ctx : ImmediateContext;

calloc : (count : u64, size : u64) -> ^void #extern("c");
free : (block : ^void) -> void #extern("c");

assert : (value : bool) {
	if !value {
		print("Assertion failed!\n");
		*(null -> ^s32) = 0;
	}
}

shader_load :(vert_shader : string, frag_shader : string) -> GLuint {
    vs_id := glCreateShader(GL_VERTEX_SHADER);
    fs_id := glCreateShader(GL_FRAGMENT_SHADER);
    vs_length := vert_shader.length -> s32;
    fs_length := frag_shader.length -> s32;

    compile_status : GLint;

    p_v : [1]^GLchar = [ vert_shader.data -> ^GLchar ];
    glShaderSource(vs_id, 1, p_v -> ^^GLchar, &vs_length);

    p_f : [1]^GLchar = [ frag_shader.data -> ^GLchar ];
    glShaderSource(fs_id, 1, p_f -> ^^GLchar, &fs_length);

    glCompileShader(vs_id);
    glGetShaderiv(vs_id, GL_COMPILE_STATUS, &compile_status);
    if compile_status == 0 {
        error_buffer : [512]s8;
        glGetShaderInfoLog(vs_id, 512, null, error_buffer -> ^s8);
        //printf("Vertex shader error: %s", error_buffer);
		print_string(vert_shader);
        print("Vertex shader error: ");
        print_string_c(error_buffer -> ^u8);
        return (-1 -> GLuint);
    }

    glCompileShader(fs_id);
    glGetShaderiv(fs_id, GL_COMPILE_STATUS, &compile_status);
    if compile_status == 0 {
        error_buffer : [512]^s8;
        glGetShaderInfoLog(fs_id, 512, null, error_buffer -> ^s8);
        print_string("Fragment shader error: ");
        //print_string_c(error_buffer -> ^u8);
        return (-1 -> GLuint);
    }

    shader_id := glCreateProgram();
    glAttachShader(shader_id, vs_id);
    glAttachShader(shader_id, fs_id);
    glDeleteShader(vs_id);
    glDeleteShader(fs_id);
    glLinkProgram(shader_id);

    glGetProgramiv(shader_id, GL_LINK_STATUS, &compile_status);
    if (compile_status == 0) {
        error_buffer : [512]GLchar;
        glGetProgramInfoLog(shader_id, 512, null, error_buffer -> ^s8);
        //print_string_c(error_buffer -> ^u8);
        return (-1 -> GLuint);
    }

    glValidateProgram(shader_id);
    return shader_id;
}

basic_vshader := "#version 330 core
	layout(location = 0) in vec3 v_vertex;
	layout(location = 1) in vec2 v_tcoords;
	layout(location = 2) in vec3 v_normals;
	
	out vec2 o_tcoords;
	out vec4 o_color;
	out vec3 o_normals;
	out vec3 o_tolight;

	uniform mat4 u_model = mat4(1.0);
	uniform mat4 u_view = mat4(1.0);
	uniform mat4 u_projection = mat4(1.0);

	void main() {
		gl_Position = u_projection * u_view * u_model * vec4(v_vertex, 1.0);
		vec3 world_pos = (u_model * vec4(v_vertex, 1.0)).xyz;
		o_tcoords = v_tcoords;
		o_normals = vec3(u_model * vec4(v_normals, 0.0));
		o_tolight = vec3(30.0, 30.0, -30.0) - world_pos;
	}";
basic_fshader := "#version 330 core
	in vec2 o_tcoords;
	in vec3 o_normals;
	in vec3 o_tolight;
	
	out vec4 color;

	uniform sampler2D u_texture;
	
	void main() {
		float factor = dot(normalize(o_normals), normalize(o_tolight));
		vec3 diffuse = max(factor * vec3(1.0, 1.0, 1.0), 0.2);
		//color  = texture(u_texture, o_tcoords);
		color = vec4(diffuse, 1.0);
		//color = vec4(o_normals, 1.0);
	}";

quad_vshader := "#version 330 core
	layout(location = 0) in vec3 v_vertex;
	layout(location = 1) in vec2 v_tcoords;
	layout(location = 2) in vec4 v_color;
	layout(location = 3) in float v_texture_alpha;
	layout(location = 4) in float v_is_text;

	out vec2 o_tcoords;
	out vec4 o_color;
	out float o_texture_alpha;
	out float o_is_text;

	uniform mat4 u_projection = mat4(1.0);
	uniform mat4 u_translation = mat4(1.0);

	void main(){
		gl_Position = u_projection * u_translation * vec4(v_vertex.xy, 0.0, 1.0);
		o_tcoords = v_tcoords;
		o_color = v_color;
		o_texture_alpha = v_texture_alpha;
		o_is_text = v_is_text;
	}";

quad_fshader := "#version 330 core
	in vec2 o_tcoords;
	in vec4 o_color;
	in float o_texture_alpha;
	in float o_is_text;

	out vec4 color;

	uniform sampler2D u_text;
	uniform bool u_use_texture;

	void main(){
		color = mix(o_color, texture(u_text, o_tcoords), o_texture_alpha);
		color = vec4(o_color.rgb, o_color.a * max(color.r, o_is_text));
	}";

valid_glid : (id : u32) -> bool {
	return (id >= 0 && id < (-1 -> u32));
}

render_context_init : () {
	imm_ctx.shader_3D = shader_load(basic_vshader, basic_fshader);

	assert(valid_glid(imm_ctx.shader_3D));

	// Start batch size
	batch_size :s64= 1024 * 64;
	imm_ctx.quad_max_count = batch_size;

	// Shader setup
	imm_ctx.shader = shader_load(quad_vshader, quad_fshader);
	assert(valid_glid(imm_ctx.shader));
	imm_ctx.shader_projection_matrix_location = glGetUniformLocation(imm_ctx.shader,  "u_projection".data -> ^s8);
	imm_ctx.shader_translation_matrix_location = glGetUniformLocation(imm_ctx.shader, "u_translation".data -> ^s8);
	imm_ctx.shader_text_location = glGetUniformLocation(imm_ctx.shader, "u_text".data -> ^s8);

	imm_ctx.shader_3D_projection_matrix_location = glGetUniformLocation(imm_ctx.shader_3D, "u_projection".data -> ^s8);
	imm_ctx.shader_3D_view_matrix_location = glGetUniformLocation(imm_ctx.shader_3D, "u_view".data -> ^s8);
	imm_ctx.shader_3D_model_matrix_location = glGetUniformLocation(imm_ctx.shader_3D, "u_model".data -> ^s8);
	assert(valid_glid(imm_ctx.shader_3D_projection_matrix_location -> u32));
	assert(valid_glid(imm_ctx.shader_3D_view_matrix_location -> u32));
	assert(valid_glid(imm_ctx.shader_3D_model_matrix_location -> u32));

	// Buffers setup for rendering
	glGenVertexArrays(1, &imm_ctx.quad_vao);
	glBindVertexArray(imm_ctx.quad_vao);
	glGenBuffers(1, &imm_ctx.quad_vbo);
	glBindBuffer(GL_ARRAY_BUFFER, imm_ctx.quad_vbo);
	glBufferData(GL_ARRAY_BUFFER, batch_size * #size_of Quad_2D, null, GL_DYNAMIC_DRAW);

	glEnableVertexAttribArray(0);
	glEnableVertexAttribArray(1);
	glEnableVertexAttribArray(2);
	glEnableVertexAttribArray(3);
	glEnableVertexAttribArray(4);

	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE -> u8, #size_of Vertex_3D -> GLsizei, null);
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE -> u8, #size_of Vertex_3D -> GLsizei, &(null-> ^Vertex_3D).texture_coordinate -> ^GLvoid);
	glVertexAttribPointer(2, 4, GL_FLOAT, GL_FALSE -> u8, #size_of Vertex_3D -> GLsizei, &(null-> ^Vertex_3D).color -> ^GLvoid);
	glVertexAttribPointer(3, 1, GL_FLOAT, GL_FALSE -> u8, #size_of Vertex_3D -> GLsizei, &(null-> ^Vertex_3D).texture_alpha -> ^GLvoid);
	glVertexAttribPointer(4, 1, GL_FLOAT, GL_FALSE -> u8, #size_of Vertex_3D -> GLsizei, &(null-> ^Vertex_3D).mask -> ^GLvoid);

	indices := calloc(1, batch_size -> u64 * 6 * (#size_of u32) -> u64) -> ^u32;
	for i :s64= 0, j :u32= 0; i < batch_size * 6; i += 6, j += 4 
    {
		indices[i + 0] = j;
		indices[i + 1] = j + 1;
		indices[i + 2] = j + 2;
		indices[i + 3] = j + 2;
		indices[i + 4] = j + 1;
		indices[i + 5] = j + 3;
	}

	glGenBuffers(1, &imm_ctx.quad_ebo);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, imm_ctx.quad_ebo);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * #size_of u32 * batch_size, indices -> ^GLvoid, GL_STATIC_DRAW);
	free(indices);

	imm_ctx.quad_count = 0;
	imm_ctx.valid = true;
}

render_quad_immediate : (quad : ^Quad_2D) {
	if !imm_ctx.valid {
		render_context_init();
	}

	if(imm_ctx.quad_count == imm_ctx.quad_max_count) {
		return;
	}

	if !imm_ctx.prerendering {
		imm_ctx.prerendering = true;
		glBindBuffer(GL_ARRAY_BUFFER, imm_ctx.quad_vbo);
		imm_ctx.quads = glMapBuffer(GL_ARRAY_BUFFER, GL_WRITE_ONLY);
		assert(imm_ctx.quads != null);
	}

	quads := imm_ctx.quads -> ^Quad_2D;

	q := quads + imm_ctx.quad_count;
	assert(q != null);
	memcpy(q, quad, #size_of Quad_2D -> u64);

	imm_ctx.quad_count += 1;
}

render_immediate_flush : () {
	imm_ctx.prerendering = false;
	imm_ctx.quads = null;
	glBindBuffer(GL_ARRAY_BUFFER, imm_ctx.quad_vbo);
	glUnmapBuffer(GL_ARRAY_BUFFER);

	if !imm_ctx.valid return;

	if imm_ctx.quad_count > 0 {
		glUseProgram(imm_ctx.shader);
		glBindVertexArray(imm_ctx.quad_vao);
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, imm_ctx.quad_ebo);
		glBindBuffer(GL_ARRAY_BUFFER, imm_ctx.quad_vbo);

		//hm::mat4 projection = hm::mat4::ortho(0, wnd_ctx.width, 0, wnd_ctx.height);
		projection := ortho(0.0, wnd_ctx.width -> r32, 0.0, wnd_ctx.height -> r32);
		glUniformMatrix4fv(imm_ctx.shader_projection_matrix_location, 1, GL_TRUE -> u8, projection.m -> ^r32);
		//hm::mat4 translation = hm::mat4::translate(hm::vec3(0.0f, 0.0f, 0.0f));
		translation := translate(0.0, 0.0, 0.0);
		glUniformMatrix4fv(imm_ctx.shader_translation_matrix_location, 1, GL_TRUE -> u8, translation.m -> ^r32);

		glEnableVertexAttribArray(0);
		glEnableVertexAttribArray(1);
		glEnableVertexAttribArray(2);
		glEnableVertexAttribArray(3);
		glEnableVertexAttribArray(4);

		glDrawElements(GL_TRIANGLES, imm_ctx.quad_count -> s32 * 6, GL_UNSIGNED_INT, null);

		imm_ctx.quad_count = 0;
	}
}

quad_new : (position : vec2, width : r32, height : r32, color : vec4) -> Quad_2D {
	q := Quad_2D:{
		[
			Vertex_3D:{ vec3:{position.x, position.y, 0.0}, 					1.0, vec2:{0.0, 0.0}, color, 1.0 },
			Vertex_3D:{ vec3:{position.x + width, position.y, 0.0}, 			1.0, vec2:{1.0, 0.0}, color, 1.0 },
			Vertex_3D:{ vec3:{position.x, position.y + height, 0.0}, 			1.0, vec2:{0.0, 1.0}, color, 1.0 },
			Vertex_3D:{ vec3:{position.x + width, position.y + height, 0.0}, 	1.0, vec2:{1.0, 1.0}, color, 1.0 }
		]
	};
	return q;
}


// 3D

vert_shader := "#version 330 core

layout (location = 0) in vec4 vertex_position;
layout (location = 1) in vec4 vertex_normal;
layout (location = 2) in vec2 texture_coords;
layout (location = 3) in vec4 vertex_tangent;

uniform mat4 model_matrix = mat4(1.0);
uniform mat4 view_matrix;
uniform mat4 projection_matrix;

out vec3 o_position;
out vec4 o_normal;

void main()
{
	gl_Position = projection_matrix * view_matrix * vertex_position;
	//gl_Position = vertex_position;
	o_position = vec3(model_matrix * vertex_position);
	o_normal = model_matrix * vertex_normal;
}";

frag_shader := "#version 330 core

out vec4 final_color;
in vec3 o_position;
in vec4 o_normal;

uniform vec4 color;

void main()
{
	vec4 color = vec4(0.5, 0.5, 0.5, 1.0);

	vec3 light_pos = vec3(100.0, 100.0, 100.0);

	vec3 norm = normalize(vec3(o_normal));
	vec3 lightDir = normalize(light_pos - o_position);

	float diff = max(dot(norm, lightDir), 0.0);

	final_color = diff * color;
	//final_color = vec4(1.0, 0.0, 0.0, 1.0);
}";

*/