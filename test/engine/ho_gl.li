GLvoid void;
GLenum u32;
GLfloat r32;
GLint s32;
GLsizei s32;
GLbitfield u32;
GLdouble r64;
GLuint u32;
GLboolean u8;
GLubyte u8;
// GL 1.0
GL_DEPTH_BUFFER_BIT               : u32 : 0x00000100;
GL_STENCIL_BUFFER_BIT             : u32 : 0x00000400;
GL_COLOR_BUFFER_BIT               : u32 : 0x00004000;
GL_FALSE                          : u32 : 0;
GL_TRUE                           : u32 : 1;
GL_POINTS                         : u32 : 0x0000;
GL_LINES                          : u32 : 0x0001;
GL_LINE_LOOP                      : u32 : 0x0002;
GL_LINE_STRIP                     : u32 : 0x0003;
GL_TRIANGLES                      : u32 : 0x0004;
GL_TRIANGLE_STRIP                 : u32 : 0x0005;
GL_TRIANGLE_FAN                   : u32 : 0x0006;
GL_QUADS                          : u32 : 0x0007;
GL_NEVER                          : u32 : 0x0200;
GL_LESS                           : u32 : 0x0201;
GL_EQUAL                          : u32 : 0x0202;
GL_LEQUAL                         : u32 : 0x0203;
GL_GREATER                        : u32 : 0x0204;
GL_NOTEQUAL                       : u32 : 0x0205;
GL_GEQUAL                         : u32 : 0x0206;
GL_ALWAYS                         : u32 : 0x0207;
GL_ZERO                           : u32 : 0;
GL_ONE                            : u32 : 1;
GL_SRC_COLOR                      : u32 : 0x0300;
GL_ONE_MINUS_SRC_COLOR            : u32 : 0x0301;
GL_SRC_ALPHA                      : u32 : 0x0302;
GL_ONE_MINUS_SRC_ALPHA            : u32 : 0x0303;
GL_DST_ALPHA                      : u32 : 0x0304;
GL_ONE_MINUS_DST_ALPHA            : u32 : 0x0305;
GL_DST_COLOR                      : u32 : 0x0306;
GL_ONE_MINUS_DST_COLOR            : u32 : 0x0307;
GL_SRC_ALPHA_SATURATE             : u32 : 0x0308;
GL_NONE                           : u32 : 0;
GL_FRONT_LEFT                     : u32 : 0x0400;
GL_FRONT_RIGHT                    : u32 : 0x0401;
GL_BACK_LEFT                      : u32 : 0x0402;
GL_BACK_RIGHT                     : u32 : 0x0403;
GL_FRONT                          : u32 : 0x0404;
GL_BACK                           : u32 : 0x0405;
GL_LEFT                           : u32 : 0x0406;
GL_RIGHT                          : u32 : 0x0407;
GL_FRONT_AND_BACK                 : u32 : 0x0408;
GL_NO_ERROR                       : u32 : 0;
GL_INVALID_ENUM                   : u32 : 0x0500;
GL_INVALID_VALUE                  : u32 : 0x0501;
GL_INVALID_OPERATION              : u32 : 0x0502;
GL_OUT_OF_MEMORY                  : u32 : 0x0505;
GL_CW                             : u32 : 0x0900;
GL_CCW                            : u32 : 0x0901;
GL_POINT_SIZE                     : u32 : 0x0B11;
GL_POINT_SIZE_RANGE               : u32 : 0x0B12;
GL_POINT_SIZE_GRANULARITY         : u32 : 0x0B13;
GL_LINE_SMOOTH                    : u32 : 0x0B20;
GL_LINE_WIDTH                     : u32 : 0x0B21;
GL_LINE_WIDTH_RANGE               : u32 : 0x0B22;
GL_LINE_WIDTH_GRANULARITY         : u32 : 0x0B23;
GL_POLYGON_MODE                   : u32 : 0x0B40;
GL_POLYGON_SMOOTH                 : u32 : 0x0B41;
GL_CULL_FACE                      : u32 : 0x0B44;
GL_CULL_FACE_MODE                 : u32 : 0x0B45;
GL_FRONT_FACE                     : u32 : 0x0B46;
GL_DEPTH_RANGE                    : u32 : 0x0B70;
GL_DEPTH_TEST                     : u32 : 0x0B71;
GL_DEPTH_WRITEMASK                : u32 : 0x0B72;
GL_DEPTH_CLEAR_VALUE              : u32 : 0x0B73;
GL_DEPTH_FUNC                     : u32 : 0x0B74;
GL_STENCIL_TEST                   : u32 : 0x0B90;
GL_STENCIL_CLEAR_VALUE            : u32 : 0x0B91;
GL_STENCIL_FUNC                   : u32 : 0x0B92;
GL_STENCIL_VALUE_MASK             : u32 : 0x0B93;
GL_STENCIL_FAIL                   : u32 : 0x0B94;
GL_STENCIL_PASS_DEPTH_FAIL        : u32 : 0x0B95;
GL_STENCIL_PASS_DEPTH_PASS        : u32 : 0x0B96;
GL_STENCIL_REF                    : u32 : 0x0B97;
GL_STENCIL_WRITEMASK              : u32 : 0x0B98;
GL_VIEWPORT                       : u32 : 0x0BA2;
GL_DITHER                         : u32 : 0x0BD0;
GL_BLEND_DST                      : u32 : 0x0BE0;
GL_BLEND_SRC                      : u32 : 0x0BE1;
GL_BLEND                          : u32 : 0x0BE2;
GL_LOGIC_OP_MODE                  : u32 : 0x0BF0;
GL_DRAW_BUFFER                    : u32 : 0x0C01;
GL_READ_BUFFER                    : u32 : 0x0C02;
GL_SCISSOR_BOX                    : u32 : 0x0C10;
GL_SCISSOR_TEST                   : u32 : 0x0C11;
GL_COLOR_CLEAR_VALUE              : u32 : 0x0C22;
GL_COLOR_WRITEMASK                : u32 : 0x0C23;
GL_DOUBLEBUFFER                   : u32 : 0x0C32;
GL_STEREO                         : u32 : 0x0C33;
GL_LINE_SMOOTH_HINT               : u32 : 0x0C52;
GL_POLYGON_SMOOTH_HINT            : u32 : 0x0C53;
GL_UNPACK_SWAP_BYTES              : u32 : 0x0CF0;
GL_UNPACK_LSB_FIRST               : u32 : 0x0CF1;
GL_UNPACK_ROW_LENGTH              : u32 : 0x0CF2;
GL_UNPACK_SKIP_ROWS               : u32 : 0x0CF3;
GL_UNPACK_SKIP_PIXELS             : u32 : 0x0CF4;
GL_UNPACK_ALIGNMENT               : u32 : 0x0CF5;
GL_PACK_SWAP_BYTES                : u32 : 0x0D00;
GL_PACK_LSB_FIRST                 : u32 : 0x0D01;
GL_PACK_ROW_LENGTH                : u32 : 0x0D02;
GL_PACK_SKIP_ROWS                 : u32 : 0x0D03;
GL_PACK_SKIP_PIXELS               : u32 : 0x0D04;
GL_PACK_ALIGNMENT                 : u32 : 0x0D05;
GL_MAX_TEXTURE_SIZE               : u32 : 0x0D33;
GL_MAX_VIEWPORT_DIMS              : u32 : 0x0D3A;
GL_SUBPIXEL_BITS                  : u32 : 0x0D50;
GL_TEXTURE_1D                     : u32 : 0x0DE0;
GL_TEXTURE_2D                     : u32 : 0x0DE1;
GL_TEXTURE_WIDTH                  : u32 : 0x1000;
GL_TEXTURE_HEIGHT                 : u32 : 0x1001;
GL_TEXTURE_BORDER_COLOR           : u32 : 0x1004;
GL_DONT_CARE                      : u32 : 0x1100;
GL_FASTEST                        : u32 : 0x1101;
GL_NICEST                         : u32 : 0x1102;
GL_BYTE                           : u32 : 0x1400;
GL_UNSIGNED_BYTE                  : u32 : 0x1401;
GL_SHORT                          : u32 : 0x1402;
GL_UNSIGNED_SHORT                 : u32 : 0x1403;
GL_INT                            : u32 : 0x1404;
GL_UNSIGNED_INT                   : u32 : 0x1405;
GL_FLOAT                          : u32 : 0x1406;
GL_STACK_OVERFLOW                 : u32 : 0x0503;
GL_STACK_UNDERFLOW                : u32 : 0x0504;
GL_CLEAR                          : u32 : 0x1500;
GL_AND                            : u32 : 0x1501;
GL_AND_REVERSE                    : u32 : 0x1502;
GL_COPY                           : u32 : 0x1503;
GL_AND_INVERTED                   : u32 : 0x1504;
GL_NOOP                           : u32 : 0x1505;
GL_XOR                            : u32 : 0x1506;
GL_OR                             : u32 : 0x1507;
GL_NOR                            : u32 : 0x1508;
GL_EQUIV                          : u32 : 0x1509;
GL_INVERT                         : u32 : 0x150A;
GL_OR_REVERSE                     : u32 : 0x150B;
GL_COPY_INVERTED                  : u32 : 0x150C;
GL_OR_INVERTED                    : u32 : 0x150D;
GL_NAND                           : u32 : 0x150E;
GL_SET                            : u32 : 0x150F;
GL_TEXTURE                        : u32 : 0x1702;
GL_COLOR                          : u32 : 0x1800;
GL_DEPTH                          : u32 : 0x1801;
GL_STENCIL                        : u32 : 0x1802;
GL_STENCIL_INDEX                  : u32 : 0x1901;
GL_DEPTH_COMPONENT                : u32 : 0x1902;
GL_RED                            : u32 : 0x1903;
GL_GREEN                          : u32 : 0x1904;
GL_BLUE                           : u32 : 0x1905;
GL_ALPHA                          : u32 : 0x1906;
GL_RGB                            : u32 : 0x1907;
GL_RGBA                           : u32 : 0x1908;
GL_POINT                          : u32 : 0x1B00;
GL_LINE                           : u32 : 0x1B01;
GL_FILL                           : u32 : 0x1B02;
GL_KEEP                           : u32 : 0x1E00;
GL_REPLACE                        : u32 : 0x1E01;
GL_INCR                           : u32 : 0x1E02;
GL_DECR                           : u32 : 0x1E03;
GL_VENDOR                         : u32 : 0x1F00;
GL_RENDERER                       : u32 : 0x1F01;
GL_VERSION                        : u32 : 0x1F02;
GL_EXTENSIONS                     : u32 : 0x1F03;
GL_NEAREST                        : u32 : 0x2600;
GL_LINEAR                         : u32 : 0x2601;
GL_NEAREST_MIPMAP_NEAREST         : u32 : 0x2700;
GL_LINEAR_MIPMAP_NEAREST          : u32 : 0x2701;
GL_NEAREST_MIPMAP_LINEAR          : u32 : 0x2702;
GL_LINEAR_MIPMAP_LINEAR           : u32 : 0x2703;
GL_TEXTURE_MAG_FILTER             : u32 : 0x2800;
GL_TEXTURE_MIN_FILTER             : u32 : 0x2801;
GL_TEXTURE_WRAP_S                 : u32 : 0x2802;
GL_TEXTURE_WRAP_T                 : u32 : 0x2803;
GL_REPEAT                         : u32 : 0x2901;
/* GL_VERSION_1_0 */

// GL_VERSION_1_1
// GL_VERSION_1_1 1
GLclampf r32;
GLclampd r64;

GL_COLOR_LOGIC_OP                 : u32 : 0x0BF2;
GL_POLYGON_OFFSET_UNITS           : u32 : 0x2A00;
GL_POLYGON_OFFSET_POINT           : u32 : 0x2A01;
GL_POLYGON_OFFSET_LINE            : u32 : 0x2A02;
GL_POLYGON_OFFSET_FILL            : u32 : 0x8037;
GL_POLYGON_OFFSET_FACTOR          : u32 : 0x8038;
GL_TEXTURE_BINDING_1D             : u32 : 0x8068;
GL_TEXTURE_BINDING_2D             : u32 : 0x8069;
GL_TEXTURE_INTERNAL_FORMAT        : u32 : 0x1003;
GL_TEXTURE_RED_SIZE               : u32 : 0x805C;
GL_TEXTURE_GREEN_SIZE             : u32 : 0x805D;
GL_TEXTURE_BLUE_SIZE              : u32 : 0x805E;
GL_TEXTURE_ALPHA_SIZE             : u32 : 0x805F;
GL_DOUBLE                         : u32 : 0x140A;
GL_PROXY_TEXTURE_1D               : u32 : 0x8063;
GL_PROXY_TEXTURE_2D               : u32 : 0x8064;
GL_R3_G3_B2                       : u32 : 0x2A10;
GL_RGB4                           : u32 : 0x804F;
GL_RGB5                           : u32 : 0x8050;
GL_RGB8                           : u32 : 0x8051;
GL_RGB10                          : u32 : 0x8052;
GL_RGB12                          : u32 : 0x8053;
GL_RGB16                          : u32 : 0x8054;
GL_RGBA2                          : u32 : 0x8055;
GL_RGBA4                          : u32 : 0x8056;
GL_RGB5_A1                        : u32 : 0x8057;
GL_RGBA8                          : u32 : 0x8058;
GL_RGB10_A2                       : u32 : 0x8059;
GL_RGBA12                         : u32 : 0x805A;
GL_RGBA16                         : u32 : 0x805B;
GL_VERTEX_ARRAY                   : u32 : 0x8074;
/* GL_VERSION_1_1 */

// #ifndef GL_VERSION_1_2
// #define GL_VERSION_1_2 1
GL_UNSIGNED_BYTE_3_3_2            : u32 : 0x8032;
GL_UNSIGNED_SHORT_4_4_4_4         : u32 : 0x8033;
GL_UNSIGNED_SHORT_5_5_5_1         : u32 : 0x8034;
GL_UNSIGNED_INT_8_8_8_8           : u32 : 0x8035;
GL_UNSIGNED_INT_10_10_10_2        : u32 : 0x8036;
GL_TEXTURE_BINDING_3D             : u32 : 0x806A;
GL_PACK_SKIP_IMAGES               : u32 : 0x806B;
GL_PACK_IMAGE_HEIGHT              : u32 : 0x806C;
GL_UNPACK_SKIP_IMAGES             : u32 : 0x806D;
GL_UNPACK_IMAGE_HEIGHT            : u32 : 0x806E;
GL_TEXTURE_3D                     : u32 : 0x806F;
GL_PROXY_TEXTURE_3D               : u32 : 0x8070;
GL_TEXTURE_DEPTH                  : u32 : 0x8071;
GL_TEXTURE_WRAP_R                 : u32 : 0x8072;
GL_MAX_3D_TEXTURE_SIZE            : u32 : 0x8073;
GL_UNSIGNED_BYTE_2_3_3_REV        : u32 : 0x8362;
GL_UNSIGNED_SHORT_5_6_5           : u32 : 0x8363;
GL_UNSIGNED_SHORT_5_6_5_REV       : u32 : 0x8364;
GL_UNSIGNED_SHORT_4_4_4_4_REV     : u32 : 0x8365;
GL_UNSIGNED_SHORT_1_5_5_5_REV     : u32 : 0x8366;
GL_UNSIGNED_INT_8_8_8_8_REV       : u32 : 0x8367;
GL_UNSIGNED_INT_2_10_10_10_REV    : u32 : 0x8368;
GL_BGR                            : u32 : 0x80E0;
GL_BGRA                           : u32 : 0x80E1;
GL_MAX_ELEMENTS_VERTICES          : u32 : 0x80E8;
GL_MAX_ELEMENTS_INDICES           : u32 : 0x80E9;
GL_CLAMP_TO_EDGE                  : u32 : 0x812F;
GL_TEXTURE_MIN_LOD                : u32 : 0x813A;
GL_TEXTURE_MAX_LOD                : u32 : 0x813B;
GL_TEXTURE_BASE_LEVEL             : u32 : 0x813C;
GL_TEXTURE_MAX_LEVEL              : u32 : 0x813D;
GL_SMOOTH_POINT_SIZE_RANGE        : u32 : 0x0B12;
GL_SMOOTH_POINT_SIZE_GRANULARITY  : u32 : 0x0B13;
GL_SMOOTH_LINE_WIDTH_RANGE        : u32 : 0x0B22;
GL_SMOOTH_LINE_WIDTH_GRANULARITY  : u32 : 0x0B23;
GL_ALIASED_LINE_WIDTH_RANGE       : u32 : 0x846E;
/* GL_VERSION_1_2 */

//#ifndef GL_VERSION_1_3
//#define GL_VERSION_1_3 1
GL_TEXTURE0                        : u32 : 0x84C0;
GL_TEXTURE1                        : u32 : 0x84C1;
GL_TEXTURE2                        : u32 : 0x84C2;
GL_TEXTURE3                        : u32 : 0x84C3;
GL_TEXTURE4                        : u32 : 0x84C4;
GL_TEXTURE5                        : u32 : 0x84C5;
GL_TEXTURE6                        : u32 : 0x84C6;
GL_TEXTURE7                        : u32 : 0x84C7;
GL_TEXTURE8                        : u32 : 0x84C8;
GL_TEXTURE9                        : u32 : 0x84C9;
GL_TEXTURE10                       : u32 : 0x84CA;
GL_TEXTURE11                       : u32 : 0x84CB;
GL_TEXTURE12                       : u32 : 0x84CC;
GL_TEXTURE13                       : u32 : 0x84CD;
GL_TEXTURE14                       : u32 : 0x84CE;
GL_TEXTURE15                       : u32 : 0x84CF;
GL_TEXTURE16                       : u32 : 0x84D0;
GL_TEXTURE17                       : u32 : 0x84D1;
GL_TEXTURE18                       : u32 : 0x84D2;
GL_TEXTURE19                       : u32 : 0x84D3;
GL_TEXTURE20                       : u32 : 0x84D4;
GL_TEXTURE21                       : u32 : 0x84D5;
GL_TEXTURE22                       : u32 : 0x84D6;
GL_TEXTURE23                       : u32 : 0x84D7;
GL_TEXTURE24                       : u32 : 0x84D8;
GL_TEXTURE25                       : u32 : 0x84D9;
GL_TEXTURE26                       : u32 : 0x84DA;
GL_TEXTURE27                       : u32 : 0x84DB;
GL_TEXTURE28                       : u32 : 0x84DC;
GL_TEXTURE29                       : u32 : 0x84DD;
GL_TEXTURE30                       : u32 : 0x84DE;
GL_TEXTURE31                       : u32 : 0x84DF;
GL_ACTIVE_TEXTURE                  : u32 : 0x84E0;
GL_MULTISAMPLE                     : u32 : 0x809D;
GL_SAMPLE_ALPHA_TO_COVERAGE        : u32 : 0x809E;
GL_SAMPLE_ALPHA_TO_ONE             : u32 : 0x809F;
GL_SAMPLE_COVERAGE                 : u32 : 0x80A0;
GL_SAMPLE_BUFFERS                  : u32 : 0x80A8;
GL_SAMPLES                         : u32 : 0x80A9;
GL_SAMPLE_COVERAGE_VALUE           : u32 : 0x80AA;
GL_SAMPLE_COVERAGE_INVERT          : u32 : 0x80AB;
GL_TEXTURE_CUBE_MAP                : u32 : 0x8513;
GL_TEXTURE_BINDING_CUBE_MAP        : u32 : 0x8514;
GL_TEXTURE_CUBE_MAP_POSITIVE_X     : u32 : 0x8515;
GL_TEXTURE_CUBE_MAP_NEGATIVE_X     : u32 : 0x8516;
GL_TEXTURE_CUBE_MAP_POSITIVE_Y     : u32 : 0x8517;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y     : u32 : 0x8518;
GL_TEXTURE_CUBE_MAP_POSITIVE_Z     : u32 : 0x8519;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z     : u32 : 0x851A;
GL_PROXY_TEXTURE_CUBE_MAP          : u32 : 0x851B;
GL_MAX_CUBE_MAP_TEXTURE_SIZE       : u32 : 0x851C;
GL_COMPRESSED_RGB                  : u32 : 0x84ED;
GL_COMPRESSED_RGBA                 : u32 : 0x84EE;
GL_TEXTURE_COMPRESSION_HINT        : u32 : 0x84EF;
GL_TEXTURE_COMPRESSED_IMAGE_SIZE   : u32 : 0x86A0;
GL_TEXTURE_COMPRESSED              : u32 : 0x86A1;
GL_NUM_COMPRESSED_TEXTURE_FORMATS  : u32 : 0x86A2;
GL_COMPRESSED_TEXTURE_FORMATS      : u32 : 0x86A3;
GL_CLAMP_TO_BORDER                 : u32 : 0x812D;
/* GL_VERSION_1_3 */

//#ifndef GL_VERSION_1_4
//#define GL_VERSION_1_4 1
GL_BLEND_DST_RGB                  : u32 : 0x80C8;
GL_BLEND_SRC_RGB                  : u32 : 0x80C9;
GL_BLEND_DST_ALPHA                : u32 : 0x80CA;
GL_BLEND_SRC_ALPHA                : u32 : 0x80CB;
GL_POINT_FADE_THRESHOLD_SIZE      : u32 : 0x8128;
GL_DEPTH_COMPONENT16              : u32 : 0x81A5;
GL_DEPTH_COMPONENT24              : u32 : 0x81A6;
GL_DEPTH_COMPONENT32              : u32 : 0x81A7;
GL_MIRRORED_REPEAT                : u32 : 0x8370;
GL_MAX_TEXTURE_LOD_BIAS           : u32 : 0x84FD;
GL_TEXTURE_LOD_BIAS               : u32 : 0x8501;
GL_INCR_WRAP                      : u32 : 0x8507;
GL_DECR_WRAP                      : u32 : 0x8508;
GL_TEXTURE_DEPTH_SIZE             : u32 : 0x884A;
GL_TEXTURE_COMPARE_MODE           : u32 : 0x884C;
GL_TEXTURE_COMPARE_FUNC           : u32 : 0x884D;
GL_BLEND_COLOR                    : u32 : 0x8005;
GL_BLEND_EQUATION                 : u32 : 0x8009;
GL_CONSTANT_COLOR                 : u32 : 0x8001;
GL_ONE_MINUS_CONSTANT_COLOR       : u32 : 0x8002;
GL_CONSTANT_ALPHA                 : u32 : 0x8003;
GL_ONE_MINUS_CONSTANT_ALPHA       : u32 : 0x8004;
GL_FUNC_ADD                       : u32 : 0x8006;
GL_FUNC_REVERSE_SUBTRACT          : u32 : 0x800B;
GL_FUNC_SUBTRACT                  : u32 : 0x800A;
GL_MIN                            : u32 : 0x8007;
GL_MAX                            : u32 : 0x8008;
/* GL_VERSION_1_4 */

//#ifndef GL_VERSION_1_5
//#define GL_VERSION_1_5 1
GLsizeiptr s64;
GLintptr   s64;
GL_BUFFER_SIZE                     : u32 : 0x8764;
GL_BUFFER_USAGE                    : u32 : 0x8765;
GL_QUERY_COUNTER_BITS              : u32 : 0x8864;
GL_CURRENT_QUERY                   : u32 : 0x8865;
GL_QUERY_RESULT                    : u32 : 0x8866;
GL_QUERY_RESULT_AVAILABLE          : u32 : 0x8867;
GL_ARRAY_BUFFER                    : u32 : 0x8892;
GL_ELEMENT_ARRAY_BUFFER            : u32 : 0x8893;
GL_ARRAY_BUFFER_BINDING            : u32 : 0x8894;
GL_ELEMENT_ARRAY_BUFFER_BINDING    : u32 : 0x8895;
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING  : u32 : 0x889F;
GL_READ_ONLY                       : u32 : 0x88B8;
GL_WRITE_ONLY                      : u32 : 0x88B9;
GL_READ_WRITE                      : u32 : 0x88BA;
GL_BUFFER_ACCESS                   : u32 : 0x88BB;
GL_BUFFER_MAPPED                   : u32 : 0x88BC;
GL_BUFFER_MAP_POINTER              : u32 : 0x88BD;
GL_STREAM_DRAW                     : u32 : 0x88E0;
GL_STREAM_READ                     : u32 : 0x88E1;
GL_STREAM_COPY                     : u32 : 0x88E2;
GL_STATIC_DRAW                     : u32 : 0x88E4;
GL_STATIC_READ                     : u32 : 0x88E5;
GL_STATIC_COPY                     : u32 : 0x88E6;
GL_DYNAMIC_DRAW                    : u32 : 0x88E8;
GL_DYNAMIC_READ                    : u32 : 0x88E9;
GL_DYNAMIC_COPY                    : u32 : 0x88EA;
GL_SAMPLES_PASSED                  : u32 : 0x8914;
GL_SRC1_ALPHA                      : u32 : 0x8589;
/* GL_VERSION_1_5 */

//#ifndef GL_VERSION_2_0
//#define GL_VERSION_2_0 1
GLchar s8;
GLshort s16;
GLbyte s8;
GLushort u16;
GL_BLEND_EQUATION_RGB              : u32 : 0x8009;
GL_VERTEX_ATTRIB_ARRAY_ENABLED     : u32 : 0x8622;
GL_VERTEX_ATTRIB_ARRAY_SIZE        : u32 : 0x8623;
GL_VERTEX_ATTRIB_ARRAY_STRIDE      : u32 : 0x8624;
GL_VERTEX_ATTRIB_ARRAY_TYPE        : u32 : 0x8625;
GL_CURRENT_VERTEX_ATTRIB           : u32 : 0x8626;
GL_VERTEX_PROGRAM_POINT_SIZE       : u32 : 0x8642;
GL_VERTEX_ATTRIB_ARRAY_POINTER     : u32 : 0x8645;
GL_STENCIL_BACK_FUNC               : u32 : 0x8800;
GL_STENCIL_BACK_FAIL               : u32 : 0x8801;
GL_STENCIL_BACK_PASS_DEPTH_FAIL    : u32 : 0x8802;
GL_STENCIL_BACK_PASS_DEPTH_PASS    : u32 : 0x8803;
GL_MAX_DRAW_BUFFERS                : u32 : 0x8824;
GL_DRAW_BUFFER0                    : u32 : 0x8825;
GL_DRAW_BUFFER1                    : u32 : 0x8826;
GL_DRAW_BUFFER2                    : u32 : 0x8827;
GL_DRAW_BUFFER3                    : u32 : 0x8828;
GL_DRAW_BUFFER4                    : u32 : 0x8829;
GL_DRAW_BUFFER5                    : u32 : 0x882A;
GL_DRAW_BUFFER6                    : u32 : 0x882B;
GL_DRAW_BUFFER7                    : u32 : 0x882C;
GL_DRAW_BUFFER8                    : u32 : 0x882D;
GL_DRAW_BUFFER9                    : u32 : 0x882E;
GL_DRAW_BUFFER10                   : u32 : 0x882F;
GL_DRAW_BUFFER11                   : u32 : 0x8830;
GL_DRAW_BUFFER12                   : u32 : 0x8831;
GL_DRAW_BUFFER13                   : u32 : 0x8832;
GL_DRAW_BUFFER14                   : u32 : 0x8833;
GL_DRAW_BUFFER15                   : u32 : 0x8834;
GL_BLEND_EQUATION_ALPHA            : u32 : 0x883D;
GL_MAX_VERTEX_ATTRIBS              : u32 : 0x8869;
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED  : u32 : 0x886A;
GL_MAX_TEXTURE_IMAGE_UNITS         : u32 : 0x8872;
GL_FRAGMENT_SHADER                 : u32 : 0x8B30;
GL_VERTEX_SHADER                   : u32 : 0x8B31;
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS  : u32 : 0x8B49;
GL_MAX_VERTEX_UNIFORM_COMPONENTS   : u32 : 0x8B4A;
GL_MAX_VARYING_FLOATS              : u32 : 0x8B4B;
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS  : u32 : 0x8B4C;
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS  : u32 : 0x8B4D;
GL_SHADER_TYPE                     : u32 : 0x8B4F;
GL_FLOAT_VEC2                      : u32 : 0x8B50;
GL_FLOAT_VEC3                      : u32 : 0x8B51;
GL_FLOAT_VEC4                      : u32 : 0x8B52;
GL_INT_VEC2                        : u32 : 0x8B53;
GL_INT_VEC3                        : u32 : 0x8B54;
GL_INT_VEC4                        : u32 : 0x8B55;
GL_BOOL                            : u32 : 0x8B56;
GL_BOOL_VEC2                       : u32 : 0x8B57;
GL_BOOL_VEC3                       : u32 : 0x8B58;
GL_BOOL_VEC4                       : u32 : 0x8B59;
GL_FLOAT_MAT2                      : u32 : 0x8B5A;
GL_FLOAT_MAT3                      : u32 : 0x8B5B;
GL_FLOAT_MAT4                      : u32 : 0x8B5C;
GL_SAMPLER_1D                      : u32 : 0x8B5D;
GL_SAMPLER_2D                      : u32 : 0x8B5E;
GL_SAMPLER_3D                      : u32 : 0x8B5F;
GL_SAMPLER_CUBE                    : u32 : 0x8B60;
GL_SAMPLER_1D_SHADOW               : u32 : 0x8B61;
GL_SAMPLER_2D_SHADOW               : u32 : 0x8B62;
GL_DELETE_STATUS                   : u32 : 0x8B80;
GL_COMPILE_STATUS                  : u32 : 0x8B81;
GL_LINK_STATUS                     : u32 : 0x8B82;
GL_VALIDATE_STATUS                 : u32 : 0x8B83;
GL_INFO_LOG_LENGTH                 : u32 : 0x8B84;
GL_ATTACHED_SHADERS                : u32 : 0x8B85;
GL_ACTIVE_UNIFORMS                 : u32 : 0x8B86;
GL_ACTIVE_UNIFORM_MAX_LENGTH       : u32 : 0x8B87;
GL_SHADER_SOURCE_LENGTH            : u32 : 0x8B88;
GL_ACTIVE_ATTRIBUTES               : u32 : 0x8B89;
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH     : u32 : 0x8B8A;
GL_FRAGMENT_SHADER_DERIVATIVE_HINT  : u32 : 0x8B8B;
GL_SHADING_LANGUAGE_VERSION        : u32 : 0x8B8C;
GL_CURRENT_PROGRAM                 : u32 : 0x8B8D;
GL_POINT_SPRITE_COORD_ORIGIN       : u32 : 0x8CA0;
GL_LOWER_LEFT                      : u32 : 0x8CA1;
GL_UPPER_LEFT                      : u32 : 0x8CA2;
GL_STENCIL_BACK_REF                : u32 : 0x8CA3;
GL_STENCIL_BACK_VALUE_MASK         : u32 : 0x8CA4;
GL_STENCIL_BACK_WRITEMASK          : u32 : 0x8CA5;
/* GL_VERSION_2_0 */


//#ifndef GL_VERSION_2_1
//#define GL_VERSION_2_1 1
GL_PIXEL_PACK_BUFFER              : u32 : 0x88EB;
GL_PIXEL_UNPACK_BUFFER            : u32 : 0x88EC;
GL_PIXEL_PACK_BUFFER_BINDING      : u32 : 0x88ED;
GL_PIXEL_UNPACK_BUFFER_BINDING    : u32 : 0x88EF;
GL_FLOAT_MAT2x3                   : u32 : 0x8B65;
GL_FLOAT_MAT2x4                   : u32 : 0x8B66;
GL_FLOAT_MAT3x2                   : u32 : 0x8B67;
GL_FLOAT_MAT3x4                   : u32 : 0x8B68;
GL_FLOAT_MAT4x2                   : u32 : 0x8B69;
GL_FLOAT_MAT4x3                   : u32 : 0x8B6A;
GL_SRGB                           : u32 : 0x8C40;
GL_SRGB8                          : u32 : 0x8C41;
GL_SRGB_ALPHA                     : u32 : 0x8C42;
GL_SRGB8_ALPHA8                   : u32 : 0x8C43;
GL_COMPRESSED_SRGB                : u32 : 0x8C48;
GL_COMPRESSED_SRGB_ALPHA          : u32 : 0x8C49;
/* GL_VERSION_2_1 */


//#ifndef GL_VERSION_3_0
//#define GL_VERSION_3_0 1
GLhalf u16;
GL_COMPARE_REF_TO_TEXTURE         : u32 : 0x884E;
GL_CLIP_DISTANCE0                 : u32 : 0x3000;
GL_CLIP_DISTANCE1                 : u32 : 0x3001;
GL_CLIP_DISTANCE2                 : u32 : 0x3002;
GL_CLIP_DISTANCE3                 : u32 : 0x3003;
GL_CLIP_DISTANCE4                 : u32 : 0x3004;
GL_CLIP_DISTANCE5                 : u32 : 0x3005;
GL_CLIP_DISTANCE6                 : u32 : 0x3006;
GL_CLIP_DISTANCE7                 : u32 : 0x3007;
GL_MAX_CLIP_DISTANCES             : u32 : 0x0D32;
GL_MAJOR_VERSION                  : u32 : 0x821B;
GL_MINOR_VERSION                  : u32 : 0x821C;
GL_NUM_EXTENSIONS                 : u32 : 0x821D;
GL_CONTEXT_FLAGS                  : u32 : 0x821E;
GL_COMPRESSED_RED                 : u32 : 0x8225;
GL_COMPRESSED_RG                  : u32 : 0x8226;
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT : u32 : 0x00000001;
GL_RGBA32F                        : u32 : 0x8814;
GL_RGB32F                         : u32 : 0x8815;
GL_RGBA16F                        : u32 : 0x881A;
GL_RGB16F                         : u32 : 0x881B;
GL_VERTEX_ATTRIB_ARRAY_INTEGER    : u32 : 0x88FD;
GL_MAX_ARRAY_TEXTURE_LAYERS       : u32 : 0x88FF;
GL_MIN_PROGRAM_TEXEL_OFFSET       : u32 : 0x8904;
GL_MAX_PROGRAM_TEXEL_OFFSET       : u32 : 0x8905;
GL_CLAMP_READ_COLOR               : u32 : 0x891C;
GL_FIXED_ONLY                     : u32 : 0x891D;
GL_MAX_VARYING_COMPONENTS         : u32 : 0x8B4B;
GL_TEXTURE_1D_ARRAY               : u32 : 0x8C18;
GL_PROXY_TEXTURE_1D_ARRAY         : u32 : 0x8C19;
GL_TEXTURE_2D_ARRAY               : u32 : 0x8C1A;
GL_PROXY_TEXTURE_2D_ARRAY         : u32 : 0x8C1B;
GL_TEXTURE_BINDING_1D_ARRAY       : u32 : 0x8C1C;
GL_TEXTURE_BINDING_2D_ARRAY       : u32 : 0x8C1D;
GL_R11F_G11F_B10F                 : u32 : 0x8C3A;
GL_UNSIGNED_INT_10F_11F_11F_REV   : u32 : 0x8C3B;
GL_RGB9_E5                        : u32 : 0x8C3D;
GL_UNSIGNED_INT_5_9_9_9_REV       : u32 : 0x8C3E;
GL_TEXTURE_SHARED_SIZE            : u32 : 0x8C3F;
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH : u32 : 0x8C76;
GL_TRANSFORM_FEEDBACK_BUFFER_MODE : u32 : 0x8C7F;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : u32 : 0x8C80;
GL_TRANSFORM_FEEDBACK_VARYINGS    : u32 : 0x8C83;
GL_TRANSFORM_FEEDBACK_BUFFER_START : u32 : 0x8C84;
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE : u32 : 0x8C85;
GL_PRIMITIVES_GENERATED           : u32 : 0x8C87;
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : u32 : 0x8C88;
GL_RASTERIZER_DISCARD             : u32 : 0x8C89;
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS : u32 : 0x8C8A;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS : u32 : 0x8C8B;
GL_INTERLEAVED_ATTRIBS            : u32 : 0x8C8C;
GL_SEPARATE_ATTRIBS               : u32 : 0x8C8D;
GL_TRANSFORM_FEEDBACK_BUFFER      : u32 : 0x8C8E;
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING : u32 : 0x8C8F;
GL_RGBA32UI                       : u32 : 0x8D70;
GL_RGB32UI                        : u32 : 0x8D71;
GL_RGBA16UI                       : u32 : 0x8D76;
GL_RGB16UI                        : u32 : 0x8D77;
GL_RGBA8UI                        : u32 : 0x8D7C;
GL_RGB8UI                         : u32 : 0x8D7D;
GL_RGBA32I                        : u32 : 0x8D82;
GL_RGB32I                         : u32 : 0x8D83;
GL_RGBA16I                        : u32 : 0x8D88;
GL_RGB16I                         : u32 : 0x8D89;
GL_RGBA8I                         : u32 : 0x8D8E;
GL_RGB8I                          : u32 : 0x8D8F;
GL_RED_INTEGER                    : u32 : 0x8D94;
GL_GREEN_INTEGER                  : u32 : 0x8D95;
GL_BLUE_INTEGER                   : u32 : 0x8D96;
GL_RGB_INTEGER                    : u32 : 0x8D98;
GL_RGBA_INTEGER                   : u32 : 0x8D99;
GL_BGR_INTEGER                    : u32 : 0x8D9A;
GL_BGRA_INTEGER                   : u32 : 0x8D9B;
GL_SAMPLER_1D_ARRAY               : u32 : 0x8DC0;
GL_SAMPLER_2D_ARRAY               : u32 : 0x8DC1;
GL_SAMPLER_1D_ARRAY_SHADOW        : u32 : 0x8DC3;
GL_SAMPLER_2D_ARRAY_SHADOW        : u32 : 0x8DC4;
GL_SAMPLER_CUBE_SHADOW            : u32 : 0x8DC5;
GL_UNSIGNED_INT_VEC2              : u32 : 0x8DC6;
GL_UNSIGNED_INT_VEC3              : u32 : 0x8DC7;
GL_UNSIGNED_INT_VEC4              : u32 : 0x8DC8;
GL_INT_SAMPLER_1D                 : u32 : 0x8DC9;
GL_INT_SAMPLER_2D                 : u32 : 0x8DCA;
GL_INT_SAMPLER_3D                 : u32 : 0x8DCB;
GL_INT_SAMPLER_CUBE               : u32 : 0x8DCC;
GL_INT_SAMPLER_1D_ARRAY           : u32 : 0x8DCE;
GL_INT_SAMPLER_2D_ARRAY           : u32 : 0x8DCF;
GL_UNSIGNED_INT_SAMPLER_1D        : u32 : 0x8DD1;
GL_UNSIGNED_INT_SAMPLER_2D        : u32 : 0x8DD2;
GL_UNSIGNED_INT_SAMPLER_3D        : u32 : 0x8DD3;
GL_UNSIGNED_INT_SAMPLER_CUBE      : u32 : 0x8DD4;
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY  : u32 : 0x8DD6;
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  : u32 : 0x8DD7;
GL_QUERY_WAIT                     : u32 : 0x8E13;
GL_QUERY_NO_WAIT                  : u32 : 0x8E14;
GL_QUERY_BY_REGION_WAIT           : u32 : 0x8E15;
GL_QUERY_BY_REGION_NO_WAIT        : u32 : 0x8E16;
GL_BUFFER_ACCESS_FLAGS            : u32 : 0x911F;
GL_BUFFER_MAP_LENGTH              : u32 : 0x9120;
GL_BUFFER_MAP_OFFSET              : u32 : 0x9121;
GL_DEPTH_COMPONENT32F             : u32 : 0x8CAC;
GL_DEPTH32F_STENCIL8              : u32 : 0x8CAD;
GL_FLOAT_32_UNSIGNED_INT_24_8_REV : u32 : 0x8DAD;
GL_INVALID_FRAMEBUFFER_OPERATION  : u32 : 0x0506;
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : u32 : 0x8210;
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : u32 : 0x8211;
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE : u32 : 0x8212;
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : u32 : 0x8213;
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : u32 : 0x8214;
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : u32 : 0x8215;
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : u32 : 0x8216;
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : u32 : 0x8217;
GL_FRAMEBUFFER_DEFAULT            : u32 : 0x8218;
GL_FRAMEBUFFER_UNDEFINED          : u32 : 0x8219;
GL_DEPTH_STENCIL_ATTACHMENT       : u32 : 0x821A;
GL_MAX_RENDERBUFFER_SIZE          : u32 : 0x84E8;
GL_DEPTH_STENCIL                  : u32 : 0x84F9;
GL_UNSIGNED_INT_24_8              : u32 : 0x84FA;
GL_DEPTH24_STENCIL8               : u32 : 0x88F0;
GL_TEXTURE_STENCIL_SIZE           : u32 : 0x88F1;
GL_TEXTURE_RED_TYPE               : u32 : 0x8C10;
GL_TEXTURE_GREEN_TYPE             : u32 : 0x8C11;
GL_TEXTURE_BLUE_TYPE              : u32 : 0x8C12;
GL_TEXTURE_ALPHA_TYPE             : u32 : 0x8C13;
GL_TEXTURE_DEPTH_TYPE             : u32 : 0x8C16;
GL_UNSIGNED_NORMALIZED            : u32 : 0x8C17;
GL_FRAMEBUFFER_BINDING            : u32 : 0x8CA6;
GL_DRAW_FRAMEBUFFER_BINDING       : u32 : 0x8CA6;
GL_RENDERBUFFER_BINDING           : u32 : 0x8CA7;
GL_READ_FRAMEBUFFER               : u32 : 0x8CA8;
GL_DRAW_FRAMEBUFFER               : u32 : 0x8CA9;
GL_READ_FRAMEBUFFER_BINDING       : u32 : 0x8CAA;
GL_RENDERBUFFER_SAMPLES           : u32 : 0x8CAB;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : u32 : 0x8CD0;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : u32 : 0x8CD1;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : u32 : 0x8CD2;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : u32 : 0x8CD3;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : u32 : 0x8CD4;
GL_FRAMEBUFFER_COMPLETE           : u32 : 0x8CD5;
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : u32 : 0x8CD6;
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : u32 : 0x8CD7;
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER : u32 : 0x8CDB;
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER : u32 : 0x8CDC;
GL_FRAMEBUFFER_UNSUPPORTED        : u32 : 0x8CDD;
GL_MAX_COLOR_ATTACHMENTS          : u32 : 0x8CDF;
GL_COLOR_ATTACHMENT0              : u32 : 0x8CE0;
GL_COLOR_ATTACHMENT1              : u32 : 0x8CE1;
GL_COLOR_ATTACHMENT2              : u32 : 0x8CE2;
GL_COLOR_ATTACHMENT3              : u32 : 0x8CE3;
GL_COLOR_ATTACHMENT4              : u32 : 0x8CE4;
GL_COLOR_ATTACHMENT5              : u32 : 0x8CE5;
GL_COLOR_ATTACHMENT6              : u32 : 0x8CE6;
GL_COLOR_ATTACHMENT7              : u32 : 0x8CE7;
GL_COLOR_ATTACHMENT8              : u32 : 0x8CE8;
GL_COLOR_ATTACHMENT9              : u32 : 0x8CE9;
GL_COLOR_ATTACHMENT10             : u32 : 0x8CEA;
GL_COLOR_ATTACHMENT11             : u32 : 0x8CEB;
GL_COLOR_ATTACHMENT12             : u32 : 0x8CEC;
GL_COLOR_ATTACHMENT13             : u32 : 0x8CED;
GL_COLOR_ATTACHMENT14             : u32 : 0x8CEE;
GL_COLOR_ATTACHMENT15             : u32 : 0x8CEF;
GL_COLOR_ATTACHMENT16             : u32 : 0x8CF0;
GL_COLOR_ATTACHMENT17             : u32 : 0x8CF1;
GL_COLOR_ATTACHMENT18             : u32 : 0x8CF2;
GL_COLOR_ATTACHMENT19             : u32 : 0x8CF3;
GL_COLOR_ATTACHMENT20             : u32 : 0x8CF4;
GL_COLOR_ATTACHMENT21             : u32 : 0x8CF5;
GL_COLOR_ATTACHMENT22             : u32 : 0x8CF6;
GL_COLOR_ATTACHMENT23             : u32 : 0x8CF7;
GL_COLOR_ATTACHMENT24             : u32 : 0x8CF8;
GL_COLOR_ATTACHMENT25             : u32 : 0x8CF9;
GL_COLOR_ATTACHMENT26             : u32 : 0x8CFA;
GL_COLOR_ATTACHMENT27             : u32 : 0x8CFB;
GL_COLOR_ATTACHMENT28             : u32 : 0x8CFC;
GL_COLOR_ATTACHMENT29             : u32 : 0x8CFD;
GL_COLOR_ATTACHMENT30             : u32 : 0x8CFE;
GL_COLOR_ATTACHMENT31             : u32 : 0x8CFF;
GL_DEPTH_ATTACHMENT               : u32 : 0x8D00;
GL_STENCIL_ATTACHMENT             : u32 : 0x8D20;
GL_FRAMEBUFFER                    : u32 : 0x8D40;
GL_RENDERBUFFER                   : u32 : 0x8D41;
GL_RENDERBUFFER_WIDTH             : u32 : 0x8D42;
GL_RENDERBUFFER_HEIGHT            : u32 : 0x8D43;
GL_RENDERBUFFER_INTERNAL_FORMAT   : u32 : 0x8D44;
GL_STENCIL_INDEX1                 : u32 : 0x8D46;
GL_STENCIL_INDEX4                 : u32 : 0x8D47;
GL_STENCIL_INDEX8                 : u32 : 0x8D48;
GL_STENCIL_INDEX16                : u32 : 0x8D49;
GL_RENDERBUFFER_RED_SIZE          : u32 : 0x8D50;
GL_RENDERBUFFER_GREEN_SIZE        : u32 : 0x8D51;
GL_RENDERBUFFER_BLUE_SIZE         : u32 : 0x8D52;
GL_RENDERBUFFER_ALPHA_SIZE        : u32 : 0x8D53;
GL_RENDERBUFFER_DEPTH_SIZE        : u32 : 0x8D54;
GL_RENDERBUFFER_STENCIL_SIZE      : u32 : 0x8D55;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : u32 : 0x8D56;
GL_MAX_SAMPLES                    : u32 : 0x8D57;
GL_FRAMEBUFFER_SRGB               : u32 : 0x8DB9;
GL_HALF_FLOAT                     : u32 : 0x140B;
GL_MAP_READ_BIT                   : u32 : 0x0001;
GL_MAP_WRITE_BIT                  : u32 : 0x0002;
GL_MAP_INVALIDATE_RANGE_BIT       : u32 : 0x0004;
GL_MAP_INVALIDATE_BUFFER_BIT      : u32 : 0x0008;
GL_MAP_FLUSH_EXPLICIT_BIT         : u32 : 0x0010;
GL_MAP_UNSYNCHRONIZED_BIT         : u32 : 0x0020;
GL_COMPRESSED_RED_RGTC1           : u32 : 0x8DBB;
GL_COMPRESSED_SIGNED_RED_RGTC1    : u32 : 0x8DBC;
GL_COMPRESSED_RG_RGTC2            : u32 : 0x8DBD;
GL_COMPRESSED_SIGNED_RG_RGTC2     : u32 : 0x8DBE;
GL_RG                             : u32 : 0x8227;
GL_RG_INTEGER                     : u32 : 0x8228;
GL_R8                             : u32 : 0x8229;
GL_R16                            : u32 : 0x822A;
GL_RG8                            : u32 : 0x822B;
GL_RG16                           : u32 : 0x822C;
GL_R16F                           : u32 : 0x822D;
GL_R32F                           : u32 : 0x822E;
GL_RG16F                          : u32 : 0x822F;
GL_RG32F                          : u32 : 0x8230;
GL_R8I                            : u32 : 0x8231;
GL_R8UI                           : u32 : 0x8232;
GL_R16I                           : u32 : 0x8233;
GL_R16UI                          : u32 : 0x8234;
GL_R32I                           : u32 : 0x8235;
GL_R32UI                          : u32 : 0x8236;
GL_RG8I                           : u32 : 0x8237;
GL_RG8UI                          : u32 : 0x8238;
GL_RG16I                          : u32 : 0x8239;
GL_RG16UI                         : u32 : 0x823A;
GL_RG32I                          : u32 : 0x823B;
GL_RG32UI                         : u32 : 0x823C;
GL_VERTEX_ARRAY_BINDING           : u32 : 0x85B5;
/* GL_VERSION_3_0 */


//#ifndef GL_VERSION_3_1
//#define GL_VERSION_3_1 1
GL_SAMPLER_2D_RECT                 : u32 : 0x8B63;
GL_SAMPLER_2D_RECT_SHADOW          : u32 : 0x8B64;
GL_SAMPLER_BUFFER                  : u32 : 0x8DC2;
GL_INT_SAMPLER_2D_RECT             : u32 : 0x8DCD;
GL_INT_SAMPLER_BUFFER              : u32 : 0x8DD0;
GL_UNSIGNED_INT_SAMPLER_2D_RECT    : u32 : 0x8DD5;
GL_UNSIGNED_INT_SAMPLER_BUFFER     : u32 : 0x8DD8;
GL_TEXTURE_BUFFER                  : u32 : 0x8C2A;
GL_MAX_TEXTURE_BUFFER_SIZE         : u32 : 0x8C2B;
GL_TEXTURE_BINDING_BUFFER          : u32 : 0x8C2C;
GL_TEXTURE_BUFFER_DATA_STORE_BINDING  : u32 : 0x8C2D;
GL_TEXTURE_RECTANGLE               : u32 : 0x84F5;
GL_TEXTURE_BINDING_RECTANGLE       : u32 : 0x84F6;
GL_PROXY_TEXTURE_RECTANGLE         : u32 : 0x84F7;
GL_MAX_RECTANGLE_TEXTURE_SIZE      : u32 : 0x84F8;
GL_R8_SNORM                        : u32 : 0x8F94;
GL_RG8_SNORM                       : u32 : 0x8F95;
GL_RGB8_SNORM                      : u32 : 0x8F96;
GL_RGBA8_SNORM                     : u32 : 0x8F97;
GL_R16_SNORM                       : u32 : 0x8F98;
GL_RG16_SNORM                      : u32 : 0x8F99;
GL_RGB16_SNORM                     : u32 : 0x8F9A;
GL_RGBA16_SNORM                    : u32 : 0x8F9B;
GL_SIGNED_NORMALIZED               : u32 : 0x8F9C;
GL_PRIMITIVE_RESTART               : u32 : 0x8F9D;
GL_PRIMITIVE_RESTART_INDEX         : u32 : 0x8F9E;
GL_COPY_READ_BUFFER                : u32 : 0x8F36;
GL_COPY_WRITE_BUFFER               : u32 : 0x8F37;
GL_UNIFORM_BUFFER                  : u32 : 0x8A11;
GL_UNIFORM_BUFFER_BINDING          : u32 : 0x8A28;
GL_UNIFORM_BUFFER_START            : u32 : 0x8A29;
GL_UNIFORM_BUFFER_SIZE             : u32 : 0x8A2A;
GL_MAX_VERTEX_UNIFORM_BLOCKS       : u32 : 0x8A2B;
GL_MAX_GEOMETRY_UNIFORM_BLOCKS     : u32 : 0x8A2C;
GL_MAX_FRAGMENT_UNIFORM_BLOCKS     : u32 : 0x8A2D;
GL_MAX_COMBINED_UNIFORM_BLOCKS     : u32 : 0x8A2E;
GL_MAX_UNIFORM_BUFFER_BINDINGS     : u32 : 0x8A2F;
GL_MAX_UNIFORM_BLOCK_SIZE          : u32 : 0x8A30;
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS  : u32 : 0x8A31;
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS  : u32 : 0x8A32;
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS  : u32 : 0x8A33;
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT  : u32 : 0x8A34;
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH  : u32 : 0x8A35;
GL_ACTIVE_UNIFORM_BLOCKS           : u32 : 0x8A36;
GL_UNIFORM_TYPE                    : u32 : 0x8A37;
GL_UNIFORM_SIZE                    : u32 : 0x8A38;
GL_UNIFORM_NAME_LENGTH             : u32 : 0x8A39;
GL_UNIFORM_BLOCK_INDEX             : u32 : 0x8A3A;
GL_UNIFORM_OFFSET                  : u32 : 0x8A3B;
GL_UNIFORM_ARRAY_STRIDE            : u32 : 0x8A3C;
GL_UNIFORM_MATRIX_STRIDE           : u32 : 0x8A3D;
GL_UNIFORM_IS_ROW_MAJOR            : u32 : 0x8A3E;
GL_UNIFORM_BLOCK_BINDING           : u32 : 0x8A3F;
GL_UNIFORM_BLOCK_DATA_SIZE         : u32 : 0x8A40;
GL_UNIFORM_BLOCK_NAME_LENGTH       : u32 : 0x8A41;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS   : u32 : 0x8A42;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES  : u32 : 0x8A43;
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER  : u32 : 0x8A44;
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER  : u32 : 0x8A45;
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER  : u32 : 0x8A46;
GL_INVALID_INDEX                   : u32 : 0xFFFFFFFF;
/* GL_VERSION_3_1 */

//#ifndef GL_VERSION_3_2
//#define GL_VERSION_3_2 1

//typedef struct __GLsync *GLsync; // TODO(psv): what to do with this?
GLsync ^void;
GLuint64 u64;
GLint64 s64;
GL_CONTEXT_CORE_PROFILE_BIT        : u32 : 0x00000001;
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT  : u32 : 0x00000002;
GL_LINES_ADJACENCY                 : u32 : 0x000A;
GL_LINE_STRIP_ADJACENCY            : u32 : 0x000B;
GL_TRIANGLES_ADJACENCY             : u32 : 0x000C;
GL_TRIANGLE_STRIP_ADJACENCY        : u32 : 0x000D;
GL_PROGRAM_POINT_SIZE              : u32 : 0x8642;
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS  : u32 : 0x8C29;
GL_FRAMEBUFFER_ATTACHMENT_LAYERED  : u32 : 0x8DA7;
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS  : u32 : 0x8DA8;
GL_GEOMETRY_SHADER                 : u32 : 0x8DD9;
GL_GEOMETRY_VERTICES_OUT           : u32 : 0x8916;
GL_GEOMETRY_INPUT_TYPE             : u32 : 0x8917;
GL_GEOMETRY_OUTPUT_TYPE            : u32 : 0x8918;
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS  : u32 : 0x8DDF;
GL_MAX_GEOMETRY_OUTPUT_VERTICES    : u32 : 0x8DE0;
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS  : u32 : 0x8DE1;
GL_MAX_VERTEX_OUTPUT_COMPONENTS    : u32 : 0x9122;
GL_MAX_GEOMETRY_INPUT_COMPONENTS   : u32 : 0x9123;
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS  : u32 : 0x9124;
GL_MAX_FRAGMENT_INPUT_COMPONENTS   : u32 : 0x9125;
GL_CONTEXT_PROFILE_MASK            : u32 : 0x9126;
GL_DEPTH_CLAMP                     : u32 : 0x864F;
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION  : u32 : 0x8E4C;
GL_FIRST_VERTEX_CONVENTION         : u32 : 0x8E4D;
GL_LAST_VERTEX_CONVENTION          : u32 : 0x8E4E;
GL_PROVOKING_VERTEX                : u32 : 0x8E4F;
GL_TEXTURE_CUBE_MAP_SEAMLESS       : u32 : 0x884F;
GL_MAX_SERVER_WAIT_TIMEOUT         : u32 : 0x9111;
GL_OBJECT_TYPE                     : u32 : 0x9112;
GL_SYNC_CONDITION                  : u32 : 0x9113;
GL_SYNC_STATUS                     : u32 : 0x9114;
GL_SYNC_FLAGS                      : u32 : 0x9115;
GL_SYNC_FENCE                      : u32 : 0x9116;
GL_SYNC_GPU_COMMANDS_COMPLETE      : u32 : 0x9117;
GL_UNSIGNALED                      : u32 : 0x9118;
GL_SIGNALED                        : u32 : 0x9119;
GL_ALREADY_SIGNALED                : u32 : 0x911A;
GL_TIMEOUT_EXPIRED                 : u32 : 0x911B;
GL_CONDITION_SATISFIED             : u32 : 0x911C;
GL_WAIT_FAILED                     : u32 : 0x911D;
GL_TIMEOUT_IGNORED                 : u32 : 0xFFFFFFFFFFFFFFFF;
GL_SYNC_FLUSH_COMMANDS_BIT         : u32 : 0x00000001;
GL_SAMPLE_POSITION                 : u32 : 0x8E50;
GL_SAMPLE_MASK                     : u32 : 0x8E51;
GL_SAMPLE_MASK_VALUE               : u32 : 0x8E52;
GL_MAX_SAMPLE_MASK_WORDS           : u32 : 0x8E59;
GL_TEXTURE_2D_MULTISAMPLE          : u32 : 0x9100;
GL_PROXY_TEXTURE_2D_MULTISAMPLE    : u32 : 0x9101;
GL_TEXTURE_2D_MULTISAMPLE_ARRAY    : u32 : 0x9102;
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY  : u32 : 0x9103;
GL_TEXTURE_BINDING_2D_MULTISAMPLE  : u32 : 0x9104;
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY  : u32 : 0x9105;
GL_TEXTURE_SAMPLES                 : u32 : 0x9106;
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS  : u32 : 0x9107;
GL_SAMPLER_2D_MULTISAMPLE          : u32 : 0x9108;
GL_INT_SAMPLER_2D_MULTISAMPLE      : u32 : 0x9109;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE  : u32 : 0x910A;
GL_SAMPLER_2D_MULTISAMPLE_ARRAY    : u32 : 0x910B;
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY  : u32 : 0x910C;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY  : u32 : 0x910D;
GL_MAX_COLOR_TEXTURE_SAMPLES       : u32 : 0x910E;
GL_MAX_DEPTH_TEXTURE_SAMPLES       : u32 : 0x910F;
GL_MAX_INTEGER_SAMPLES             : u32 : 0x9110;
/* GL_VERSION_3_2 */


//#ifndef GL_VERSION_3_3
//#define GL_VERSION_3_3 1
GL_VERTEX_ATTRIB_ARRAY_DIVISOR    : u32 : 0x88FE;
GL_SRC1_COLOR                     : u32 : 0x88F9;
GL_ONE_MINUS_SRC1_COLOR           : u32 : 0x88FA;
GL_ONE_MINUS_SRC1_ALPHA           : u32 : 0x88FB;
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS   : u32 : 0x88FC;
GL_ANY_SAMPLES_PASSED             : u32 : 0x8C2F;
GL_SAMPLER_BINDING                : u32 : 0x8919;
GL_RGB10_A2UI                     : u32 : 0x906F;
GL_TEXTURE_SWIZZLE_R              : u32 : 0x8E42;
GL_TEXTURE_SWIZZLE_G              : u32 : 0x8E43;
GL_TEXTURE_SWIZZLE_B              : u32 : 0x8E44;
GL_TEXTURE_SWIZZLE_A              : u32 : 0x8E45;
GL_TEXTURE_SWIZZLE_RGBA           : u32 : 0x8E46;
GL_TIME_ELAPSED                   : u32 : 0x88BF;
GL_TIMESTAMP                      : u32 : 0x8E28;
GL_INT_2_10_10_10_REV             : u32 : 0x8D9F;
/* GL_VERSION_3_3 */


//#ifndef GL_VERSION_4_0
//#define GL_VERSION_4_0 1
GL_SAMPLE_SHADING                 : u32 : 0x8C36;
GL_MIN_SAMPLE_SHADING_VALUE       : u32 : 0x8C37;
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET : u32 : 0x8E5E;
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET : u32 : 0x8E5F;
GL_TEXTURE_CUBE_MAP_ARRAY         : u32 : 0x9009;
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY : u32 : 0x900A;
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY   : u32 : 0x900B;
GL_SAMPLER_CUBE_MAP_ARRAY         : u32 : 0x900C;
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW  : u32 : 0x900D;
GL_INT_SAMPLER_CUBE_MAP_ARRAY     : u32 : 0x900E;
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY : u32 : 0x900F;
GL_DRAW_INDIRECT_BUFFER           : u32 : 0x8F3F;
GL_DRAW_INDIRECT_BUFFER_BINDING   : u32 : 0x8F43;
GL_GEOMETRY_SHADER_INVOCATIONS    : u32 : 0x887F;
GL_MAX_GEOMETRY_SHADER_INVOCATIONS : u32 : 0x8E5A;
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET : u32 : 0x8E5B;
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET : u32 : 0x8E5C;
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS : u32 : 0x8E5D;
GL_MAX_VERTEX_STREAMS             : u32 : 0x8E71;
GL_DOUBLE_VEC2                    : u32 : 0x8FFC;
GL_DOUBLE_VEC3                    : u32 : 0x8FFD;
GL_DOUBLE_VEC4                    : u32 : 0x8FFE;
GL_DOUBLE_MAT2                    : u32 : 0x8F46;
GL_DOUBLE_MAT3                    : u32 : 0x8F47;
GL_DOUBLE_MAT4                    : u32 : 0x8F48;
GL_DOUBLE_MAT2x3                  : u32 : 0x8F49;
GL_DOUBLE_MAT2x4                  : u32 : 0x8F4A;
GL_DOUBLE_MAT3x2                  : u32 : 0x8F4B;
GL_DOUBLE_MAT3x4                  : u32 : 0x8F4C;
GL_DOUBLE_MAT4x2                  : u32 : 0x8F4D;
GL_DOUBLE_MAT4x3                  : u32 : 0x8F4E;
GL_ACTIVE_SUBROUTINES             : u32 : 0x8DE5;
GL_ACTIVE_SUBROUTINE_UNIFORMS     : u32 : 0x8DE6;
GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS : u32 : 0x8E47;
GL_ACTIVE_SUBROUTINE_MAX_LENGTH   : u32 : 0x8E48;
GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH : u32 : 0x8E49;
GL_MAX_SUBROUTINES                : u32 : 0x8DE7;
GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS : u32 : 0x8DE8;
GL_NUM_COMPATIBLE_SUBROUTINES     : u32 : 0x8E4A;
GL_COMPATIBLE_SUBROUTINES         : u32 : 0x8E4B;
GL_PATCHES                        : u32 : 0x000E;
GL_PATCH_VERTICES                 : u32 : 0x8E72;
GL_PATCH_DEFAULT_INNER_LEVEL      : u32 : 0x8E73;
GL_PATCH_DEFAULT_OUTER_LEVEL      : u32 : 0x8E74;
GL_TESS_CONTROL_OUTPUT_VERTICES   : u32 : 0x8E75;
GL_TESS_GEN_MODE                  : u32 : 0x8E76;
GL_TESS_GEN_SPACING               : u32 : 0x8E77;
GL_TESS_GEN_VERTEX_ORDER          : u32 : 0x8E78;
GL_TESS_GEN_POINT_MODE            : u32 : 0x8E79;
GL_ISOLINES                       : u32 : 0x8E7A;
GL_FRACTIONAL_ODD                 : u32 : 0x8E7B;
GL_FRACTIONAL_EVEN                : u32 : 0x8E7C;
GL_MAX_PATCH_VERTICES             : u32 : 0x8E7D;
GL_MAX_TESS_GEN_LEVEL             : u32 : 0x8E7E;
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS : u32 : 0x8E7F;
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS : u32 : 0x8E80;
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS : u32 : 0x8E81;
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS : u32 : 0x8E82;
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS : u32 : 0x8E83;
GL_MAX_TESS_PATCH_COMPONENTS      : u32 : 0x8E84;
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS : u32 : 0x8E85;
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS : u32 : 0x8E86;
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS : u32 : 0x8E89;
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS : u32 : 0x8E8A;
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS : u32 : 0x886C;
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS : u32 : 0x886D;
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS : u32 : 0x8E1E;
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS : u32 : 0x8E1F;
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER : u32 : 0x84F0;
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER : u32 : 0x84F1;
GL_TESS_EVALUATION_SHADER         : u32 : 0x8E87;
GL_TESS_CONTROL_SHADER            : u32 : 0x8E88;
GL_TRANSFORM_FEEDBACK             : u32 : 0x8E22;
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED : u32 : 0x8E23;
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE : u32 : 0x8E24;
GL_TRANSFORM_FEEDBACK_BINDING     : u32 : 0x8E25;
GL_MAX_TRANSFORM_FEEDBACK_BUFFERS : u32 : 0x8E70;
/* GL_VERSION_4_0 */

//#ifndef GL_VERSION_4_1
//#define GL_VERSION_4_1 1
GL_FIXED                          : u32 : 0x140C;
GL_IMPLEMENTATION_COLOR_READ_TYPE : u32 : 0x8B9A;
GL_IMPLEMENTATION_COLOR_READ_FORMAT : u32 : 0x8B9B;
GL_LOW_FLOAT                      : u32 : 0x8DF0;
GL_MEDIUM_FLOAT                   : u32 : 0x8DF1;
GL_HIGH_FLOAT                     : u32 : 0x8DF2;
GL_LOW_INT                        : u32 : 0x8DF3;
GL_MEDIUM_INT                     : u32 : 0x8DF4;
GL_HIGH_INT                       : u32 : 0x8DF5;
GL_SHADER_COMPILER                : u32 : 0x8DFA;
GL_SHADER_BINARY_FORMATS          : u32 : 0x8DF8;
GL_NUM_SHADER_BINARY_FORMATS      : u32 : 0x8DF9;
GL_MAX_VERTEX_UNIFORM_VECTORS     : u32 : 0x8DFB;
GL_MAX_VARYING_VECTORS            : u32 : 0x8DFC;
GL_MAX_FRAGMENT_UNIFORM_VECTORS   : u32 : 0x8DFD;
GL_RGB565                         : u32 : 0x8D62;
GL_PROGRAM_BINARY_RETRIEVABLE_HINT : u32 : 0x8257;
GL_PROGRAM_BINARY_LENGTH          : u32 : 0x8741;
GL_NUM_PROGRAM_BINARY_FORMATS     : u32 : 0x87FE;
GL_PROGRAM_BINARY_FORMATS         : u32 : 0x87FF;
GL_VERTEX_SHADER_BIT              : u32 : 0x00000001;
GL_FRAGMENT_SHADER_BIT            : u32 : 0x00000002;
GL_GEOMETRY_SHADER_BIT            : u32 : 0x00000004;
GL_TESS_CONTROL_SHADER_BIT        : u32 : 0x00000008;
GL_TESS_EVALUATION_SHADER_BIT     : u32 : 0x00000010;
GL_ALL_SHADER_BITS                : u32 : 0xFFFFFFFF;
GL_PROGRAM_SEPARABLE              : u32 : 0x8258;
GL_ACTIVE_PROGRAM                 : u32 : 0x8259;
GL_PROGRAM_PIPELINE_BINDING       : u32 : 0x825A;
GL_MAX_VIEWPORTS                  : u32 : 0x825B;
GL_VIEWPORT_SUBPIXEL_BITS         : u32 : 0x825C;
GL_VIEWPORT_BOUNDS_RANGE          : u32 : 0x825D;
GL_LAYER_PROVOKING_VERTEX         : u32 : 0x825E;
GL_VIEWPORT_INDEX_PROVOKING_VERTEX : u32 : 0x825F;
GL_UNDEFINED_VERTEX               : u32 : 0x8260;
/* GL_VERSION_4_1 */

//#ifndef GL_VERSION_4_2
//#define GL_VERSION_4_2 1
GL_COPY_READ_BUFFER_BINDING       : u32 : 0x8F36;
GL_COPY_WRITE_BUFFER_BINDING      : u32 : 0x8F37;
GL_TRANSFORM_FEEDBACK_ACTIVE      : u32 : 0x8E24;
GL_TRANSFORM_FEEDBACK_PAUSED      : u32 : 0x8E23;
GL_UNPACK_COMPRESSED_BLOCK_WIDTH  : u32 : 0x9127;
GL_UNPACK_COMPRESSED_BLOCK_HEIGHT : u32 : 0x9128;
GL_UNPACK_COMPRESSED_BLOCK_DEPTH  : u32 : 0x9129;
GL_UNPACK_COMPRESSED_BLOCK_SIZE   : u32 : 0x912A;
GL_PACK_COMPRESSED_BLOCK_WIDTH    : u32 : 0x912B;
GL_PACK_COMPRESSED_BLOCK_HEIGHT   : u32 : 0x912C;
GL_PACK_COMPRESSED_BLOCK_DEPTH    : u32 : 0x912D;
GL_PACK_COMPRESSED_BLOCK_SIZE     : u32 : 0x912E;
GL_NUM_SAMPLE_COUNTS              : u32 : 0x9380;
GL_MIN_MAP_BUFFER_ALIGNMENT       : u32 : 0x90BC;
GL_ATOMIC_COUNTER_BUFFER          : u32 : 0x92C0;
GL_ATOMIC_COUNTER_BUFFER_BINDING  : u32 : 0x92C1;
GL_ATOMIC_COUNTER_BUFFER_START    : u32 : 0x92C2;
GL_ATOMIC_COUNTER_BUFFER_SIZE     : u32 : 0x92C3;
GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE : u32 : 0x92C4;
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS : u32 : 0x92C5;
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES : u32 : 0x92C6;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER : u32 : 0x92C7;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER : u32 : 0x92C8;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER : u32 : 0x92C9;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER : u32 : 0x92CA;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER : u32 : 0x92CB;
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS : u32 : 0x92CC;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS : u32 : 0x92CD;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS : u32 : 0x92CE;
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS : u32 : 0x92CF;
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS : u32 : 0x92D0;
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS : u32 : 0x92D1;
GL_MAX_VERTEX_ATOMIC_COUNTERS     : u32 : 0x92D2;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS : u32 : 0x92D3;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS : u32 : 0x92D4;
GL_MAX_GEOMETRY_ATOMIC_COUNTERS   : u32 : 0x92D5;
GL_MAX_FRAGMENT_ATOMIC_COUNTERS   : u32 : 0x92D6;
GL_MAX_COMBINED_ATOMIC_COUNTERS   : u32 : 0x92D7;
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE : u32 : 0x92D8;
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS : u32 : 0x92DC;
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS  : u32 : 0x92D9;
GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX : u32 : 0x92DA;
GL_UNSIGNED_INT_ATOMIC_COUNTER    : u32 : 0x92DB;
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT : u32 : 0x00000001;
GL_ELEMENT_ARRAY_BARRIER_BIT      : u32 : 0x00000002;
GL_UNIFORM_BARRIER_BIT            : u32 : 0x00000004;
GL_TEXTURE_FETCH_BARRIER_BIT      : u32 : 0x00000008;
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT : u32 : 0x00000020;
GL_COMMAND_BARRIER_BIT            : u32 : 0x00000040;
GL_PIXEL_BUFFER_BARRIER_BIT       : u32 : 0x00000080;
GL_TEXTURE_UPDATE_BARRIER_BIT     : u32 : 0x00000100;
GL_BUFFER_UPDATE_BARRIER_BIT      : u32 : 0x00000200;
GL_FRAMEBUFFER_BARRIER_BIT        : u32 : 0x00000400;
GL_TRANSFORM_FEEDBACK_BARRIER_BIT : u32 : 0x00000800;
GL_ATOMIC_COUNTER_BARRIER_BIT     : u32 : 0x00001000;
GL_ALL_BARRIER_BITS               : u32 : 0xFFFFFFFF;
GL_MAX_IMAGE_UNITS                : u32 : 0x8F38;
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS : u32 : 0x8F39;
GL_IMAGE_BINDING_NAME             : u32 : 0x8F3A;
GL_IMAGE_BINDING_LEVEL            : u32 : 0x8F3B;
GL_IMAGE_BINDING_LAYERED          : u32 : 0x8F3C;
GL_IMAGE_BINDING_LAYER            : u32 : 0x8F3D;
GL_IMAGE_BINDING_ACCESS           : u32 : 0x8F3E;
GL_IMAGE_1D                       : u32 : 0x904C;
GL_IMAGE_2D                       : u32 : 0x904D;
GL_IMAGE_3D                       : u32 : 0x904E;
GL_IMAGE_2D_RECT                  : u32 : 0x904F;
GL_IMAGE_CUBE                     : u32 : 0x9050;
GL_IMAGE_BUFFER                   : u32 : 0x9051;
GL_IMAGE_1D_ARRAY                 : u32 : 0x9052;
GL_IMAGE_2D_ARRAY                 : u32 : 0x9053;
GL_IMAGE_CUBE_MAP_ARRAY           : u32 : 0x9054;
GL_IMAGE_2D_MULTISAMPLE           : u32 : 0x9055;
GL_IMAGE_2D_MULTISAMPLE_ARRAY     : u32 : 0x9056;
GL_INT_IMAGE_1D                   : u32 : 0x9057;
GL_INT_IMAGE_2D                   : u32 : 0x9058;
GL_INT_IMAGE_3D                   : u32 : 0x9059;
GL_INT_IMAGE_2D_RECT              : u32 : 0x905A;
GL_INT_IMAGE_CUBE                 : u32 : 0x905B;
GL_INT_IMAGE_BUFFER               : u32 : 0x905C;
GL_INT_IMAGE_1D_ARRAY             : u32 : 0x905D;
GL_INT_IMAGE_2D_ARRAY             : u32 : 0x905E;
GL_INT_IMAGE_CUBE_MAP_ARRAY       : u32 : 0x905F;
GL_INT_IMAGE_2D_MULTISAMPLE       : u32 : 0x9060;
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY : u32 : 0x9061;
GL_UNSIGNED_INT_IMAGE_1D          : u32 : 0x9062;
GL_UNSIGNED_INT_IMAGE_2D          : u32 : 0x9063;
GL_UNSIGNED_INT_IMAGE_3D          : u32 : 0x9064;
GL_UNSIGNED_INT_IMAGE_2D_RECT     : u32 : 0x9065;
GL_UNSIGNED_INT_IMAGE_CUBE        : u32 : 0x9066;
GL_UNSIGNED_INT_IMAGE_BUFFER      : u32 : 0x9067;
GL_UNSIGNED_INT_IMAGE_1D_ARRAY    : u32 : 0x9068;
GL_UNSIGNED_INT_IMAGE_2D_ARRAY    : u32 : 0x9069;
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY : u32 : 0x906A;
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE : u32 : 0x906B;
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY : u32 : 0x906C;
GL_MAX_IMAGE_SAMPLES              : u32 : 0x906D;
GL_IMAGE_BINDING_FORMAT           : u32 : 0x906E;
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE : u32 : 0x90C7;
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE : u32 : 0x90C8;
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS : u32 : 0x90C9;
GL_MAX_VERTEX_IMAGE_UNIFORMS      : u32 : 0x90CA;
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS : u32 : 0x90CB;
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS : u32 : 0x90CC;
GL_MAX_GEOMETRY_IMAGE_UNIFORMS    : u32 : 0x90CD;
GL_MAX_FRAGMENT_IMAGE_UNIFORMS    : u32 : 0x90CE;
GL_MAX_COMBINED_IMAGE_UNIFORMS    : u32 : 0x90CF;
GL_COMPRESSED_RGBA_BPTC_UNORM     : u32 : 0x8E8C;
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM : u32 : 0x8E8D;
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT : u32 : 0x8E8E;
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT : u32 : 0x8E8F;
GL_TEXTURE_IMMUTABLE_FORMAT       : u32 : 0x912F;
/* GL_VERSION_4_2 */

//#ifndef GL_VERSION_4_3
//#define GL_VERSION_4_3 1
GLDEBUGPROC (GLenum, GLenum, GLuint, GLenum, GLsizei, ^GLchar, ^void) -> void;
GL_NUM_SHADING_LANGUAGE_VERSIONS  : u32 : 0x82E9;
GL_VERTEX_ATTRIB_ARRAY_LONG       : u32 : 0x874E;
GL_COMPRESSED_RGB8_ETC2           : u32 : 0x9274;
GL_COMPRESSED_SRGB8_ETC2          : u32 : 0x9275;
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 : u32 : 0x9276;
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 : u32 : 0x9277;
GL_COMPRESSED_RGBA8_ETC2_EAC      : u32 : 0x9278;
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : u32 : 0x9279;
GL_COMPRESSED_R11_EAC             : u32 : 0x9270;
GL_COMPRESSED_SIGNED_R11_EAC      : u32 : 0x9271;
GL_COMPRESSED_RG11_EAC            : u32 : 0x9272;
GL_COMPRESSED_SIGNED_RG11_EAC     : u32 : 0x9273;
GL_PRIMITIVE_RESTART_FIXED_INDEX  : u32 : 0x8D69;
GL_ANY_SAMPLES_PASSED_CONSERVATIVE : u32 : 0x8D6A;
GL_MAX_ELEMENT_INDEX              : u32 : 0x8D6B;
GL_COMPUTE_SHADER                 : u32 : 0x91B9;
GL_MAX_COMPUTE_UNIFORM_BLOCKS     : u32 : 0x91BB;
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS : u32 : 0x91BC;
GL_MAX_COMPUTE_IMAGE_UNIFORMS     : u32 : 0x91BD;
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE : u32 : 0x8262;
GL_MAX_COMPUTE_UNIFORM_COMPONENTS : u32 : 0x8263;
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS : u32 : 0x8264;
GL_MAX_COMPUTE_ATOMIC_COUNTERS    : u32 : 0x8265;
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS : u32 : 0x8266;
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS : u32 : 0x90EB;
GL_MAX_COMPUTE_WORK_GROUP_COUNT   : u32 : 0x91BE;
GL_MAX_COMPUTE_WORK_GROUP_SIZE    : u32 : 0x91BF;
GL_COMPUTE_WORK_GROUP_SIZE        : u32 : 0x8267;
GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER : u32 : 0x90EC;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER : u32 : 0x90ED;
GL_DISPATCH_INDIRECT_BUFFER       : u32 : 0x90EE;
GL_DISPATCH_INDIRECT_BUFFER_BINDING : u32 : 0x90EF;
GL_COMPUTE_SHADER_BIT             : u32 : 0x00000020;
GL_DEBUG_OUTPUT_SYNCHRONOUS       : u32 : 0x8242;
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH : u32 : 0x8243;
GL_DEBUG_CALLBACK_FUNCTION        : u32 : 0x8244;
GL_DEBUG_CALLBACK_USER_PARAM      : u32 : 0x8245;
GL_DEBUG_SOURCE_API               : u32 : 0x8246;
GL_DEBUG_SOURCE_WINDOW_SYSTEM     : u32 : 0x8247;
GL_DEBUG_SOURCE_SHADER_COMPILER   : u32 : 0x8248;
GL_DEBUG_SOURCE_THIRD_PARTY       : u32 : 0x8249;
GL_DEBUG_SOURCE_APPLICATION       : u32 : 0x824A;
GL_DEBUG_SOURCE_OTHER             : u32 : 0x824B;
GL_DEBUG_TYPE_ERROR               : u32 : 0x824C;
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR : u32 : 0x824D;
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR  : u32 : 0x824E;
GL_DEBUG_TYPE_PORTABILITY         : u32 : 0x824F;
GL_DEBUG_TYPE_PERFORMANCE         : u32 : 0x8250;
GL_DEBUG_TYPE_OTHER               : u32 : 0x8251;
GL_MAX_DEBUG_MESSAGE_LENGTH       : u32 : 0x9143;
GL_MAX_DEBUG_LOGGED_MESSAGES      : u32 : 0x9144;
GL_DEBUG_LOGGED_MESSAGES          : u32 : 0x9145;
GL_DEBUG_SEVERITY_HIGH            : u32 : 0x9146;
GL_DEBUG_SEVERITY_MEDIUM          : u32 : 0x9147;
GL_DEBUG_SEVERITY_LOW             : u32 : 0x9148;
GL_DEBUG_TYPE_MARKER              : u32 : 0x8268;
GL_DEBUG_TYPE_PUSH_GROUP          : u32 : 0x8269;
GL_DEBUG_TYPE_POP_GROUP           : u32 : 0x826A;
GL_DEBUG_SEVERITY_NOTIFICATION    : u32 : 0x826B;
GL_MAX_DEBUG_GROUP_STACK_DEPTH    : u32 : 0x826C;
GL_DEBUG_GROUP_STACK_DEPTH        : u32 : 0x826D;
GL_BUFFER                         : u32 : 0x82E0;
GL_SHADER                         : u32 : 0x82E1;
GL_PROGRAM                        : u32 : 0x82E2;
GL_QUERY                          : u32 : 0x82E3;
GL_PROGRAM_PIPELINE               : u32 : 0x82E4;
GL_SAMPLER                        : u32 : 0x82E6;
GL_MAX_LABEL_LENGTH               : u32 : 0x82E8;
GL_DEBUG_OUTPUT                   : u32 : 0x92E0;
GL_CONTEXT_FLAG_DEBUG_BIT         : u32 : 0x00000002;
GL_MAX_UNIFORM_LOCATIONS          : u32 : 0x826E;
GL_FRAMEBUFFER_DEFAULT_WIDTH      : u32 : 0x9310;
GL_FRAMEBUFFER_DEFAULT_HEIGHT     : u32 : 0x9311;
GL_FRAMEBUFFER_DEFAULT_LAYERS     : u32 : 0x9312;
GL_FRAMEBUFFER_DEFAULT_SAMPLES    : u32 : 0x9313;
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS : u32 : 0x9314;
GL_MAX_FRAMEBUFFER_WIDTH          : u32 : 0x9315;
GL_MAX_FRAMEBUFFER_HEIGHT         : u32 : 0x9316;
GL_MAX_FRAMEBUFFER_LAYERS         : u32 : 0x9317;
GL_MAX_FRAMEBUFFER_SAMPLES        : u32 : 0x9318;
GL_INTERNALFORMAT_SUPPORTED       : u32 : 0x826F;
GL_INTERNALFORMAT_PREFERRED       : u32 : 0x8270;
GL_INTERNALFORMAT_RED_SIZE        : u32 : 0x8271;
GL_INTERNALFORMAT_GREEN_SIZE      : u32 : 0x8272;
GL_INTERNALFORMAT_BLUE_SIZE       : u32 : 0x8273;
GL_INTERNALFORMAT_ALPHA_SIZE      : u32 : 0x8274;
GL_INTERNALFORMAT_DEPTH_SIZE      : u32 : 0x8275;
GL_INTERNALFORMAT_STENCIL_SIZE    : u32 : 0x8276;
GL_INTERNALFORMAT_SHARED_SIZE     : u32 : 0x8277;
GL_INTERNALFORMAT_RED_TYPE        : u32 : 0x8278;
GL_INTERNALFORMAT_GREEN_TYPE      : u32 : 0x8279;
GL_INTERNALFORMAT_BLUE_TYPE       : u32 : 0x827A;
GL_INTERNALFORMAT_ALPHA_TYPE      : u32 : 0x827B;
GL_INTERNALFORMAT_DEPTH_TYPE      : u32 : 0x827C;
GL_INTERNALFORMAT_STENCIL_TYPE    : u32 : 0x827D;
GL_MAX_WIDTH                      : u32 : 0x827E;
GL_MAX_HEIGHT                     : u32 : 0x827F;
GL_MAX_DEPTH                      : u32 : 0x8280;
GL_MAX_LAYERS                     : u32 : 0x8281;
GL_MAX_COMBINED_DIMENSIONS        : u32 : 0x8282;
GL_COLOR_COMPONENTS               : u32 : 0x8283;
GL_DEPTH_COMPONENTS               : u32 : 0x8284;
GL_STENCIL_COMPONENTS             : u32 : 0x8285;
GL_COLOR_RENDERABLE               : u32 : 0x8286;
GL_DEPTH_RENDERABLE               : u32 : 0x8287;
GL_STENCIL_RENDERABLE             : u32 : 0x8288;
GL_FRAMEBUFFER_RENDERABLE         : u32 : 0x8289;
GL_FRAMEBUFFER_RENDERABLE_LAYERED : u32 : 0x828A;
GL_FRAMEBUFFER_BLEND              : u32 : 0x828B;
GL_READ_PIXELS                    : u32 : 0x828C;
GL_READ_PIXELS_FORMAT             : u32 : 0x828D;
GL_READ_PIXELS_TYPE               : u32 : 0x828E;
GL_TEXTURE_IMAGE_FORMAT           : u32 : 0x828F;
GL_TEXTURE_IMAGE_TYPE             : u32 : 0x8290;
GL_GET_TEXTURE_IMAGE_FORMAT       : u32 : 0x8291;
GL_GET_TEXTURE_IMAGE_TYPE         : u32 : 0x8292;
GL_MIPMAP                         : u32 : 0x8293;
GL_MANUAL_GENERATE_MIPMAP         : u32 : 0x8294;
GL_AUTO_GENERATE_MIPMAP           : u32 : 0x8295;
GL_COLOR_ENCODING                 : u32 : 0x8296;
GL_SRGB_READ                      : u32 : 0x8297;
GL_SRGB_WRITE                     : u32 : 0x8298;
GL_FILTER                         : u32 : 0x829A;
GL_VERTEX_TEXTURE                 : u32 : 0x829B;
GL_TESS_CONTROL_TEXTURE           : u32 : 0x829C;
GL_TESS_EVALUATION_TEXTURE        : u32 : 0x829D;
GL_GEOMETRY_TEXTURE               : u32 : 0x829E;
GL_FRAGMENT_TEXTURE               : u32 : 0x829F;
GL_COMPUTE_TEXTURE                : u32 : 0x82A0;
GL_TEXTURE_SHADOW                 : u32 : 0x82A1;
GL_TEXTURE_GATHER                 : u32 : 0x82A2;
GL_TEXTURE_GATHER_SHADOW          : u32 : 0x82A3;
GL_SHADER_IMAGE_LOAD              : u32 : 0x82A4;
GL_SHADER_IMAGE_STORE             : u32 : 0x82A5;
GL_SHADER_IMAGE_ATOMIC            : u32 : 0x82A6;
GL_IMAGE_TEXEL_SIZE               : u32 : 0x82A7;
GL_IMAGE_COMPATIBILITY_CLASS      : u32 : 0x82A8;
GL_IMAGE_PIXEL_FORMAT             : u32 : 0x82A9;
GL_IMAGE_PIXEL_TYPE               : u32 : 0x82AA;
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST : u32 : 0x82AC;
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST : u32 : 0x82AD;
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE : u32 : 0x82AE;
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE : u32 : 0x82AF;
GL_TEXTURE_COMPRESSED_BLOCK_WIDTH : u32 : 0x82B1;
GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT : u32 : 0x82B2;
GL_TEXTURE_COMPRESSED_BLOCK_SIZE  : u32 : 0x82B3;
GL_CLEAR_BUFFER                   : u32 : 0x82B4;
GL_TEXTURE_VIEW                   : u32 : 0x82B5;
GL_VIEW_COMPATIBILITY_CLASS       : u32 : 0x82B6;
GL_FULL_SUPPORT                   : u32 : 0x82B7;
GL_CAVEAT_SUPPORT                 : u32 : 0x82B8;
GL_IMAGE_CLASS_4_X_32             : u32 : 0x82B9;
GL_IMAGE_CLASS_2_X_32             : u32 : 0x82BA;
GL_IMAGE_CLASS_1_X_32             : u32 : 0x82BB;
GL_IMAGE_CLASS_4_X_16             : u32 : 0x82BC;
GL_IMAGE_CLASS_2_X_16             : u32 : 0x82BD;
GL_IMAGE_CLASS_1_X_16             : u32 : 0x82BE;
GL_IMAGE_CLASS_4_X_8              : u32 : 0x82BF;
GL_IMAGE_CLASS_2_X_8              : u32 : 0x82C0;
GL_IMAGE_CLASS_1_X_8              : u32 : 0x82C1;
GL_IMAGE_CLASS_11_11_10           : u32 : 0x82C2;
GL_IMAGE_CLASS_10_10_10_2         : u32 : 0x82C3;
GL_VIEW_CLASS_128_BITS            : u32 : 0x82C4;
GL_VIEW_CLASS_96_BITS             : u32 : 0x82C5;
GL_VIEW_CLASS_64_BITS             : u32 : 0x82C6;
GL_VIEW_CLASS_48_BITS             : u32 : 0x82C7;
GL_VIEW_CLASS_32_BITS             : u32 : 0x82C8;
GL_VIEW_CLASS_24_BITS             : u32 : 0x82C9;
GL_VIEW_CLASS_16_BITS             : u32 : 0x82CA;
GL_VIEW_CLASS_8_BITS              : u32 : 0x82CB;
GL_VIEW_CLASS_S3TC_DXT1_RGB       : u32 : 0x82CC;
GL_VIEW_CLASS_S3TC_DXT1_RGBA      : u32 : 0x82CD;
GL_VIEW_CLASS_S3TC_DXT3_RGBA      : u32 : 0x82CE;
GL_VIEW_CLASS_S3TC_DXT5_RGBA      : u32 : 0x82CF;
GL_VIEW_CLASS_RGTC1_RED           : u32 : 0x82D0;
GL_VIEW_CLASS_RGTC2_RG            : u32 : 0x82D1;
GL_VIEW_CLASS_BPTC_UNORM          : u32 : 0x82D2;
GL_VIEW_CLASS_BPTC_FLOAT          : u32 : 0x82D3;
GL_UNIFORM                        : u32 : 0x92E1;
GL_UNIFORM_BLOCK                  : u32 : 0x92E2;
GL_PROGRAM_INPUT                  : u32 : 0x92E3;
GL_PROGRAM_OUTPUT                 : u32 : 0x92E4;
GL_BUFFER_VARIABLE                : u32 : 0x92E5;
GL_SHADER_STORAGE_BLOCK           : u32 : 0x92E6;
GL_VERTEX_SUBROUTINE              : u32 : 0x92E8;
GL_TESS_CONTROL_SUBROUTINE        : u32 : 0x92E9;
GL_TESS_EVALUATION_SUBROUTINE     : u32 : 0x92EA;
GL_GEOMETRY_SUBROUTINE            : u32 : 0x92EB;
GL_FRAGMENT_SUBROUTINE            : u32 : 0x92EC;
GL_COMPUTE_SUBROUTINE             : u32 : 0x92ED;
GL_VERTEX_SUBROUTINE_UNIFORM      : u32 : 0x92EE;
GL_TESS_CONTROL_SUBROUTINE_UNIFORM : u32 : 0x92EF;
GL_TESS_EVALUATION_SUBROUTINE_UNIFORM : u32 : 0x92F0;
GL_GEOMETRY_SUBROUTINE_UNIFORM    : u32 : 0x92F1;
GL_FRAGMENT_SUBROUTINE_UNIFORM    : u32 : 0x92F2;
GL_COMPUTE_SUBROUTINE_UNIFORM     : u32 : 0x92F3;
GL_TRANSFORM_FEEDBACK_VARYING     : u32 : 0x92F4;
GL_ACTIVE_RESOURCES               : u32 : 0x92F5;
GL_MAX_NAME_LENGTH                : u32 : 0x92F6;
GL_MAX_NUM_ACTIVE_VARIABLES       : u32 : 0x92F7;
GL_MAX_NUM_COMPATIBLE_SUBROUTINES : u32 : 0x92F8;
GL_NAME_LENGTH                    : u32 : 0x92F9;
GL_TYPE                           : u32 : 0x92FA;
GL_ARRAY_SIZE                     : u32 : 0x92FB;
GL_OFFSET                         : u32 : 0x92FC;
GL_BLOCK_INDEX                    : u32 : 0x92FD;
GL_ARRAY_STRIDE                   : u32 : 0x92FE;
GL_MATRIX_STRIDE                  : u32 : 0x92FF;
GL_IS_ROW_MAJOR                   : u32 : 0x9300;
GL_ATOMIC_COUNTER_BUFFER_INDEX    : u32 : 0x9301;
GL_BUFFER_BINDING                 : u32 : 0x9302;
GL_BUFFER_DATA_SIZE               : u32 : 0x9303;
GL_NUM_ACTIVE_VARIABLES           : u32 : 0x9304;
GL_ACTIVE_VARIABLES               : u32 : 0x9305;
GL_REFERENCED_BY_VERTEX_SHADER    : u32 : 0x9306;
GL_REFERENCED_BY_TESS_CONTROL_SHADER : u32 : 0x9307;
GL_REFERENCED_BY_TESS_EVALUATION_SHADER : u32 : 0x9308;
GL_REFERENCED_BY_GEOMETRY_SHADER  : u32 : 0x9309;
GL_REFERENCED_BY_FRAGMENT_SHADER  : u32 : 0x930A;
GL_REFERENCED_BY_COMPUTE_SHADER   : u32 : 0x930B;
GL_TOP_LEVEL_ARRAY_SIZE           : u32 : 0x930C;
GL_TOP_LEVEL_ARRAY_STRIDE         : u32 : 0x930D;
GL_LOCATION                       : u32 : 0x930E;
GL_LOCATION_INDEX                 : u32 : 0x930F;
GL_IS_PER_PATCH                   : u32 : 0x92E7;
GL_SHADER_STORAGE_BUFFER          : u32 : 0x90D2;
GL_SHADER_STORAGE_BUFFER_BINDING  : u32 : 0x90D3;
GL_SHADER_STORAGE_BUFFER_START    : u32 : 0x90D4;
GL_SHADER_STORAGE_BUFFER_SIZE     : u32 : 0x90D5;
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS : u32 : 0x90D6;
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS : u32 : 0x90D7;
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS : u32 : 0x90D8;
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS : u32 : 0x90D9;
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS : u32 : 0x90DA;
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS : u32 : 0x90DB;
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS : u32 : 0x90DC;
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS : u32 : 0x90DD;
GL_MAX_SHADER_STORAGE_BLOCK_SIZE  : u32 : 0x90DE;
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT : u32 : 0x90DF;
GL_SHADER_STORAGE_BARRIER_BIT     : u32 : 0x00002000;
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES : u32 : 0x8F39;
GL_DEPTH_STENCIL_TEXTURE_MODE     : u32 : 0x90EA;
GL_TEXTURE_BUFFER_OFFSET          : u32 : 0x919D;
GL_TEXTURE_BUFFER_SIZE            : u32 : 0x919E;
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT : u32 : 0x919F;
GL_TEXTURE_VIEW_MIN_LEVEL         : u32 : 0x82DB;
GL_TEXTURE_VIEW_NUM_LEVELS        : u32 : 0x82DC;
GL_TEXTURE_VIEW_MIN_LAYER         : u32 : 0x82DD;
GL_TEXTURE_VIEW_NUM_LAYERS        : u32 : 0x82DE;
GL_TEXTURE_IMMUTABLE_LEVELS       : u32 : 0x82DF;
GL_VERTEX_ATTRIB_BINDING          : u32 : 0x82D4;
GL_VERTEX_ATTRIB_RELATIVE_OFFSET  : u32 : 0x82D5;
GL_VERTEX_BINDING_DIVISOR         : u32 : 0x82D6;
GL_VERTEX_BINDING_OFFSET          : u32 : 0x82D7;
GL_VERTEX_BINDING_STRIDE          : u32 : 0x82D8;
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET : u32 : 0x82D9;
GL_MAX_VERTEX_ATTRIB_BINDINGS     : u32 : 0x82DA;
GL_VERTEX_BINDING_BUFFER          : u32 : 0x8F4F;
/* GL_VERSION_4_3 */

//#ifndef GL_VERSION_4_4
//#define GL_VERSION_4_4 1
GL_MAX_VERTEX_ATTRIB_STRIDE       : u32 :0x82E5;
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED : u32 :0x8221;
GL_TEXTURE_BUFFER_BINDING         : u32 :0x8C2A;
GL_MAP_PERSISTENT_BIT             : u32 :0x0040;
GL_MAP_COHERENT_BIT               : u32 :0x0080;
GL_DYNAMIC_STORAGE_BIT            : u32 :0x0100;
GL_CLIENT_STORAGE_BIT             : u32 :0x0200;
GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT : u32 :0x00004000;
GL_BUFFER_IMMUTABLE_STORAGE       : u32 :0x821F;
GL_BUFFER_STORAGE_FLAGS           : u32 :0x8220;
GL_CLEAR_TEXTURE                  : u32 :0x9365;
GL_LOCATION_COMPONENT             : u32 :0x934A;
GL_TRANSFORM_FEEDBACK_BUFFER_INDEX : u32 :0x934B;
GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE : u32 :0x934C;
GL_QUERY_BUFFER                   : u32 :0x9192;
GL_QUERY_BUFFER_BARRIER_BIT       : u32 :0x00008000;
GL_QUERY_BUFFER_BINDING           : u32 :0x9193;
GL_QUERY_RESULT_NO_WAIT           : u32 :0x9194;
GL_MIRROR_CLAMP_TO_EDGE           : u32 :0x8743;
/* GL_VERSION_4_4 */

//#ifndef GL_VERSION_4_5
//#define GL_VERSION_4_5 1
GL_CONTEXT_LOST                   : u32 : 0x0507;
GL_NEGATIVE_ONE_TO_ONE            : u32 : 0x935E;
GL_ZERO_TO_ONE                    : u32 : 0x935F;
GL_CLIP_ORIGIN                    : u32 : 0x935C;
GL_CLIP_DEPTH_MODE                : u32 : 0x935D;
GL_QUERY_WAIT_INVERTED            : u32 : 0x8E17;
GL_QUERY_NO_WAIT_INVERTED         : u32 : 0x8E18;
GL_QUERY_BY_REGION_WAIT_INVERTED  : u32 : 0x8E19;
GL_QUERY_BY_REGION_NO_WAIT_INVERTED : u32 : 0x8E1A;
GL_MAX_CULL_DISTANCES             : u32 : 0x82F9;
GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES : u32 : 0x82FA;
GL_TEXTURE_TARGET                 : u32 : 0x1006;
GL_QUERY_TARGET                   : u32 : 0x82EA;
GL_GUILTY_CONTEXT_RESET           : u32 : 0x8253;
GL_INNOCENT_CONTEXT_RESET         : u32 : 0x8254;
GL_UNKNOWN_CONTEXT_RESET          : u32 : 0x8255;
GL_RESET_NOTIFICATION_STRATEGY    : u32 : 0x8256;
GL_LOSE_CONTEXT_ON_RESET          : u32 : 0x8252;
GL_NO_RESET_NOTIFICATION          : u32 : 0x8261;
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT : u32 : 0x00000004;
GL_CONTEXT_RELEASE_BEHAVIOR       : u32 : 0x82FB;
GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH : u32 : 0x82FC;
/* GL_VERSION_4_5 */

//#ifndef GL_VERSION_4_6
//#define GL_VERSION_4_6 1
GL_SHADER_BINARY_FORMAT_SPIR_V    : u32 : 0x9551;
GL_SPIR_V_BINARY                  : u32 : 0x9552;
GL_PARAMETER_BUFFER               : u32 : 0x80EE;
GL_PARAMETER_BUFFER_BINDING       : u32 : 0x80EF;
GL_CONTEXT_FLAG_NO_ERROR_BIT      : u32 : 0x00000008;
GL_VERTICES_SUBMITTED             : u32 : 0x82EE;
GL_PRIMITIVES_SUBMITTED           : u32 : 0x82EF;
GL_VERTEX_SHADER_INVOCATIONS      : u32 : 0x82F0;
GL_TESS_CONTROL_SHADER_PATCHES    : u32 : 0x82F1;
GL_TESS_EVALUATION_SHADER_INVOCATIONS : u32 : 0x82F2;
GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED : u32 : 0x82F3;
GL_FRAGMENT_SHADER_INVOCATIONS    : u32 : 0x82F4;
GL_COMPUTE_SHADER_INVOCATIONS     : u32 : 0x82F5;
GL_CLIPPING_INPUT_PRIMITIVES      : u32 : 0x82F6;
GL_CLIPPING_OUTPUT_PRIMITIVES     : u32 : 0x82F7;
GL_POLYGON_OFFSET_CLAMP           : u32 : 0x8E1B;
GL_SPIR_V_EXTENSIONS              : u32 : 0x9553;
GL_NUM_SPIR_V_EXTENSIONS          : u32 : 0x9554;
GL_TEXTURE_MAX_ANISOTROPY         : u32 : 0x84FE;
GL_MAX_TEXTURE_MAX_ANISOTROPY     : u32 : 0x84FF;
GL_TRANSFORM_FEEDBACK_OVERFLOW    : u32 : 0x82EC;
GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW : u32 : 0x82ED;
/* GL_VERSION_4_6 */

//#foreign("GL")

//wglGetProcAddress : (proc_name : ^GLubyte) -> ^void #extern("GL");

glClear : (flags : GLbitfield) -> void #extern("opengl32.dll");
glClearBufferiv : (GLenum, GLint, ^GLint) -> void;
glClearBufferuiv : (GLenum, GLint, ^GLuint) -> void;
glClearBufferfv : (GLenum, GLint, ^GLfloat) -> void;
glClearBufferfi : (GLenum, GLint, GLfloat, GLint) -> void;
glClearNamedFramebufferiv : (GLuint, GLenum, GLint, ^GLint) -> void;
glClearNamedFramebufferuiv : (GLuint, GLuint, GLint, ^GLuint) -> void;
glClearNamedFramebufferfv : (GLuint, GLuint, GLint, ^GLfloat) -> void;
glClearNamedFramebufferfi : (GLuint, GLuint, GLint, GLfloat, GLint) -> void;
glNamedFramebufferReadBuffer : (GLuint, GLenum) -> void;
glReadnPixels : (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ^void) -> void;
glClearColor : (r : GLfloat, g : GLfloat, b : GLfloat, a : GLfloat) -> void #extern("opengl32.dll");
glClearDepth : (GLdouble) -> void;
glClearStencil : (GLint) -> void;
glDrawBuffer : (GLenum) -> void;
glFinish : () -> void;
glFlush : () -> void;
glReadBuffer : (GLenum) -> void;
glReadPixels : (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ^GLvoid) -> void;

glActiveTexture : (GLenum) -> void;
glBindImageTexture : (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) -> void;
glBindImageTextures : (GLuint, GLsizei, ^GLuint) -> void;
glBindTexture : (GLenum, GLuint) -> void;
glBindTextureUnit : (GLuint, GLuint) -> void;
glBindTextures : (GLuint, GLsizei, ^GLuint) -> void;
glClearTexImage : (GLuint, GLint, GLenum, GLenum, ^void) -> void;
glClearTexSubImage : (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ^void) -> void;
glCompressedTexImage1D : (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ^GLvoid) -> void;
glCompressedTexImage2D : (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ^GLvoid) -> void;
glCompressedTexImage3D : (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ^GLvoid) -> void;
glCompressedTexSubImage1D : (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ^GLvoid) -> void;
glCompressedTextureSubImage1D : (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ^void) -> void;
glCompressedTexSubImage2D : (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ^GLvoid) -> void;
glCompressedTextureSubImage2D : (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ^void) -> void;
glCompressedTexSubImage3D : (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ^GLvoid) -> void;
glCompressedTextureSubImage3D : (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ^void) -> void;
glCopyTextureSubImage1D : (GLuint, GLint, GLint, GLint, GLint, GLsizei) -> void;
glCopyTextureSubImage2D : (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
glCopyImageSubData : (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> void;
glCopyTexImage1D : (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) -> void;
glCopyTexImage2D : (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) -> void;
glCopyTexSubImage1D : (GLenum, GLint, GLint, GLint, GLint, GLsizei) -> void;
glCopyTexSubImage2D : (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
glCopyTexSubImage3D : (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
glCopyTextureSubImage3D : (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
glCreateTextures : (GLenum, GLsizei, ^GLuint) -> void;
glDeleteTextures : (GLsizei, ^GLuint) -> void;
glGenTextures : (GLsizei, ^GLuint) -> void;
glGetCompressedTexImage : (GLenum, GLint, ^GLvoid) -> void;
glGetnCompressedTexImage : (GLenum, GLint, GLsizei, ^void) -> void;
glGetCompressedTextureImage : (GLuint, GLint, GLsizei, ^void) -> void;
glGetCompressedTextureSubImage : (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ^void) -> void;
glGetTexImage : (GLenum, GLint, GLenum, GLenum, ^GLvoid) -> void;
glGetnTexImage : (GLenum, GLint, GLenum, GLenum, GLsizei, ^void) -> void;
glGetTextureImage : (GLuint, GLint, GLenum, GLenum, GLsizei, ^void) -> void;
glGetTexLevelParameterfv : (GLenum, GLint, GLenum, ^GLfloat) -> void;
glGetTexLevelParameteriv : (GLenum, GLint, GLenum, ^GLint) -> void;
glGetTextureLevelParameterfv : (GLuint, GLint, GLenum, ^GLfloat) -> void;
glGetTextureLevelParameteriv : (GLuint, GLint, GLenum, ^GLint) -> void;
glGetTexParameterfv : (GLenum, GLint, GLenum, ^GLfloat) -> void;
glGetTexParameteriv : (GLenum, GLint, GLenum, ^GLint) -> void;
glGetTexParameterIiv : (GLenum, GLenum, ^GLint) -> void;
glGetTexParameterIuiv : (GLenum, GLenum, ^GLuint) -> void;
glGetTextureParameterfv : (GLuint, GLenum, ^GLfloat) -> void;
glGetTextureParameteriv : (GLuint, GLenum, ^GLint) -> void;
glGetTextureParameterIiv : (GLuint, GLenum, ^GLint) -> void;
glGetTextureParameterIuiv : (GLuint, GLenum, ^GLuint) -> void;
glGetTextureSubImage : (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ^void) -> void;
glInvalidateTexImage : (GLuint, GLint) -> void;
glInvalidateTexSubImage : (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> void;
glIsTexture : (GLuint) -> GLboolean;
glTexBuffer : (GLenum, GLenum, GLuint) -> void;
glTextureBuffer : (GLuint, GLenum, GLuint) -> void;
glTexBufferRange : (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) -> void;
glTextureBufferRange : (GLenum, GLenum, GLuint, GLintptr, GLsizei) -> void;
glTexImage1D : (GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ^GLvoid) -> void;
glTexImage2D : (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ^GLvoid) -> void;
glTexImage2DMultisample : (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> void;
glTexImage3D : (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ^GLvoid) -> void;
glTexImage3DMultisample : (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> void;
glTexParameterf : (GLenum, GLenum, GLfloat) -> void;
glTexParameteri : (GLenum, GLenum, GLint) -> void;
glTextureParameterf : (GLenum, GLenum, GLfloat) -> void;
glTextureParameteri : (GLenum, GLenum, GLint) -> void;
glTexParameterfv : (GLenum, GLenum, ^GLfloat) -> void;
glTexParameteriv : (GLenum, GLenum, ^GLint) -> void;
glTexParameterIiv : (GLenum, GLenum, ^GLint) -> void;
glTexParameterIuiv : (GLenum, GLenum, ^GLuint) -> void;
glTextureParameterfv : (GLuint, GLenum, ^GLfloat) -> void;
glTextureParameteriv : (GLuint, GLenum, ^GLint) -> void;
glTextureParameterIiv : (GLuint, GLenum, ^GLint) -> void;
glTextureParameterIuiv : (GLuint, GLenum, ^GLuint) -> void;
glTexStorage1D : (GLenum, GLsizei, GLenum, GLsizei) -> void;
glTextureStorage1D : (GLuint, GLsizei, GLenum, GLsizei) -> void;
glTexStorage2D : (GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> void;
glTextureStorage2D : (GLuint, GLsizei, GLenum, GLsizei, GLsizei) -> void;
glTexStorage2DMultisample : (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> void;
glTextureStorage2DMultisample : (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> void;
glTexStorage3D : (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> void;
glTextureStorage3D : (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> void;
glTexStorage3DMultisample : (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> void;
glTextureStorage3DMultisample : (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> void;
glTexSubImage1D : (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ^GLvoid) -> void;
glTextureSubImage1D : (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ^void) -> void;
glTexSubImage2D : (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ^GLvoid) -> void;
glTextureSubImage2D : (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ^void) -> void;
glTexSubImage3D : (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ^GLvoid) -> void;
glTextureSubImage3D : (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ^void) -> void;
glTextureView : (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) -> void;

glBindFramebuffer : (GLenum, GLuint) -> void;
glBindRenderbuffer : (GLenum, GLuint) -> void;
glBlitFramebuffer : (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> void;
glBlitNamedFramebuffer : (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> void;
glCheckFramebufferStatus : (GLenum) -> GLenum;
glCheckNamedFramebufferStatus : (GLuint, GLenum) -> GLenum;
glCreateFramebuffers : (GLsizei, ^GLuint) -> void;
glCreateRenderbuffers : (GLsizei, ^GLuint) -> void;
glDeleteFramebuffers : (GLsizei, ^GLuint) -> void;
glDeleteRenderbuffers : (GLsizei, ^GLuint) -> void;
glDrawBuffers : (GLsizei, ^GLenum) -> void;
glNamedFramebufferDrawBuffers : (GLuint, GLsizei, ^GLenum) -> void;
glFramebufferParameteri : (GLenum, GLenum, GLint) -> void;
glNamedFramebufferParameteri : (GLuint, GLenum, GLint) -> void;
glFramebufferRenderbuffer : (GLenum, GLenum, GLenum, GLuint) -> void;
glNamedFramebufferRenderbuffer : (GLuint, GLenum, GLenum, GLuint) -> void;
glFramebufferTexture : (GLenum, GLenum, GLuint, GLint) -> void;
glFramebufferTexture1D : (GLenum, GLenum, GLenum, GLuint, GLint) -> void;
glFramebufferTexture2D : (GLenum, GLenum, GLenum, GLuint, GLint) -> void;
glFramebufferTexture3D : (GLenum, GLenum, GLenum, GLuint, GLint, GLint) -> void;
glNamedFramebufferTexture : (GLuint, GLenum, GLuint, GLint) -> void;
glFramebufferTextureLayer : (GLenum, GLenum, GLuint, GLint, GLint) -> void;
glNamedFramebufferTextureLayer : (GLuint, GLenum, GLuint, GLint, GLint) -> void;
glGenFramebuffers : (GLsizei, ^GLuint) -> void;
glGenRenderbuffers : (GLsizei, ^GLuint) -> void;
glGenerateMipmap : (GLenum) -> void;
glGenerateTextureMipmap : (GLuint) -> void;
glGetFramebufferAttachmentParameteriv : (GLenum, GLenum, GLenum, ^GLint) -> void;
glGetNamedFramebufferAttachmentParameteriv : (GLuint, GLenum, GLenum, ^GLint) -> void;
glGetFramebufferParameteriv : (GLenum, GLenum, ^GLint) -> void;
glGetNamedFramebufferParameteriv : (GLuint, GLenum, ^GLint) -> void;
glGetRenderbufferParameteriv : (GLenum, GLenum, ^GLint) -> void;
glGetNamedRenderbufferParameteriv : (GLuint, GLenum, ^GLint) -> void;
glInvalidateFramebuffer : (GLenum, GLsizei, ^GLenum) -> void;
glInvalidateNamedFramebufferData : (GLuint, GLsizei, ^GLenum) -> void;
glInvalidateSubFramebuffer : (GLenum, GLsizei, ^GLenum, GLint, GLint, GLint, GLint) -> void;
glInvalidateNamedFramebufferSubData : (GLuint, GLsizei, ^GLenum, GLint, GLint, GLsizei, GLsizei) -> void;
glIsFramebuffer : (GLuint) -> GLboolean;
glIsRenderbuffer : (GLuint) -> GLboolean;
glRenderbufferStorage : (GLenum, GLenum, GLsizei, GLsizei) -> void;
glNamedRenderbufferStorage : (GLuint, GLenum, GLsizei, GLsizei) -> void;
glRenderbufferStorageMultisample : (GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> void;
glNamedRenderbufferStorageMultisample : (GLuint, GLsizei, GLenum, GLsizei, GLsizei) -> void;
glSampleMaski : (GLuint, GLbitfield) -> void;

glAttachShader : (GLuint, GLuint) -> void;
glBindAttribLocation : (GLuint, GLuint, ^GLchar) -> void;
glBindFragDataLocation : (GLuint, GLuint, ^s8) -> void;
glBindFragDataLocationIndexed : (GLuint, GLuint, GLuint, ^s8) -> void;
glCompileShader : (GLuint) -> void;
glCreateProgram : () -> GLuint;
glCreateShader : (GLenum) -> GLuint;
glCreateShaderProgramv : (GLenum, GLsizei, ^^s8) -> GLuint;
glDeleteProgram : (GLuint) -> void;
glDeleteShader : (GLuint) -> void;
glDetachShader : (GLuint, GLuint) -> void;
glGetActiveAtomicCounterBufferiv : (GLuint, GLuint, GLenum, ^GLint) -> void;
glGetActiveAttrib : (GLuint, GLuint, GLsizei, ^GLsizei, ^GLint, ^GLenum, ^GLchar) -> void;
glGetActiveSubroutineName : (GLuint, GLenum, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetActiveSubroutineUniformiv : (GLuint, GLenum, GLuint, GLenum, ^GLint) -> void;
glGetActiveSubroutineUniformName : (GLuint, GLenum, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetActiveUniform : (GLuint, GLuint, GLsizei, ^GLsizei, ^GLint, ^GLenum, ^GLchar) -> void;
glGetActiveUniformBlockiv : (GLuint, GLuint, GLenum, ^GLint) -> void;
glGetActiveUniformBlockName : (GLuint, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetActiveUniformName : (GLuint, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetActiveUniformsiv : (GLuint, GLsizei, ^GLuint, GLenum, ^GLint) -> void;
glGetAttachedShaders : (GLuint, GLsizei, ^GLsizei, ^GLuint) -> void;
glGetAttribLocation : (GLuint, ^GLchar) -> GLint;
glGetFragDataIndex : (GLuint, ^s8) -> GLint;
glGetFragDataLocation : (GLuint, ^s8) -> GLint;
glGetProgramiv : (GLuint, GLenum, ^GLint) -> void;
glGetProgramBinary : (GLuint, GLsizei, ^GLsizei, ^GLenum, ^void) -> void;
glGetProgramInfoLog : (GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetProgramResourceiv : (GLuint, GLenum, GLuint, GLsizei, ^GLenum, GLsizei, ^GLsizei, ^GLint) -> void;
glGetProgramResourceIndex : (GLuint, GLenum, ^s8) -> GLuint;
glGetProgramResourceLocation : (GLuint, GLenum, ^s8) -> GLint;
glGetProgramResourceLocationIndex : (GLuint, GLenum, ^s8) -> GLint;
glGetProgramResourceName : (GLuint, GLenum, GLuint, GLsizei, ^GLsizei, ^s8) -> void;
glGetProgramStageiv : (GLuint, GLenum, GLenum, ^GLint) -> void;
glGetShaderiv : (GLuint, GLenum, ^GLint) -> void;
glGetShaderInfoLog : (GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetShaderPrecisionFormat : (GLenum, GLenum, ^GLint, ^GLint) -> void;
glGetShaderSource : (GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glGetSubroutineIndex : (GLuint, GLenum, ^GLchar) -> GLuint;
glGetSubroutineUniformLocation : (GLuint, GLenum, ^GLchar) -> GLint;
glGetUniformfv : (GLuint, GLint, ^GLfloat) -> void;
glGetUniformiv : (GLuint, GLint, ^GLint) -> void;
glGetUniformuiv : (GLuint, GLint, ^GLuint) -> void;
glGetUniformdv : (GLuint, GLint, ^GLdouble) -> void;
glGetnUniformfv : (GLuint, GLint, GLsizei, ^GLfloat) -> void;
glGetnUniformiv : (GLuint, GLint, GLsizei, ^GLint) -> void;
glGetnUniformuiv : (GLuint, GLint, GLsizei, ^GLuint) -> void;
glGetnUniformdv : (GLuint, GLint, GLsizei, ^GLdouble) -> void;
glGetUniformBlockIndex : (GLuint, ^GLchar) -> GLuint;
glGetUniformIndices : (GLuint, GLsizei, ^^GLchar, ^GLuint) -> void;
glGetUniformLocation : (GLuint, ^GLchar) -> GLint;
glGetUniformSubroutineuiv : (GLenum, GLint, ^GLuint) -> void;
glIsProgram : (GLuint) -> GLboolean;
glIsShader : (GLuint) -> GLboolean;
glLinkProgram : (GLuint) -> void;
glMinSampleShading : (GLfloat) -> void;
glProgramBinary : (GLuint, GLenum, ^void, GLsizei) -> void;
glProgramParameteri : (GLuint, GLenum, GLint) -> void;
glProgramUniform1f : (GLuint, GLint, GLfloat) -> void;
glProgramUniform2f : (GLuint, GLint, GLfloat, GLfloat) -> void;
glProgramUniform3f : (GLuint, GLint, GLfloat, GLfloat, GLfloat) -> void;
glProgramUniform4f : (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
glProgramUniform1i : (GLuint, GLint, GLint) -> void;
glProgramUniform2i : (GLuint, GLint, GLint, GLint) -> void;
glProgramUniform3i : (GLuint, GLint, GLint, GLint, GLint) -> void;
glProgramUniform4i : (GLuint, GLint, GLint, GLint, GLint, GLint) -> void;
glProgramUniform1ui : (GLuint, GLint, GLuint) -> void;
glProgramUniform2ui : (GLuint, GLint, GLint, GLuint) -> void;
glProgramUniform3ui : (GLuint, GLint, GLint, GLint, GLuint) -> void;
glProgramUniform4ui : (GLuint, GLint, GLint, GLint, GLint, GLuint) -> void;
glProgramUniform1fv : (GLuint, GLint, GLsizei, ^GLfloat) -> void;
glProgramUniform2fv : (GLuint, GLint, GLsizei, ^GLfloat) -> void;
glProgramUniform3fv : (GLuint, GLint, GLsizei, ^GLfloat) -> void;
glProgramUniform4fv : (GLuint, GLint, GLsizei, ^GLfloat) -> void;
glProgramUniform1iv : (GLuint, GLint, GLsizei, ^GLint) -> void;
glProgramUniform2iv : (GLuint, GLint, GLsizei, ^GLint) -> void;
glProgramUniform3iv : (GLuint, GLint, GLsizei, ^GLint) -> void;
glProgramUniform4iv : (GLuint, GLint, GLsizei, ^GLint) -> void;
glProgramUniform1uiv : (GLuint, GLint, GLsizei, ^GLuint) -> void;
glProgramUniform2uiv : (GLuint, GLint, GLsizei, ^GLuint) -> void;
glProgramUniform3uiv : (GLuint, GLint, GLsizei, ^GLuint) -> void;
glProgramUniform4uiv : (GLuint, GLint, GLsizei, ^GLuint) -> void;
glProgramUniformMatrix2fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix3fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix4fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix2x3fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix3x2fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix2x4fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix4x2fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix3x4fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glProgramUniformMatrix4x3fv : (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glReleaseShaderCompiler : () -> void;
glShaderBinary : (GLsizei, ^GLuint, GLenum, ^void, GLsizei) -> void;
glShaderSource : (GLuint, GLsizei, ^^GLchar, ^GLint) -> void;
glShaderStorageBlockBinding : (GLuint, GLuint, GLuint) -> void;
glUniform1f : (GLint, GLfloat) -> void;
glUniform2f : (GLint, GLfloat, GLfloat) -> void;
glUniform3f : (GLint, GLfloat, GLfloat, GLfloat) -> void;
glUniform4f : (GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
glUniform1i : (GLint, GLint) -> void;
glUniform2i : (GLint, GLint, GLint) -> void;
glUniform3i : (GLint, GLint, GLint, GLint) -> void;
glUniform4i : (GLint, GLint, GLint, GLint, GLint) -> void;
glUniform1ui : (GLint, GLuint) -> void;
glUniform2ui : (GLint, GLuint, GLuint) -> void;
glUniform3ui : (GLint, GLuint, GLuint, GLuint) -> void;
glUniform4ui : (GLint, GLuint, GLuint, GLuint, GLuint) -> void;
glUniform1fv : (GLint, GLsizei, ^GLfloat) -> void;
glUniform2fv : (GLint, GLsizei, ^GLfloat) -> void;
glUniform3fv : (GLint, GLsizei, ^GLfloat) -> void;
glUniform4fv : (GLint, GLsizei, ^GLfloat) -> void;
glUniform1iv : (GLint, GLsizei, ^GLint) -> void;
glUniform2iv : (GLint, GLsizei, ^GLint) -> void;
glUniform3iv : (GLint, GLsizei, ^GLint) -> void;
glUniform4iv : (GLint, GLsizei, ^GLint) -> void;
glUniform1uiv : (GLint, GLsizei, ^GLuint) -> void;
glUniform2uiv : (GLint, GLsizei, ^GLuint) -> void;
glUniform3uiv : (GLint, GLsizei, ^GLuint) -> void;
glUniform4uiv : (GLint, GLsizei, ^GLuint) -> void;
glUniformMatrix2fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix3fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix4fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix2x3fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix3x2fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix2x4fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix4x2fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix3x4fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformMatrix4x3fv : (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
glUniformBlockBinding : (GLuint, GLuint, GLuint) -> void;
glUniformSubroutinesuiv : (GLenum, GLsizei, ^GLuint) -> void;
glUseProgram : (GLuint) -> void;
glUseProgramStages : (GLuint, GLbitfield, GLuint) -> void;
glValidateProgram : (GLuint) -> void;

glBlendColor : (GLfloat, GLfloat, GLfloat, GLfloat) -> void;
glBlendEquation : (GLenum) -> void;
glBlendEquationi : (GLuint, GLenum) -> void;
glBlendEquationSeparate : (GLenum, GLenum) -> void;
glBlendEquationSeparatei : (GLuint, GLenum, GLenum) -> void;
glBlendFunc : (GLenum, GLenum) -> void;
glBlendFunci : (GLuint, GLenum, GLenum) -> void;
glBlendFuncSeparate : (GLenum, GLenum, GLenum, GLenum) -> void;
glBlendFuncSeparatei : (GLuint, GLenum, GLenum, GLenum, GLenum) -> void;
glClampColor : (GLenum, GLenum) -> void;
glClipControl : (GLenum, GLenum) -> void;
glColorMask : (GLboolean, GLboolean, GLboolean, GLboolean) -> void;
glColorMaski : (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) -> void;
glCullFace : (GLenum) -> void;
glDepthFunc : (GLenum) -> void;
glDepthMask : (GLboolean) -> void;
glDepthRange : (GLdouble, GLdouble) -> void;
glDepthRangef : (GLfloat, GLfloat) -> void;
glDepthRangeArrayv : (GLuint, GLsizei, ^GLdouble) -> void;
glDepthRangeIndexed : (GLuint, GLdouble, GLdouble) -> void;
glDisable : (GLenum) -> void;
glEnablei : (GLenum, GLuint) -> void;
glDisablei : (GLenum, GLuint) -> void;
//glEnable : (GLenum) -> void;
glFrontFace : (GLenum) -> void;
glGetBooleanv : (GLenum, ^GLboolean) -> void;
glGetDoublev : (GLenum, ^GLdouble) -> void;
glGetFloatv : (GLenum, ^GLfloat) -> void;
glGetIntegerv : (GLenum, ^GLint) -> void;
glGetInteger64v : (GLenum, ^GLint64) -> void;
glGetBooleani_v : (GLenum, GLuint, ^GLboolean) -> void;
glGetFloati_v : (GLenum, GLuint, ^GLfloat) -> void;
glGetDoublei_v : (GLenum, GLuint, ^GLdouble) -> void;
glGetInteger64i_v : (GLenum, GLuint, ^GLint64) -> void;
glGetError : () -> GLenum;
glHint : (GLenum, GLenum) -> void;
glIsEnabled : (GLenum) -> GLboolean;
glIsEnabledi : (GLenum, GLuint) -> GLboolean;
glLineWidth : (GLfloat) -> void;
glLogicOp : (GLenum) -> void;
glPixelStoref : (GLenum, GLfloat) -> void;
glPixelStorei : (GLenum, GLint) -> void;
glPointParameterf : (GLenum, GLfloat) -> void;
glPointParameteri : (GLenum, GLint) -> void;
glPointParameterfv : (GLenum, ^GLfloat) -> void;
glPointParameteriv : (GLenum, ^GLint) -> void;
glPointSize : (GLfloat) -> void;
glPolygonMode : (GLenum, GLenum) -> void;
glPolygonOffset : (GLfloat, GLfloat) -> void;
glScissor : (GLint, GLint, GLsizei, GLsizei) -> void;
glSampleCoverage : (GLfloat, GLboolean) -> void;
glScissorArrayv : (GLuint, GLsizei, ^GLint) -> void;
glScissorIndexed : (GLuint, GLint, GLint, GLsizei, GLsizei) -> void;
glScissorIndexedv : (GLuint, ^GLint) -> void;
glStencilFunc : (GLenum, GLint, GLuint) -> void;
glStencilFuncSeparate : (GLenum, GLenum, GLint, GLuint) -> void;
glStencilMask : (GLuint) -> void;
glStencilMaskSeparate : (GLenum, GLuint) -> void;
glStencilOp : (GLenum, GLenum, GLenum) -> void;
glStencilOpSeparate : (GLenum, GLenum, GLenum, GLenum) -> void;
//glViewport : (GLint, GLint, GLsizei, GLsizei) -> void;
glViewportArrayv : (GLuint, GLsizei, ^GLfloat) -> void;
glViewportIndexedf : (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
glViewportIndexedfv : (GLuint, ^GLfloat) -> void;

glBeginTransformFeedback : (GLenum) -> void;
glBindTransformFeedback : (GLenum, GLuint) -> void;
glCreateTransformFeedbacks : (GLsizei, ^GLuint) -> void;
glDeleteTransformFeedbacks : (GLsizei, ^GLuint) -> void;
glDrawTransformFeedback : (GLenum, GLuint) -> void;
glDrawTransformFeedbackInstanced : (GLenum, GLuint, GLsizei) -> void;
glDrawTransformFeedbackStream : (GLenum, GLuint, GLuint) -> void;
glDrawTransformFeedbackStreamInstanced : (GLenum, GLuint, GLuint, GLsizei) -> void;
glEndTransformFeedback : () -> void;
glGenTransformFeedbacks : (GLsizei, ^GLuint) -> void;
glGetTransformFeedbackiv : (GLuint, GLenum, ^GLint) -> void;
glGetTransformFeedbacki_v : (GLuint, GLenum, GLuint, ^GLint) -> void;
glGetTransformFeedbacki64_v : (GLuint, GLenum, GLuint, ^GLint64) -> void;
glGetTransformFeedbackVarying : (GLuint, GLuint, GLsizei, ^GLsizei, ^GLsizei, ^GLenum, ^s8) -> void;
glIsTransformFeedback : (GLuint) -> GLboolean;
glPauseTransformFeedback : () -> void;
glResumeTransformFeedback : () -> void;
glTransformFeedbackBufferBase : (GLuint, GLuint, GLuint) -> void;
glTransformFeedbackBufferRange : (GLuint, GLuint, GLuint, GLintptr, GLsizei) -> void;
glTransformFeedbackVaryings : (GLuint, GLsizei, ^^s8, GLenum) -> void;

glDispatchCompute : (GLuint, GLuint, GLuint) -> void;
glDispatchComputeIndirect : (GLintptr) -> void;
glGetGraphicsResetStatus : () -> GLenum;
glGetInternalformativ : (GLenum, GLenum, GLenum, GLsizei, ^GLint) -> void;
glGetInternalformati64v : (GLenum, GLenum, GLenum, GLsizei, ^GLint) -> void;
glGetMultisamplefv : (GLenum, GLuint, ^GLfloat) -> void;
glGetString : (GLenum) -> ^GLubyte;
glGetStringi : (GLenum, GLuint) -> ^GLubyte;
glMemoryBarrier : (GLbitfield) -> void;
glMemoryBarrierByRegion : (GLbitfield) -> void;

glBeginConditionalRender : (GLuint, GLenum) -> void;
glBeginQuery : (GLenum, GLuint) -> void;
glBeginQueryIndexed : (GLenum, GLuint, GLuint) -> void;
glCreateQueries : (GLenum, GLsizei, ^GLuint) -> void;
glDeleteQueries : (GLsizei, ^GLuint) -> void;
glEndConditionalRender : () -> void;
glEndQuery : (GLenum) -> void;
glEndQueryIndexed : (GLenum, GLuint) -> void;
glGenQueries : (GLsizei, ^GLuint) -> void;
glGetQueryIndexediv : (GLenum, GLuint, GLenum, ^GLint) -> void;
glGetQueryObjectiv : (GLuint, GLenum, ^GLint) -> void;
glGetQueryObjectuiv : (GLuint, GLenum, ^GLuint) -> void;
glGetQueryObjecti64v : (GLuint, GLenum, ^GLint64) -> void;
glGetQueryObjectui64v : (GLuint, GLenum, ^GLuint64) -> void;
glGetQueryiv : (GLenum, GLenum, ^GLint) -> void;
glIsQuery : (GLuint) -> GLboolean;
glQueryCounter : (GLuint, GLenum) -> void;

glClientWaitSync : (GLsync, GLbitfield, GLuint64) -> GLenum;
glDeleteSync : (GLsync) -> void;
glFenceSync : (GLenum, GLbitfield) -> GLsync;
glGetSynciv : (GLsync, GLenum, GLsizei, ^GLsizei, ^GLint) -> void;
glIsSync : (GLsync) -> GLboolean;
glTextureBarrier : () -> void;
glWaitSync : (GLsync, GLbitfield, GLuint64) -> void;

glBindVertexArray : (GLuint) -> void;
glDeleteVertexArrays : (GLsizei, ^GLuint) -> void;
glGenVertexArrays : (GLsizei, ^GLuint) -> void;
glIsVertexArray : (GLuint) -> GLboolean;

glBindSampler : (GLuint, GLuint) -> void;
glBindSamplers : (GLuint, GLsizei, ^GLuint) -> void;
glCreateSamplers : (GLsizei, ^GLuint) -> void;
glDeleteSamplers : (GLsizei, ^GLuint) -> void;
glGenSamplers : (GLsizei, ^GLuint) -> void;
glGetSamplerParameterfv : (GLuint, GLenum, ^GLfloat) -> void;
glGetSamplerParameteriv : (GLuint, GLenum, ^GLint) -> void;
glGetSamplerParameterIiv : (GLuint, GLenum, ^GLint) -> void;
glGetSamplerParameterIuiv : (GLuint, GLenum, ^GLuint) -> void;
glIsSampler : (GLuint) -> GLboolean;
glSamplerParameterf : (GLuint, GLenum, GLfloat) -> void;
glSamplerParameteri : (GLuint, GLenum, GLint) -> void;
glSamplerParameterfv : (GLuint, GLenum, ^GLfloat) -> void;
glSamplerParameteriv : (GLuint, GLenum, ^GLint) -> void;
glSamplerParameterIiv : (GLuint, GLenum, ^GLint) -> void;
glSamplerParameterIuiv : (GLuint, GLenum, ^GLuint) -> void;

glActiveShaderProgram : (GLuint, GLuint) -> void;
glBindProgramPipeline : (GLuint) -> void;
glCreateProgramPipelines : (GLsizei, ^GLuint) -> void;
glDeleteProgramPipelines : (GLsizei, ^GLuint) -> void;
glGenProgramPipelines : (GLsizei, ^GLuint) -> void;
glGetProgramPipelineiv : (GLuint, GLenum, ^GLint) -> void;
glGetProgramPipelineInfoLog : (GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
glIsProgramPipeline : (GLuint) -> GLboolean;
glValidateProgramPipeline : (GLuint) -> void;

glDebugMessageCallback : (GLDEBUGPROC, ^void) -> void;
glDebugMessageControl : (GLenum, GLenum, GLenum, GLsizei, ^GLuint, GLboolean) -> void;
glDebugMessageInsert : (GLenum, GLenum, GLuint, GLenum, GLsizei, ^s8) -> void;
glGetDebugMessageLog : (GLuint, GLsizei, ^GLenum, ^GLenum, ^GLuint, ^GLenum, ^GLsizei, ^GLchar) -> GLuint;
glGetObjectLabel : (GLenum, GLuint, GLsizei, ^GLsizei, ^s8) -> void;
glGetObjectPtrLabel : (^void, GLsizei, ^GLsizei, ^s8) -> void;
glGetPointerv : (GLenum, ^^GLvoid) -> void;
glGetProgramInterfaceiv : (GLuint, GLenum, GLenum, ^GLint) -> void;
glObjectLabel : (GLenum, GLuint, GLsizei, ^s8) -> void;
glObjectPtrLabel : (^void, GLsizei, ^s8) -> void;
glPopDebugGroup : () -> void;
glPushDebugGroup : (GLenum, GLuint, GLsizei, ^s8) -> void;

glBindBuffer : (GLenum, GLuint) -> void;
glBindBufferBase : (GLenum, GLuint, GLuint) -> void;
glBindBufferRange : (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) -> void;
glBindBuffersBase : (GLenum, GLuint, GLsizei, ^GLuint) -> void;
glBindBuffersRange : (GLenum, GLuint, GLsizei, ^GLuint, ^GLintptr, ^GLintptr) -> void;
glBindVertexBuffer : (GLuint, GLuint, GLintptr, GLintptr) -> void;
glVertexArrayVertexBuffer : (GLuint, GLuint, GLuint, GLintptr, GLsizei) -> void;
glBindVertexBuffers : (GLuint, GLsizei, ^GLuint, ^GLintptr, ^GLsizei) -> void;
glVertexArrayVertexBuffers : (GLuint, GLuint, GLsizei, ^GLuint, ^GLintptr, ^GLsizei) -> void;
glBufferData : (GLenum, GLsizeiptr, ^GLvoid, GLenum) -> void;
glNamedBufferData : (GLuint, GLsizei, ^void, GLenum) -> void;
glBufferStorage : (GLenum, GLsizeiptr, ^GLvoid, GLbitfield) -> void;
glNamedBufferStorage : (GLuint, GLsizei, ^void, GLbitfield) -> void;
glBufferSubData : (GLenum, GLintptr, GLsizeiptr, ^GLvoid) -> void;
glNamedBufferSubData : (GLuint, GLintptr, GLsizei, ^void) -> void;
glClearBufferData : (GLenum, GLenum, GLenum, GLenum, ^void) -> void;
glClearNamedBufferData : (GLuint, GLenum, GLenum, GLenum, ^void) -> void;
glClearBufferSubData : (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ^void) -> void;
glClearNamedBufferSubData : (GLuint, GLenum, GLintptr, GLsizei, GLenum, GLenum, ^void) -> void;
glCopyBufferSubData : (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) -> void;
glCopyNamedBufferSubData : (GLuint, GLuint, GLintptr, GLintptr, GLsizei) -> void;
glCreateBuffers : (GLsizei, ^GLuint) -> void;
glCreateVertexArrays : (GLsizei, ^GLuint) -> void;
glDeleteBuffers : (GLsizei, ^GLuint) -> void;
glDisableVertexAttribArray : (GLuint) -> void;
glDisableVertexArrayAttrib : (GLuint, GLuint) -> void;
glDrawArrays : (GLenum, GLint, GLsizei) -> void;
glDrawArraysIndirect : (GLenum, ^void) -> void;
glDrawArraysInstanced : (GLenum, GLint, GLsizei, GLsizei) -> void;
glDrawArraysInstancedBaseInstance : (GLenum, GLint, GLsizei, GLsizei, GLuint) -> void;
glDrawElements : (GLenum, GLsizei, GLenum, ^GLvoid) -> void;
glDrawElementsBaseVertex : (GLenum, GLsizei, GLenum, ^GLvoid, GLint) -> void;
glDrawElementsIndirect : (GLenum, GLenum, ^void) -> void;
glDrawElementsInstanced : (GLenum, GLsizei, GLenum, ^void, GLsizei) -> void;
glDrawElementsInstancedBaseInstance : (GLenum, GLsizei, GLenum, ^void, GLsizei, GLuint) -> void;
glDrawElementsInstancedBaseVertex : (GLenum, GLsizei, GLenum, ^GLvoid, GLsizei, GLint) -> void;
glDrawElementsInstancedBaseVertexBaseInstance : (GLenum, GLsizei, GLenum, ^GLvoid, GLsizei, GLint, GLuint) -> void;
glDrawRangeElements : (GLenum, GLuint, GLuint, GLsizei, GLenum, ^GLvoid) -> void;
glDrawRangeElementsBaseVertex : (GLenum, GLuint, GLuint, GLsizei, GLenum, ^GLvoid, GLint) -> void;
glEnableVertexAttribArray : (GLuint) -> void;
glEnableVertexArrayAttrib : (GLuint, GLuint) -> void;
glFlushMappedBufferRange : (GLenum, GLintptr, GLsizeiptr) -> void;
glFlushMappedNamedBufferRange : (GLuint, GLintptr, GLsizei) -> void;
glGenBuffers : (GLsizei, ^GLuint) -> void;
glGetBufferParameteriv : (GLenum, GLenum, ^GLint) -> void;
glGetBufferParameteri64v : (GLenum, GLenum, ^GLint64) -> void;
glGetNamedBufferParameteriv : (GLuint, GLenum, ^GLint) -> void;
glGetNamedBufferParameteri64v : (GLuint, GLenum, ^GLint64) -> void;
glGetBufferPointerv : (GLenum, GLenum, ^^GLvoid) -> void;
glGetNamedBufferPointerv : (GLuint, GLenum, ^^void) -> void;
glGetBufferSubData : (GLenum, GLintptr, GLsizeiptr, ^GLvoid) -> void;
glGetNamedBufferSubData : (GLuint, GLintptr, GLsizei, ^void) -> void;
glGetVertexArrayIndexediv : (GLuint, GLuint, GLenum, ^GLint) -> void;
glGetVertexArrayIndexed64iv : (GLuint, GLuint, GLenum, ^GLint64) -> void;
glGetVertexArrayiv : (GLuint, GLenum, ^GLint) -> void;
glGetVertexAttribdv : (GLuint, GLenum, ^GLdouble) -> void;
glGetVertexAttribfv : (GLuint, GLenum, ^GLfloat) -> void;
glGetVertexAttribiv : (GLuint, GLenum, ^GLint) -> void;
glGetVertexAttribIiv : (GLuint, GLenum, ^GLint) -> void;
glGetVertexAttribIuiv : (GLuint, GLenum, ^GLuint) -> void;
glGetVertexAttribLdv : (GLuint, GLenum, ^GLdouble) -> void;
glGetVertexAttribPointerv : (GLuint, GLenum, ^^GLvoid) -> void;
glInvalidateBufferData : (GLuint) -> void;
glInvalidateBufferSubData : (GLuint, GLintptr, GLsizeiptr) -> void;
glIsBuffer : (GLuint) -> GLboolean;
glMapBuffer : (GLenum, GLenum) -> ^void;
glMapNamedBuffer : (GLuint, GLenum) -> ^void;
glMapBufferRange : (GLenum, GLintptr, GLsizeiptr, GLbitfield) -> ^void;
glMapNamedBufferRange : (GLuint, GLintptr, GLsizei, GLbitfield) -> ^void;
glMultiDrawArrays : (GLenum, ^GLint, ^GLsizei, GLsizei) -> void;
glMultiDrawArraysIndirect : (GLenum, ^void, GLsizei, GLsizei) -> void;
glMultiDrawElements : (GLenum, ^GLsizei, GLenum, ^^GLvoid, GLsizei) -> void;
glMultiDrawElementsBaseVertex : (GLenum, ^GLsizei, GLenum, ^^GLvoid, GLsizei, ^GLint) -> void;
glMultiDrawElementsIndirect : (GLenum, GLenum, ^void, GLsizei, GLsizei) -> void;
glPatchParameteri : (GLenum, GLint) -> void;
glPatchParameterfv : (GLenum, ^GLfloat) -> void;
glPrimitiveRestartIndex : (GLuint) -> void;
glProvokingVertex : (GLenum) -> void;
glUnmapBuffer : (GLenum) -> GLboolean;
glUnmapNamedBuffer : (GLuint) -> GLboolean;
glVertexArrayElementBuffer : (GLuint, GLuint) -> void;
glVertexAttrib1f : (GLuint, GLfloat) -> void;
glVertexAttrib1s : (GLuint, GLshort) -> void;
glVertexAttrib1d : (GLuint, GLdouble) -> void;
glVertexAttribI1i : (GLuint, GLint) -> void;
glVertexAttribI1ui : (GLuint, GLuint) -> void;
glVertexAttrib2f : (GLuint, GLfloat, GLfloat) -> void;
glVertexAttrib2s : (GLuint, GLshort, GLshort) -> void;
glVertexAttrib2d : (GLuint, GLdouble, GLdouble) -> void;
glVertexAttribI2i : (GLuint, GLint, GLint) -> void;
glVertexAttribI2ui : (GLuint, GLint, GLint) -> void;
glVertexAttrib3f : (GLuint, GLfloat, GLfloat, GLfloat) -> void;
glVertexAttrib3s : (GLuint, GLshort, GLshort, GLshort) -> void;
glVertexAttrib3d : (GLuint, GLdouble, GLdouble, GLdouble) -> void;
glVertexAttribI3i : (GLuint, GLint, GLint, GLint) -> void;
glVertexAttribI3ui : (GLuint, GLuint, GLuint, GLuint) -> void;
glVertexAttrib4f : (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
glVertexAttrib4s : (GLuint, GLshort, GLshort, GLshort, GLshort) -> void;
glVertexAttrib4d : (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> void;
glVertexAttrib4Nub : (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) -> void;
glVertexAttribI4i : (GLuint, GLint, GLint, GLint, GLint) -> void;
glVertexAttribI4ui : (GLuint, GLuint, GLuint, GLuint, GLuint) -> void;
glVertexAttribL1d : (GLuint, GLdouble) -> void;
glVertexAttribL2d : (GLuint, GLdouble, GLdouble) -> void;
glVertexAttribL3d : (GLuint, GLdouble, GLdouble, GLdouble) -> void;
glVertexAttribL4d : (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> void;
glVertexAttrib1fv : (GLuint, ^GLfloat) -> void;
glVertexAttrib1sv : (GLuint, ^GLshort) -> void;
glVertexAttrib1dv : (GLuint, ^GLdouble) -> void;
glVertexAttribI1iv : (GLuint, ^GLint) -> void;
glVertexAttribI1uiv : (GLuint, ^GLuint) -> void;
glVertexAttrib2fv : (GLuint, ^GLfloat) -> void;
glVertexAttrib2sv : (GLuint, ^GLshort) -> void;
glVertexAttrib2dv : (GLuint, ^GLdouble) -> void;
glVertexAttribI2iv : (GLuint, ^GLint) -> void;
glVertexAttribI2uiv : (GLuint, ^GLuint) -> void;
glVertexAttrib3fv : (GLuint, ^GLfloat) -> void;
glVertexAttrib3sv : (GLuint, ^GLshort) -> void;
glVertexAttrib3dv : (GLuint, ^GLdouble) -> void;
glVertexAttribI3iv : (GLuint, ^GLint) -> void;
glVertexAttribI3uiv : (GLuint, ^GLuint) -> void;
glVertexAttrib4fv : (GLuint, ^GLfloat) -> void;
glVertexAttrib4sv : (GLuint, ^GLshort) -> void;
glVertexAttrib4dv : (GLuint, ^GLdouble) -> void;
glVertexAttrib4iv : (GLuint, ^GLint) -> void;
glVertexAttrib4bv : (GLuint, ^GLbyte) -> void;
glVertexAttrib4ubv : (GLuint, ^GLubyte) -> void;
glVertexAttrib4usv : (GLuint, ^GLushort) -> void;
glVertexAttrib4uiv : (GLuint, ^GLuint) -> void;
glVertexAttrib4Nbv : (GLuint, ^GLbyte) -> void;
glVertexAttrib4Nsv : (GLuint, ^GLshort) -> void;
glVertexAttrib4Niv : (GLuint, ^GLint) -> void;
glVertexAttrib4Nubv : (GLuint, ^GLubyte) -> void;
glVertexAttrib4Nusv : (GLuint, ^GLushort) -> void;
glVertexAttrib4Nuiv : (GLuint, ^GLuint) -> void;
glVertexAttribI4bv : (GLuint, ^GLbyte) -> void;
glVertexAttribI4ubv : (GLuint, ^GLubyte) -> void;
glVertexAttribI4sv : (GLuint, ^GLshort) -> void;
glVertexAttribI4usv : (GLuint, ^GLushort) -> void;
glVertexAttribI4iv : (GLuint, ^GLint) -> void;
glVertexAttribI4uiv : (GLuint, ^GLuint) -> void;
glVertexAttribL1dv : (GLuint, ^GLdouble) -> void;
glVertexAttribL2dv : (GLuint, ^GLdouble) -> void;
glVertexAttribL3dv : (GLuint, ^GLdouble) -> void;
glVertexAttribL4dv : (GLuint, ^GLdouble) -> void;
glVertexAttribP1ui : (GLuint, GLenum, GLboolean, GLuint) -> void;
glVertexAttribP2ui : (GLuint, GLenum, GLboolean, GLuint) -> void;
glVertexAttribP3ui : (GLuint, GLenum, GLboolean, GLuint) -> void;
glVertexAttribP4ui : (GLuint, GLenum, GLboolean, GLuint) -> void;
glVertexAttribBinding : (GLuint, GLuint) -> void;
glVertexArrayAttribBinding : (GLuint, GLuint, GLuint) -> void;
glVertexAttribDivisor : (GLuint, GLuint) -> void;
glVertexAttribFormat : (GLuint, GLint, GLenum, GLboolean, GLuint) -> void;
glVertexAttribIFormat : (GLuint, GLint, GLenum, GLuint) -> void;
glVertexAttribLFormat : (GLuint, GLint, GLenum, GLuint) -> void;
glVertexArrayAttribFormat : (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) -> void;
glVertexArrayAttribIFormat : (GLuint, GLuint, GLint, GLenum, GLuint) -> void;
glVertexArrayAttribLFormat : (GLuint, GLuint, GLint, GLenum, GLuint) -> void;
glVertexAttribPointer : (GLuint, GLint, GLenum, GLboolean, GLsizei, ^GLvoid) -> void;
glVertexAttribIPointer : (GLuint, GLint, GLenum, GLsizei, ^GLvoid) -> void;
glVertexAttribLPointer : (GLuint, GLint, GLenum, GLsizei, ^GLvoid) -> void;
glVertexBindingDivisor : (GLuint, GLuint) -> void;
glVertexArrayBindingDivisor : (GLuint, GLuint, GLuint) -> void;


hogl_init_extensions:() -> s32 {
    glClearBufferiv = (wglGetProcAddress("glClearBufferiv".data) -> ^void) -> (GLenum, GLint, ^GLint) -> void;
    glClearBufferuiv = (wglGetProcAddress("glClearBufferuiv".data) -> ^void) -> (GLenum, GLint, ^GLuint) -> void;
    glClearBufferfv = (wglGetProcAddress("glClearBufferfv".data) -> ^void) -> (GLenum, GLint, ^GLfloat) -> void;
    glClearBufferfi = (wglGetProcAddress("glClearBufferfi".data) -> ^void) -> (GLenum, GLint, GLfloat, GLint) -> void;
    glClearNamedFramebufferiv = (wglGetProcAddress("glClearNamedFramebufferiv".data) -> ^void) -> (GLuint, GLenum, GLint, ^GLint) -> void;
    glClearNamedFramebufferuiv = (wglGetProcAddress("glClearNamedFramebufferuiv".data) -> ^void) -> (GLuint, GLuint, GLint, ^GLuint) -> void;
    glClearNamedFramebufferfv = (wglGetProcAddress("glClearNamedFramebufferfv".data) -> ^void) -> (GLuint, GLuint, GLint, ^GLfloat) -> void;
    glClearNamedFramebufferfi = (wglGetProcAddress("glClearNamedFramebufferfi".data) -> ^void) -> (GLuint, GLuint, GLint, GLfloat, GLint) -> void;
    glNamedFramebufferReadBuffer = (wglGetProcAddress("glNamedFramebufferReadBuffer".data) -> ^void) -> (GLuint, GLenum) -> void;
    glReadnPixels = (wglGetProcAddress("glReadnPixels".data) -> ^void) -> (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ^void) -> void;
    glClearDepth = (wglGetProcAddress("glClearDepth".data) -> ^void) -> (GLdouble) -> void;
    glClearStencil = (wglGetProcAddress("glClearStencil".data) -> ^void) -> (GLint) -> void;
    glDrawBuffer = (wglGetProcAddress("glDrawBuffer".data) -> ^void) -> (GLenum) -> void;
    glFinish = (wglGetProcAddress("glFinish".data) -> ^void) -> () -> void;
    glFlush = (wglGetProcAddress("glFlush".data) -> ^void) -> () -> void;
    glReadBuffer = (wglGetProcAddress("glReadBuffer".data) -> ^void) -> (GLenum) -> void;
    glReadPixels = (wglGetProcAddress("glReadPixels".data) -> ^void) -> (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ^GLvoid) -> void;

    glActiveTexture = (wglGetProcAddress("glActiveTexture".data) -> ^void) -> (GLenum) -> void;
    glBindImageTexture = (wglGetProcAddress("glBindImageTexture".data) -> ^void) -> (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) -> void;
    glBindImageTextures = (wglGetProcAddress("glBindImageTextures".data) -> ^void) -> (GLuint, GLsizei, ^GLuint) -> void;
    glBindTexture = (wglGetProcAddress("glBindTexture".data) -> ^void) -> (GLenum, GLuint) -> void;
    glBindTextureUnit = (wglGetProcAddress("glBindTextureUnit".data) -> ^void) -> (GLuint, GLuint) -> void;
    glBindTextures = (wglGetProcAddress("glBindTextures".data) -> ^void) -> (GLuint, GLsizei, ^GLuint) -> void;
    glClearTexImage = (wglGetProcAddress("glClearTexImage".data) -> ^void) -> (GLuint, GLint, GLenum, GLenum, ^void) -> void;
    glClearTexSubImage = (wglGetProcAddress("glClearTexSubImage".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ^void) -> void;
    glCompressedTexImage1D = (wglGetProcAddress("glCompressedTexImage1D".data) -> ^void) -> (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ^GLvoid) -> void;
    glCompressedTexImage2D = (wglGetProcAddress("glCompressedTexImage2D".data) -> ^void) -> (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ^GLvoid) -> void;
    glCompressedTexImage3D = (wglGetProcAddress("glCompressedTexImage3D".data) -> ^void) -> (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ^GLvoid) -> void;
    glCompressedTexSubImage1D = (wglGetProcAddress("glCompressedTexSubImage1D".data) -> ^void) -> (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ^GLvoid) -> void;
    glCompressedTextureSubImage1D = (wglGetProcAddress("glCompressedTextureSubImage1D".data) -> ^void) -> (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ^void) -> void;
    glCompressedTexSubImage2D = (wglGetProcAddress("glCompressedTexSubImage2D".data) -> ^void) -> (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ^GLvoid) -> void;
    glCompressedTextureSubImage2D = (wglGetProcAddress("glCompressedTextureSubImage2D".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ^void) -> void;
    glCompressedTexSubImage3D = (wglGetProcAddress("glCompressedTexSubImage3D".data) -> ^void) -> (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ^GLvoid) -> void;
    glCompressedTextureSubImage3D = (wglGetProcAddress("glCompressedTextureSubImage3D".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ^void) -> void;
    glCopyTextureSubImage1D = (wglGetProcAddress("glCopyTextureSubImage1D".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint, GLsizei) -> void;
    glCopyTextureSubImage2D = (wglGetProcAddress("glCopyTextureSubImage2D".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
    glCopyImageSubData = (wglGetProcAddress("glCopyImageSubData".data) -> ^void) -> (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> void;
    glCopyTexImage1D = (wglGetProcAddress("glCopyTexImage1D".data) -> ^void) -> (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) -> void;
    glCopyTexImage2D = (wglGetProcAddress("glCopyTexImage2D".data) -> ^void) -> (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) -> void;
    glCopyTexSubImage1D = (wglGetProcAddress("glCopyTexSubImage1D".data) -> ^void) -> (GLenum, GLint, GLint, GLint, GLint, GLsizei) -> void;
    glCopyTexSubImage2D = (wglGetProcAddress("glCopyTexSubImage2D".data) -> ^void) -> (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
    glCopyTexSubImage3D = (wglGetProcAddress("glCopyTexSubImage3D".data) -> ^void) -> (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
    glCopyTextureSubImage3D = (wglGetProcAddress("glCopyTextureSubImage3D".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
    glCreateTextures = (wglGetProcAddress("glCreateTextures".data) -> ^void) -> (GLenum, GLsizei, ^GLuint) -> void;
    glDeleteTextures = (wglGetProcAddress("glDeleteTextures".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glGenTextures = (wglGetProcAddress("glGenTextures".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glGetCompressedTexImage = (wglGetProcAddress("glGetCompressedTexImage".data) -> ^void) -> (GLenum, GLint, ^GLvoid) -> void;
    glGetnCompressedTexImage = (wglGetProcAddress("glGetnCompressedTexImage".data) -> ^void) -> (GLenum, GLint, GLsizei, ^void) -> void;
    glGetCompressedTextureImage = (wglGetProcAddress("glGetCompressedTextureImage".data) -> ^void) -> (GLuint, GLint, GLsizei, ^void) -> void;
    glGetCompressedTextureSubImage = (wglGetProcAddress("glGetCompressedTextureSubImage".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ^void) -> void;
    glGetTexImage = (wglGetProcAddress("glGetTexImage".data) -> ^void) -> (GLenum, GLint, GLenum, GLenum, ^GLvoid) -> void;
    glGetnTexImage = (wglGetProcAddress("glGetnTexImage".data) -> ^void) -> (GLenum, GLint, GLenum, GLenum, GLsizei, ^void) -> void;
    glGetTextureImage = (wglGetProcAddress("glGetTextureImage".data) -> ^void) -> (GLuint, GLint, GLenum, GLenum, GLsizei, ^void) -> void;
    glGetTexLevelParameterfv = (wglGetProcAddress("glGetTexLevelParameterfv".data) -> ^void) -> (GLenum, GLint, GLenum, ^GLfloat) -> void;
    glGetTexLevelParameteriv = (wglGetProcAddress("glGetTexLevelParameteriv".data) -> ^void) -> (GLenum, GLint, GLenum, ^GLint) -> void;
    glGetTextureLevelParameterfv = (wglGetProcAddress("glGetTextureLevelParameterfv".data) -> ^void) -> (GLuint, GLint, GLenum, ^GLfloat) -> void;
    glGetTextureLevelParameteriv = (wglGetProcAddress("glGetTextureLevelParameteriv".data) -> ^void) -> (GLuint, GLint, GLenum, ^GLint) -> void;
    glGetTexParameterfv = (wglGetProcAddress("glGetTexParameterfv".data) -> ^void) -> (GLenum, GLint, GLenum, ^GLfloat) -> void;
    glGetTexParameteriv = (wglGetProcAddress("glGetTexParameteriv".data) -> ^void) -> (GLenum, GLint, GLenum, ^GLint) -> void;
    glGetTexParameterIiv = (wglGetProcAddress("glGetTexParameterIiv".data) -> ^void) -> (GLenum, GLenum, ^GLint) -> void;
    glGetTexParameterIuiv = (wglGetProcAddress("glGetTexParameterIuiv".data) -> ^void) -> (GLenum, GLenum, ^GLuint) -> void;
    glGetTextureParameterfv = (wglGetProcAddress("glGetTextureParameterfv".data) -> ^void) -> (GLuint, GLenum, ^GLfloat) -> void;
    glGetTextureParameteriv = (wglGetProcAddress("glGetTextureParameteriv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetTextureParameterIiv = (wglGetProcAddress("glGetTextureParameterIiv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetTextureParameterIuiv = (wglGetProcAddress("glGetTextureParameterIuiv".data) -> ^void) -> (GLuint, GLenum, ^GLuint) -> void;
    glGetTextureSubImage = (wglGetProcAddress("glGetTextureSubImage".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ^void) -> void;
    glInvalidateTexImage = (wglGetProcAddress("glInvalidateTexImage".data) -> ^void) -> (GLuint, GLint) -> void;
    glInvalidateTexSubImage = (wglGetProcAddress("glInvalidateTexSubImage".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> void;
    glIsTexture = (wglGetProcAddress("glIsTexture".data) -> ^void) -> (GLuint) -> GLboolean;
    glTexBuffer = (wglGetProcAddress("glTexBuffer".data) -> ^void) -> (GLenum, GLenum, GLuint) -> void;
    glTextureBuffer = (wglGetProcAddress("glTextureBuffer".data) -> ^void) -> (GLuint, GLenum, GLuint) -> void;
    glTexBufferRange = (wglGetProcAddress("glTexBufferRange".data) -> ^void) -> (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) -> void;
    glTextureBufferRange = (wglGetProcAddress("glTextureBufferRange".data) -> ^void) -> (GLenum, GLenum, GLuint, GLintptr, GLsizei) -> void;
    glTexImage1D = (wglGetProcAddress("glTexImage1D".data) -> ^void) -> (GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ^GLvoid) -> void;
    glTexImage2D = (wglGetProcAddress("glTexImage2D".data) -> ^void) -> (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ^GLvoid) -> void;
    glTexImage2DMultisample = (wglGetProcAddress("glTexImage2DMultisample".data) -> ^void) -> (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> void;
    glTexImage3D = (wglGetProcAddress("glTexImage3D".data) -> ^void) -> (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ^GLvoid) -> void;
    glTexImage3DMultisample = (wglGetProcAddress("glTexImage3DMultisample".data) -> ^void) -> (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> void;
    glTexParameterf = (wglGetProcAddress("glTexParameterf".data) -> ^void) -> (GLenum, GLenum, GLfloat) -> void;
    glTexParameteri = (wglGetProcAddress("glTexParameteri".data) -> ^void) -> (GLenum, GLenum, GLint) -> void;
    glTextureParameterf = (wglGetProcAddress("glTextureParameterf".data) -> ^void) -> (GLenum, GLenum, GLfloat) -> void;
    glTextureParameteri = (wglGetProcAddress("glTextureParameteri".data) -> ^void) -> (GLenum, GLenum, GLint) -> void;
    glTexParameterfv = (wglGetProcAddress("glTexParameterfv".data) -> ^void) -> (GLenum, GLenum, ^GLfloat) -> void;
    glTexParameteriv = (wglGetProcAddress("glTexParameteriv".data) -> ^void) -> (GLenum, GLenum, ^GLint) -> void;
    glTexParameterIiv = (wglGetProcAddress("glTexParameterIiv".data) -> ^void) -> (GLenum, GLenum, ^GLint) -> void;
    glTexParameterIuiv = (wglGetProcAddress("glTexParameterIuiv".data) -> ^void) -> (GLenum, GLenum, ^GLuint) -> void;
    glTextureParameterfv = (wglGetProcAddress("glTextureParameterfv".data) -> ^void) -> (GLuint, GLenum, ^GLfloat) -> void;
    glTextureParameteriv = (wglGetProcAddress("glTextureParameteriv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glTextureParameterIiv = (wglGetProcAddress("glTextureParameterIiv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glTextureParameterIuiv = (wglGetProcAddress("glTextureParameterIuiv".data) -> ^void) -> (GLuint, GLenum, ^GLuint) -> void;
    glTexStorage1D = (wglGetProcAddress("glTexStorage1D".data) -> ^void) -> (GLenum, GLsizei, GLenum, GLsizei) -> void;
    glTextureStorage1D = (wglGetProcAddress("glTextureStorage1D".data) -> ^void) -> (GLuint, GLsizei, GLenum, GLsizei) -> void;
    glTexStorage2D = (wglGetProcAddress("glTexStorage2D".data) -> ^void) -> (GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> void;
    glTextureStorage2D = (wglGetProcAddress("glTextureStorage2D".data) -> ^void) -> (GLuint, GLsizei, GLenum, GLsizei, GLsizei) -> void;
    glTexStorage2DMultisample = (wglGetProcAddress("glTexStorage2DMultisample".data) -> ^void) -> (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> void;
    glTextureStorage2DMultisample = (wglGetProcAddress("glTextureStorage2DMultisample".data) -> ^void) -> (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> void;
    glTexStorage3D = (wglGetProcAddress("glTexStorage3D".data) -> ^void) -> (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> void;
    glTextureStorage3D = (wglGetProcAddress("glTextureStorage3D".data) -> ^void) -> (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> void;
    glTexStorage3DMultisample = (wglGetProcAddress("glTexStorage3DMultisample".data) -> ^void) -> (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> void;
    glTextureStorage3DMultisample = (wglGetProcAddress("glTextureStorage3DMultisample".data) -> ^void) -> (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> void;
    glTexSubImage1D = (wglGetProcAddress("glTexSubImage1D".data) -> ^void) -> (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ^GLvoid) -> void;
    glTextureSubImage1D = (wglGetProcAddress("glTextureSubImage1D".data) -> ^void) -> (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ^void) -> void;
    glTexSubImage2D = (wglGetProcAddress("glTexSubImage2D".data) -> ^void) -> (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ^GLvoid) -> void;
    glTextureSubImage2D = (wglGetProcAddress("glTextureSubImage2D".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ^void) -> void;
    glTexSubImage3D = (wglGetProcAddress("glTexSubImage3D".data) -> ^void) -> (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ^GLvoid) -> void;
    glTextureSubImage3D = (wglGetProcAddress("glTextureSubImage3D".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ^void) -> void;
    glTextureView = (wglGetProcAddress("glTextureView".data) -> ^void) -> (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) -> void;

    glBindFramebuffer = (wglGetProcAddress("glBindFramebuffer".data) -> ^void) -> (GLenum, GLuint) -> void;
    glBindRenderbuffer = (wglGetProcAddress("glBindRenderbuffer".data) -> ^void) -> (GLenum, GLuint) -> void;
    glBlitFramebuffer = (wglGetProcAddress("glBlitFramebuffer".data) -> ^void) -> (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> void;
    glBlitNamedFramebuffer = (wglGetProcAddress("glBlitNamedFramebuffer".data) -> ^void) -> (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> void;
    glCheckFramebufferStatus = (wglGetProcAddress("glCheckFramebufferStatus".data) -> ^void) -> (GLenum) -> GLenum;
    glCheckNamedFramebufferStatus = (wglGetProcAddress("glCheckNamedFramebufferStatus".data) -> ^void) -> (GLuint, GLenum) -> GLenum;
    glCreateFramebuffers = (wglGetProcAddress("glCreateFramebuffers".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glCreateRenderbuffers = (wglGetProcAddress("glCreateRenderbuffers".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glDeleteFramebuffers = (wglGetProcAddress("glDeleteFramebuffers".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glDeleteRenderbuffers = (wglGetProcAddress("glDeleteRenderbuffers".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glDrawBuffers = (wglGetProcAddress("glDrawBuffers".data) -> ^void) -> (GLsizei, ^GLenum) -> void;
    glNamedFramebufferDrawBuffers = (wglGetProcAddress("glNamedFramebufferDrawBuffers".data) -> ^void) -> (GLuint, GLsizei, ^GLenum) -> void;
    glFramebufferParameteri = (wglGetProcAddress("glFramebufferParameteri".data) -> ^void) -> (GLenum, GLenum, GLint) -> void;
    glNamedFramebufferParameteri = (wglGetProcAddress("glNamedFramebufferParameteri".data) -> ^void) -> (GLuint, GLenum, GLint) -> void;
    glFramebufferRenderbuffer = (wglGetProcAddress("glFramebufferRenderbuffer".data) -> ^void) -> (GLenum, GLenum, GLenum, GLuint) -> void;
    glNamedFramebufferRenderbuffer = (wglGetProcAddress("glNamedFramebufferRenderbuffer".data) -> ^void) -> (GLuint, GLenum, GLenum, GLuint) -> void;
    glFramebufferTexture = (wglGetProcAddress("glFramebufferTexture".data) -> ^void) -> (GLenum, GLenum, GLuint, GLint) -> void;
    glFramebufferTexture1D = (wglGetProcAddress("glFramebufferTexture1D".data) -> ^void) -> (GLenum, GLenum, GLenum, GLuint, GLint) -> void;
    glFramebufferTexture2D = (wglGetProcAddress("glFramebufferTexture2D".data) -> ^void) -> (GLenum, GLenum, GLenum, GLuint, GLint) -> void;
    glFramebufferTexture3D = (wglGetProcAddress("glFramebufferTexture3D".data) -> ^void) -> (GLenum, GLenum, GLenum, GLuint, GLint, GLint) -> void;
    glNamedFramebufferTexture = (wglGetProcAddress("glNamedFramebufferTexture".data) -> ^void) -> (GLuint, GLenum, GLuint, GLint) -> void;
    glFramebufferTextureLayer = (wglGetProcAddress("glFramebufferTextureLayer".data) -> ^void) -> (GLenum, GLenum, GLuint, GLint, GLint) -> void;
    glNamedFramebufferTextureLayer = (wglGetProcAddress("glNamedFramebufferTextureLayer".data) -> ^void) -> (GLuint, GLenum, GLuint, GLint, GLint) -> void;
    glGenFramebuffers = (wglGetProcAddress("glGenFramebuffers".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glGenRenderbuffers = (wglGetProcAddress("glGenRenderbuffers".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glGenerateMipmap = (wglGetProcAddress("glGenerateMipmap".data) -> ^void) -> (GLenum) -> void;
    glGenerateTextureMipmap = (wglGetProcAddress("glGenerateTextureMipmap".data) -> ^void) -> (GLuint) -> void;
    glGetFramebufferAttachmentParameteriv = (wglGetProcAddress("glGetFramebufferAttachmentParameteriv".data) -> ^void) -> (GLenum, GLenum, GLenum, ^GLint) -> void;
    glGetNamedFramebufferAttachmentParameteriv = (wglGetProcAddress("glGetNamedFramebufferAttachmentParameteriv".data) -> ^void) -> (GLuint, GLenum, GLenum, ^GLint) -> void;
    glGetFramebufferParameteriv = (wglGetProcAddress("glGetFramebufferParameteriv".data) -> ^void) -> (GLenum, GLenum, ^GLint) -> void;
    glGetNamedFramebufferParameteriv = (wglGetProcAddress("glGetNamedFramebufferParameteriv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetRenderbufferParameteriv = (wglGetProcAddress("glGetRenderbufferParameteriv".data) -> ^void) -> (GLenum, GLenum, ^GLint) -> void;
    glGetNamedRenderbufferParameteriv = (wglGetProcAddress("glGetNamedRenderbufferParameteriv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glInvalidateFramebuffer = (wglGetProcAddress("glInvalidateFramebuffer".data) -> ^void) -> (GLenum, GLsizei, ^GLenum) -> void;
    glInvalidateNamedFramebufferData = (wglGetProcAddress("glInvalidateNamedFramebufferData".data) -> ^void) -> (GLuint, GLsizei, ^GLenum) -> void;
    glInvalidateSubFramebuffer = (wglGetProcAddress("glInvalidateSubFramebuffer".data) -> ^void) -> (GLenum, GLsizei, ^GLenum, GLint, GLint, GLint, GLint) -> void;
    glInvalidateNamedFramebufferSubData = (wglGetProcAddress("glInvalidateNamedFramebufferSubData".data) -> ^void) -> (GLuint, GLsizei, ^GLenum, GLint, GLint, GLsizei, GLsizei) -> void;
    glIsFramebuffer = (wglGetProcAddress("glIsFramebuffer".data) -> ^void) -> (GLuint) -> GLboolean;
    glIsRenderbuffer = (wglGetProcAddress("glIsRenderbuffer".data) -> ^void) -> (GLuint) -> GLboolean;
    glRenderbufferStorage = (wglGetProcAddress("glRenderbufferStorage".data) -> ^void) -> (GLenum, GLenum, GLsizei, GLsizei) -> void;
    glNamedRenderbufferStorage = (wglGetProcAddress("glNamedRenderbufferStorage".data) -> ^void) -> (GLuint, GLenum, GLsizei, GLsizei) -> void;
    glRenderbufferStorageMultisample = (wglGetProcAddress("glRenderbufferStorageMultisample".data) -> ^void) -> (GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> void;
    glNamedRenderbufferStorageMultisample = (wglGetProcAddress("glNamedRenderbufferStorageMultisample".data) -> ^void) -> (GLuint, GLsizei, GLenum, GLsizei, GLsizei) -> void;
    glSampleMaski = (wglGetProcAddress("glSampleMaski".data) -> ^void) -> (GLuint, GLbitfield) -> void;

    glAttachShader = (wglGetProcAddress("glAttachShader".data) -> ^void) -> (GLuint, GLuint) -> void;
    glBindAttribLocation = (wglGetProcAddress("glBindAttribLocation".data) -> ^void) -> (GLuint, GLuint, ^GLchar) -> void;
    glBindFragDataLocation = (wglGetProcAddress("glBindFragDataLocation".data) -> ^void) -> (GLuint, GLuint, ^s8) -> void;
    glBindFragDataLocationIndexed = (wglGetProcAddress("glBindFragDataLocationIndexed".data) -> ^void) -> (GLuint, GLuint, GLuint, ^s8) -> void;
    glCompileShader = (wglGetProcAddress("glCompileShader".data) -> ^void) -> (GLuint) -> void;
    glCreateProgram = (wglGetProcAddress("glCreateProgram".data) -> ^void) -> () -> GLuint;
    glCreateShader = (wglGetProcAddress("glCreateShader".data) -> ^void) -> (GLenum) -> GLuint;
    glCreateShaderProgramv = (wglGetProcAddress("glCreateShaderProgramv".data) -> ^void) -> (GLenum, GLsizei, ^^s8) -> GLuint;
    glDeleteProgram = (wglGetProcAddress("glDeleteProgram".data) -> ^void) -> (GLuint) -> void;
    glDeleteShader = (wglGetProcAddress("glDeleteShader".data) -> ^void) -> (GLuint) -> void;
    glDetachShader = (wglGetProcAddress("glDetachShader".data) -> ^void) -> (GLuint, GLuint) -> void;
    glGetActiveAtomicCounterBufferiv = (wglGetProcAddress("glGetActiveAtomicCounterBufferiv".data) -> ^void) -> (GLuint, GLuint, GLenum, ^GLint) -> void;
    glGetActiveAttrib = (wglGetProcAddress("glGetActiveAttrib".data) -> ^void) -> (GLuint, GLuint, GLsizei, ^GLsizei, ^GLint, ^GLenum, ^GLchar) -> void;
    glGetActiveSubroutineName = (wglGetProcAddress("glGetActiveSubroutineName".data) -> ^void) -> (GLuint, GLenum, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
    glGetActiveSubroutineUniformiv = (wglGetProcAddress("glGetActiveSubroutineUniformiv".data) -> ^void) -> (GLuint, GLenum, GLuint, GLenum, ^GLint) -> void;
    glGetActiveSubroutineUniformName = (wglGetProcAddress("glGetActiveSubroutineUniformName".data) -> ^void) -> (GLuint, GLenum, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
    glGetActiveUniform = (wglGetProcAddress("glGetActiveUniform".data) -> ^void) -> (GLuint, GLuint, GLsizei, ^GLsizei, ^GLint, ^GLenum, ^GLchar) -> void;
    glGetActiveUniformBlockiv = (wglGetProcAddress("glGetActiveUniformBlockiv".data) -> ^void) -> (GLuint, GLuint, GLenum, ^GLint) -> void;
    glGetActiveUniformBlockName = (wglGetProcAddress("glGetActiveUniformBlockName".data) -> ^void) -> (GLuint, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
    glGetActiveUniformName = (wglGetProcAddress("glGetActiveUniformName".data) -> ^void) -> (GLuint, GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
    glGetActiveUniformsiv = (wglGetProcAddress("glGetActiveUniformsiv".data) -> ^void) -> (GLuint, GLsizei, ^GLuint, GLenum, ^GLint) -> void;
    glGetAttachedShaders = (wglGetProcAddress("glGetAttachedShaders".data) -> ^void) -> (GLuint, GLsizei, ^GLsizei, ^GLuint) -> void;
    glGetAttribLocation = (wglGetProcAddress("glGetAttribLocation".data) -> ^void) -> (GLuint, ^GLchar) -> GLint;
    glGetFragDataIndex = (wglGetProcAddress("glGetFragDataIndex".data) -> ^void) -> (GLuint, ^s8) -> GLint;
    glGetFragDataLocation = (wglGetProcAddress("glGetFragDataLocation".data) -> ^void) -> (GLuint, ^s8) -> GLint;
    glGetProgramiv = (wglGetProcAddress("glGetProgramiv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetProgramBinary = (wglGetProcAddress("glGetProgramBinary".data) -> ^void) -> (GLuint, GLsizei, ^GLsizei, ^GLenum, ^void) -> void;
    glGetProgramInfoLog = (wglGetProcAddress("glGetProgramInfoLog".data) -> ^void) -> (GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
    glGetProgramResourceiv = (wglGetProcAddress("glGetProgramResourceiv".data) -> ^void) -> (GLuint, GLenum, GLuint, GLsizei, ^GLenum, GLsizei, ^GLsizei, ^GLint) -> void;
    glGetProgramResourceIndex = (wglGetProcAddress("glGetProgramResourceIndex".data) -> ^void) -> (GLuint, GLenum, ^s8) -> GLuint;
    glGetProgramResourceLocation = (wglGetProcAddress("glGetProgramResourceLocation".data) -> ^void) -> (GLuint, GLenum, ^s8) -> GLint;
    glGetProgramResourceLocationIndex = (wglGetProcAddress("glGetProgramResourceLocationIndex".data) -> ^void) -> (GLuint, GLenum, ^s8) -> GLint;
    glGetProgramResourceName = (wglGetProcAddress("glGetProgramResourceName".data) -> ^void) -> (GLuint, GLenum, GLuint, GLsizei, ^GLsizei, ^s8) -> void;
    glGetProgramStageiv = (wglGetProcAddress("glGetProgramStageiv".data) -> ^void) -> (GLuint, GLenum, GLenum, ^GLint) -> void;
    glGetShaderiv = (wglGetProcAddress("glGetShaderiv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetShaderInfoLog = (wglGetProcAddress("glGetShaderInfoLog".data) -> ^void) -> (GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
    glGetShaderPrecisionFormat = (wglGetProcAddress("glGetShaderPrecisionFormat".data) -> ^void) -> (GLenum, GLenum, ^GLint, ^GLint) -> void;
    glGetShaderSource = (wglGetProcAddress("glGetShaderSource".data) -> ^void) -> (GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
    glGetSubroutineIndex = (wglGetProcAddress("glGetSubroutineIndex".data) -> ^void) -> (GLuint, GLenum, ^GLchar) -> GLuint;
    glGetSubroutineUniformLocation = (wglGetProcAddress("glGetSubroutineUniformLocation".data) -> ^void) -> (GLuint, GLenum, ^GLchar) -> GLint;
    glGetUniformfv = (wglGetProcAddress("glGetUniformfv".data) -> ^void) -> (GLuint, GLint, ^GLfloat) -> void;
    glGetUniformiv = (wglGetProcAddress("glGetUniformiv".data) -> ^void) -> (GLuint, GLint, ^GLint) -> void;
    glGetUniformuiv = (wglGetProcAddress("glGetUniformuiv".data) -> ^void) -> (GLuint, GLint, ^GLuint) -> void;
    glGetUniformdv = (wglGetProcAddress("glGetUniformdv".data) -> ^void) -> (GLuint, GLint, ^GLdouble) -> void;
    glGetnUniformfv = (wglGetProcAddress("glGetnUniformfv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLfloat) -> void;
    glGetnUniformiv = (wglGetProcAddress("glGetnUniformiv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLint) -> void;
    glGetnUniformuiv = (wglGetProcAddress("glGetnUniformuiv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLuint) -> void;
    glGetnUniformdv = (wglGetProcAddress("glGetnUniformdv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLdouble) -> void;
    glGetUniformBlockIndex = (wglGetProcAddress("glGetUniformBlockIndex".data) -> ^void) -> (GLuint, ^GLchar) -> GLuint;
    glGetUniformIndices = (wglGetProcAddress("glGetUniformIndices".data) -> ^void) -> (GLuint, GLsizei, ^^GLchar, ^GLuint) -> void;
    glGetUniformLocation = (wglGetProcAddress("glGetUniformLocation".data) -> ^void) -> (GLuint, ^GLchar) -> GLint;
    glGetUniformSubroutineuiv = (wglGetProcAddress("glGetUniformSubroutineuiv".data) -> ^void) -> (GLenum, GLint, ^GLuint) -> void;
    glIsProgram = (wglGetProcAddress("glIsProgram".data) -> ^void) -> (GLuint) -> GLboolean;
    glIsShader = (wglGetProcAddress("glIsShader".data) -> ^void) -> (GLuint) -> GLboolean;
    glLinkProgram = (wglGetProcAddress("glLinkProgram".data) -> ^void) -> (GLuint) -> void;
    glMinSampleShading = (wglGetProcAddress("glMinSampleShading".data) -> ^void) -> (GLfloat) -> void;
    glProgramBinary = (wglGetProcAddress("glProgramBinary".data) -> ^void) -> (GLuint, GLenum, ^void, GLsizei) -> void;
    glProgramParameteri = (wglGetProcAddress("glProgramParameteri".data) -> ^void) -> (GLuint, GLenum, GLint) -> void;
    glProgramUniform1f = (wglGetProcAddress("glProgramUniform1f".data) -> ^void) -> (GLuint, GLint, GLfloat) -> void;
    glProgramUniform2f = (wglGetProcAddress("glProgramUniform2f".data) -> ^void) -> (GLuint, GLint, GLfloat, GLfloat) -> void;
    glProgramUniform3f = (wglGetProcAddress("glProgramUniform3f".data) -> ^void) -> (GLuint, GLint, GLfloat, GLfloat, GLfloat) -> void;
    glProgramUniform4f = (wglGetProcAddress("glProgramUniform4f".data) -> ^void) -> (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
    glProgramUniform1i = (wglGetProcAddress("glProgramUniform1i".data) -> ^void) -> (GLuint, GLint, GLint) -> void;
    glProgramUniform2i = (wglGetProcAddress("glProgramUniform2i".data) -> ^void) -> (GLuint, GLint, GLint, GLint) -> void;
    glProgramUniform3i = (wglGetProcAddress("glProgramUniform3i".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint) -> void;
    glProgramUniform4i = (wglGetProcAddress("glProgramUniform4i".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint, GLint) -> void;
    glProgramUniform1ui = (wglGetProcAddress("glProgramUniform1ui".data) -> ^void) -> (GLuint, GLint, GLuint) -> void;
    glProgramUniform2ui = (wglGetProcAddress("glProgramUniform2ui".data) -> ^void) -> (GLuint, GLint, GLint, GLuint) -> void;
    glProgramUniform3ui = (wglGetProcAddress("glProgramUniform3ui".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLuint) -> void;
    glProgramUniform4ui = (wglGetProcAddress("glProgramUniform4ui".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint, GLuint) -> void;
    glProgramUniform1fv = (wglGetProcAddress("glProgramUniform1fv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLfloat) -> void;
    glProgramUniform2fv = (wglGetProcAddress("glProgramUniform2fv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLfloat) -> void;
    glProgramUniform3fv = (wglGetProcAddress("glProgramUniform3fv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLfloat) -> void;
    glProgramUniform4fv = (wglGetProcAddress("glProgramUniform4fv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLfloat) -> void;
    glProgramUniform1iv = (wglGetProcAddress("glProgramUniform1iv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLint) -> void;
    glProgramUniform2iv = (wglGetProcAddress("glProgramUniform2iv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLint) -> void;
    glProgramUniform3iv = (wglGetProcAddress("glProgramUniform3iv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLint) -> void;
    glProgramUniform4iv = (wglGetProcAddress("glProgramUniform4iv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLint) -> void;
    glProgramUniform1uiv = (wglGetProcAddress("glProgramUniform1uiv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLuint) -> void;
    glProgramUniform2uiv = (wglGetProcAddress("glProgramUniform2uiv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLuint) -> void;
    glProgramUniform3uiv = (wglGetProcAddress("glProgramUniform3uiv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLuint) -> void;
    glProgramUniform4uiv = (wglGetProcAddress("glProgramUniform4uiv".data) -> ^void) -> (GLuint, GLint, GLsizei, ^GLuint) -> void;
    glProgramUniformMatrix2fv = (wglGetProcAddress("glProgramUniformMatrix2fv".data) -> ^void) -> (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glProgramUniformMatrix3fv = (wglGetProcAddress("glProgramUniformMatrix3fv".data) -> ^void) -> (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glProgramUniformMatrix4fv = (wglGetProcAddress("glProgramUniformMatrix4fv".data) -> ^void) -> (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glProgramUniformMatrix2x3fv = (wglGetProcAddress("glProgramUniformMatrix2x3fv".data) -> ^void) -> (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glProgramUniformMatrix3x2fv = (wglGetProcAddress("glProgramUniformMatrix3x2fv".data) -> ^void) -> (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glProgramUniformMatrix2x4fv = (wglGetProcAddress("glProgramUniformMatrix2x4fv".data) -> ^void) -> (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glProgramUniformMatrix4x2fv = (wglGetProcAddress("glProgramUniformMatrix4x2fv".data) -> ^void) -> (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glProgramUniformMatrix3x4fv = (wglGetProcAddress("glProgramUniformMatrix3x4fv".data) -> ^void) -> (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glProgramUniformMatrix4x3fv = (wglGetProcAddress("glProgramUniformMatrix4x3fv".data) -> ^void) -> (GLuint, GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glReleaseShaderCompiler = (wglGetProcAddress("glReleaseShaderCompiler".data) -> ^void) -> () -> void;
    glShaderBinary = (wglGetProcAddress("glShaderBinary".data) -> ^void) -> (GLsizei, ^GLuint, GLenum, ^void, GLsizei) -> void;
    glShaderSource = (wglGetProcAddress("glShaderSource".data) -> ^void) -> (GLuint, GLsizei, ^^GLchar, ^GLint) -> void;
    glShaderStorageBlockBinding = (wglGetProcAddress("glShaderStorageBlockBinding".data) -> ^void) -> (GLuint, GLuint, GLuint) -> void;
    glUniform1f = (wglGetProcAddress("glUniform1f".data) -> ^void) -> (GLint, GLfloat) -> void;
    glUniform2f = (wglGetProcAddress("glUniform2f".data) -> ^void) -> (GLint, GLfloat, GLfloat) -> void;
    glUniform3f = (wglGetProcAddress("glUniform3f".data) -> ^void) -> (GLint, GLfloat, GLfloat, GLfloat) -> void;
    glUniform4f = (wglGetProcAddress("glUniform4f".data) -> ^void) -> (GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
    glUniform1i = (wglGetProcAddress("glUniform1i".data) -> ^void) -> (GLint, GLint) -> void;
    glUniform2i = (wglGetProcAddress("glUniform2i".data) -> ^void) -> (GLint, GLint, GLint) -> void;
    glUniform3i = (wglGetProcAddress("glUniform3i".data) -> ^void) -> (GLint, GLint, GLint, GLint) -> void;
    glUniform4i = (wglGetProcAddress("glUniform4i".data) -> ^void) -> (GLint, GLint, GLint, GLint, GLint) -> void;
    glUniform1ui = (wglGetProcAddress("glUniform1ui".data) -> ^void) -> (GLint, GLuint) -> void;
    glUniform2ui = (wglGetProcAddress("glUniform2ui".data) -> ^void) -> (GLint, GLuint, GLuint) -> void;
    glUniform3ui = (wglGetProcAddress("glUniform3ui".data) -> ^void) -> (GLint, GLuint, GLuint, GLuint) -> void;
    glUniform4ui = (wglGetProcAddress("glUniform4ui".data) -> ^void) -> (GLint, GLuint, GLuint, GLuint, GLuint) -> void;
    glUniform1fv = (wglGetProcAddress("glUniform1fv".data) -> ^void) -> (GLint, GLsizei, ^GLfloat) -> void;
    glUniform2fv = (wglGetProcAddress("glUniform2fv".data) -> ^void) -> (GLint, GLsizei, ^GLfloat) -> void;
    glUniform3fv = (wglGetProcAddress("glUniform3fv".data) -> ^void) -> (GLint, GLsizei, ^GLfloat) -> void;
    glUniform4fv = (wglGetProcAddress("glUniform4fv".data) -> ^void) -> (GLint, GLsizei, ^GLfloat) -> void;
    glUniform1iv = (wglGetProcAddress("glUniform1iv".data) -> ^void) -> (GLint, GLsizei, ^GLint) -> void;
    glUniform2iv = (wglGetProcAddress("glUniform2iv".data) -> ^void) -> (GLint, GLsizei, ^GLint) -> void;
    glUniform3iv = (wglGetProcAddress("glUniform3iv".data) -> ^void) -> (GLint, GLsizei, ^GLint) -> void;
    glUniform4iv = (wglGetProcAddress("glUniform4iv".data) -> ^void) -> (GLint, GLsizei, ^GLint) -> void;
    glUniform1uiv = (wglGetProcAddress("glUniform1uiv".data) -> ^void) -> (GLint, GLsizei, ^GLuint) -> void;
    glUniform2uiv = (wglGetProcAddress("glUniform2uiv".data) -> ^void) -> (GLint, GLsizei, ^GLuint) -> void;
    glUniform3uiv = (wglGetProcAddress("glUniform3uiv".data) -> ^void) -> (GLint, GLsizei, ^GLuint) -> void;
    glUniform4uiv = (wglGetProcAddress("glUniform4uiv".data) -> ^void) -> (GLint, GLsizei, ^GLuint) -> void;
    glUniformMatrix2fv = (wglGetProcAddress("glUniformMatrix2fv".data) -> ^void) -> (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glUniformMatrix3fv = (wglGetProcAddress("glUniformMatrix3fv".data) -> ^void) -> (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glUniformMatrix4fv = (wglGetProcAddress("glUniformMatrix4fv".data) -> ^void) -> (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glUniformMatrix2x3fv = (wglGetProcAddress("glUniformMatrix2x3fv".data) -> ^void) -> (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glUniformMatrix3x2fv = (wglGetProcAddress("glUniformMatrix3x2fv".data) -> ^void) -> (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glUniformMatrix2x4fv = (wglGetProcAddress("glUniformMatrix2x4fv".data) -> ^void) -> (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glUniformMatrix4x2fv = (wglGetProcAddress("glUniformMatrix4x2fv".data) -> ^void) -> (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glUniformMatrix3x4fv = (wglGetProcAddress("glUniformMatrix3x4fv".data) -> ^void) -> (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glUniformMatrix4x3fv = (wglGetProcAddress("glUniformMatrix4x3fv".data) -> ^void) -> (GLint, GLsizei, GLboolean, ^GLfloat) -> void;
    glUniformBlockBinding = (wglGetProcAddress("glUniformBlockBinding".data) -> ^void) -> (GLuint, GLuint, GLuint) -> void;
    glUniformSubroutinesuiv = (wglGetProcAddress("glUniformSubroutinesuiv".data) -> ^void) -> (GLenum, GLsizei, ^GLuint) -> void;
    glUseProgram = (wglGetProcAddress("glUseProgram".data) -> ^void) -> (GLuint) -> void;
    glUseProgramStages = (wglGetProcAddress("glUseProgramStages".data) -> ^void) -> (GLuint, GLbitfield, GLuint) -> void;
    glValidateProgram = (wglGetProcAddress("glValidateProgram".data) -> ^void) -> (GLuint) -> void;

    glBlendColor = (wglGetProcAddress("glBlendColor".data) -> ^void) -> (GLfloat, GLfloat, GLfloat, GLfloat) -> void;
    glBlendEquation = (wglGetProcAddress("glBlendEquation".data) -> ^void) -> (GLenum) -> void;
    glBlendEquationi = (wglGetProcAddress("glBlendEquationi".data) -> ^void) -> (GLuint, GLenum) -> void;
    glBlendEquationSeparate = (wglGetProcAddress("glBlendEquationSeparate".data) -> ^void) -> (GLenum, GLenum) -> void;
    glBlendEquationSeparatei = (wglGetProcAddress("glBlendEquationSeparatei".data) -> ^void) -> (GLuint, GLenum, GLenum) -> void;
    glBlendFunc = (wglGetProcAddress("glBlendFunc".data) -> ^void) -> (GLenum, GLenum) -> void;
    glBlendFunci = (wglGetProcAddress("glBlendFunci".data) -> ^void) -> (GLuint, GLenum, GLenum) -> void;
    glBlendFuncSeparate = (wglGetProcAddress("glBlendFuncSeparate".data) -> ^void) -> (GLenum, GLenum, GLenum, GLenum) -> void;
    glBlendFuncSeparatei = (wglGetProcAddress("glBlendFuncSeparatei".data) -> ^void) -> (GLuint, GLenum, GLenum, GLenum, GLenum) -> void;
    glClampColor = (wglGetProcAddress("glClampColor".data) -> ^void) -> (GLenum, GLenum) -> void;
    glClipControl = (wglGetProcAddress("glClipControl".data) -> ^void) -> (GLenum, GLenum) -> void;
    glColorMask = (wglGetProcAddress("glColorMask".data) -> ^void) -> (GLboolean, GLboolean, GLboolean, GLboolean) -> void;
    glColorMaski = (wglGetProcAddress("glColorMaski".data) -> ^void) -> (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) -> void;
    glCullFace = (wglGetProcAddress("glCullFace".data) -> ^void) -> (GLenum) -> void;
    glDepthFunc = (wglGetProcAddress("glDepthFunc".data) -> ^void) -> (GLenum) -> void;
    glDepthMask = (wglGetProcAddress("glDepthMask".data) -> ^void) -> (GLboolean) -> void;
    glDepthRange = (wglGetProcAddress("glDepthRange".data) -> ^void) -> (GLdouble, GLdouble) -> void;
    glDepthRangef = (wglGetProcAddress("glDepthRangef".data) -> ^void) -> (GLfloat, GLfloat) -> void;
    glDepthRangeArrayv = (wglGetProcAddress("glDepthRangeArrayv".data) -> ^void) -> (GLuint, GLsizei, ^GLdouble) -> void;
    glDepthRangeIndexed = (wglGetProcAddress("glDepthRangeIndexed".data) -> ^void) -> (GLuint, GLdouble, GLdouble) -> void;
    glDisable = (wglGetProcAddress("glDisable".data) -> ^void) -> (GLenum) -> void;
    glEnablei = (wglGetProcAddress("glEnablei".data) -> ^void) -> (GLenum, GLuint) -> void;
    glDisablei = (wglGetProcAddress("glDisablei".data) -> ^void) -> (GLenum, GLuint) -> void;
    glFrontFace = (wglGetProcAddress("glFrontFace".data) -> ^void) -> (GLenum) -> void;
    glGetBooleanv = (wglGetProcAddress("glGetBooleanv".data) -> ^void) -> (GLenum, ^GLboolean) -> void;
    glGetDoublev = (wglGetProcAddress("glGetDoublev".data) -> ^void) -> (GLenum, ^GLdouble) -> void;
    glGetFloatv = (wglGetProcAddress("glGetFloatv".data) -> ^void) -> (GLenum, ^GLfloat) -> void;
    glGetIntegerv = (wglGetProcAddress("glGetIntegerv".data) -> ^void) -> (GLenum, ^GLint) -> void;
    glGetInteger64v = (wglGetProcAddress("glGetInteger64v".data) -> ^void) -> (GLenum, ^GLint64) -> void;
    glGetBooleani_v = (wglGetProcAddress("glGetBooleani_v".data) -> ^void) -> (GLenum, GLuint, ^GLboolean) -> void;
    glGetFloati_v = (wglGetProcAddress("glGetFloati_v".data) -> ^void) -> (GLenum, GLuint, ^GLfloat) -> void;
    glGetDoublei_v = (wglGetProcAddress("glGetDoublei_v".data) -> ^void) -> (GLenum, GLuint, ^GLdouble) -> void;
    glGetInteger64i_v = (wglGetProcAddress("glGetInteger64i_v".data) -> ^void) -> (GLenum, GLuint, ^GLint64) -> void;
    glGetError = (wglGetProcAddress("glGetError".data) -> ^void) -> () -> GLenum;
    glHint = (wglGetProcAddress("glHint".data) -> ^void) -> (GLenum, GLenum) -> void;
    glIsEnabled = (wglGetProcAddress("glIsEnabled".data) -> ^void) -> (GLenum) -> GLboolean;
    glIsEnabledi = (wglGetProcAddress("glIsEnabledi".data) -> ^void) -> (GLenum, GLuint) -> GLboolean;
    glLineWidth = (wglGetProcAddress("glLineWidth".data) -> ^void) -> (GLfloat) -> void;
    glLogicOp = (wglGetProcAddress("glLogicOp".data) -> ^void) -> (GLenum) -> void;
    glPixelStoref = (wglGetProcAddress("glPixelStoref".data) -> ^void) -> (GLenum, GLfloat) -> void;
    glPixelStorei = (wglGetProcAddress("glPixelStorei".data) -> ^void) -> (GLenum, GLint) -> void;
    glPointParameterf = (wglGetProcAddress("glPointParameterf".data) -> ^void) -> (GLenum, GLfloat) -> void;
    glPointParameteri = (wglGetProcAddress("glPointParameteri".data) -> ^void) -> (GLenum, GLint) -> void;
    glPointParameterfv = (wglGetProcAddress("glPointParameterfv".data) -> ^void) -> (GLenum, ^GLfloat) -> void;
    glPointParameteriv = (wglGetProcAddress("glPointParameteriv".data) -> ^void) -> (GLenum, ^GLint) -> void;
    glPointSize = (wglGetProcAddress("glPointSize".data) -> ^void) -> (GLfloat) -> void;
    glPolygonMode = (wglGetProcAddress("glPolygonMode".data) -> ^void) -> (GLenum, GLenum) -> void;
    glPolygonOffset = (wglGetProcAddress("glPolygonOffset".data) -> ^void) -> (GLfloat, GLfloat) -> void;
    glScissor = (wglGetProcAddress("glScissor".data) -> ^void) -> (GLint, GLint, GLsizei, GLsizei) -> void;
    glSampleCoverage = (wglGetProcAddress("glSampleCoverage".data) -> ^void) -> (GLfloat, GLboolean) -> void;
    glScissorArrayv = (wglGetProcAddress("glScissorArrayv".data) -> ^void) -> (GLuint, GLsizei, ^GLint) -> void;
    glScissorIndexed = (wglGetProcAddress("glScissorIndexed".data) -> ^void) -> (GLuint, GLint, GLint, GLsizei, GLsizei) -> void;
    glScissorIndexedv = (wglGetProcAddress("glScissorIndexedv".data) -> ^void) -> (GLuint, ^GLint) -> void;
    glStencilFunc = (wglGetProcAddress("glStencilFunc".data) -> ^void) -> (GLenum, GLint, GLuint) -> void;
    glStencilFuncSeparate = (wglGetProcAddress("glStencilFuncSeparate".data) -> ^void) -> (GLenum, GLenum, GLint, GLuint) -> void;
    glStencilMask = (wglGetProcAddress("glStencilMask".data) -> ^void) -> (GLuint) -> void;
    glStencilMaskSeparate = (wglGetProcAddress("glStencilMaskSeparate".data) -> ^void) -> (GLenum, GLuint) -> void;
    glStencilOp = (wglGetProcAddress("glStencilOp".data) -> ^void) -> (GLenum, GLenum, GLenum) -> void;
    glStencilOpSeparate = (wglGetProcAddress("glStencilOpSeparate".data) -> ^void) -> (GLenum, GLenum, GLenum, GLenum) -> void;
    glViewportArrayv = (wglGetProcAddress("glViewportArrayv".data) -> ^void) -> (GLuint, GLsizei, ^GLfloat) -> void;
    glViewportIndexedf = (wglGetProcAddress("glViewportIndexedf".data) -> ^void) -> (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
    glViewportIndexedfv = (wglGetProcAddress("glViewportIndexedfv".data) -> ^void) -> (GLuint, ^GLfloat) -> void;

    glBlendColor = (wglGetProcAddress("glBlendColor".data) -> ^void) -> (GLfloat, GLfloat, GLfloat, GLfloat) -> void;
    glBlendEquation = (wglGetProcAddress("glBlendEquation".data) -> ^void) -> (GLenum) -> void;
    glBlendEquationi = (wglGetProcAddress("glBlendEquationi".data) -> ^void) -> (GLuint, GLenum) -> void;
    glBlendEquationSeparate = (wglGetProcAddress("glBlendEquationSeparate".data) -> ^void) -> (GLenum, GLenum) -> void;
    glBlendEquationSeparatei = (wglGetProcAddress("glBlendEquationSeparatei".data) -> ^void) -> (GLuint, GLenum, GLenum) -> void;
    glBlendFunc = (wglGetProcAddress("glBlendFunc".data) -> ^void) -> (GLenum, GLenum) -> void;
    glBlendFunci = (wglGetProcAddress("glBlendFunci".data) -> ^void) -> (GLuint, GLenum, GLenum) -> void;
    glBlendFuncSeparate = (wglGetProcAddress("glBlendFuncSeparate".data) -> ^void) -> (GLenum, GLenum, GLenum, GLenum) -> void;
    glBlendFuncSeparatei = (wglGetProcAddress("glBlendFuncSeparatei".data) -> ^void) -> (GLuint, GLenum, GLenum, GLenum, GLenum) -> void;
    glClampColor = (wglGetProcAddress("glClampColor".data) -> ^void) -> (GLenum, GLenum) -> void;
    glClipControl = (wglGetProcAddress("glClipControl".data) -> ^void) -> (GLenum, GLenum) -> void;
    glColorMask = (wglGetProcAddress("glColorMask".data) -> ^void) -> (GLboolean, GLboolean, GLboolean, GLboolean) -> void;
    glColorMaski = (wglGetProcAddress("glColorMaski".data) -> ^void) -> (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) -> void;
    glCullFace = (wglGetProcAddress("glCullFace".data) -> ^void) -> (GLenum) -> void;
    glDepthFunc = (wglGetProcAddress("glDepthFunc".data) -> ^void) -> (GLenum) -> void;
    glDepthMask = (wglGetProcAddress("glDepthMask".data) -> ^void) -> (GLboolean) -> void;
    glDepthRange = (wglGetProcAddress("glDepthRange".data) -> ^void) -> (GLdouble, GLdouble) -> void;
    glDepthRangef = (wglGetProcAddress("glDepthRangef".data) -> ^void) -> (GLfloat, GLfloat) -> void;
    glDepthRangeArrayv = (wglGetProcAddress("glDepthRangeArrayv".data) -> ^void) -> (GLuint, GLsizei, ^GLdouble) -> void;
    glDepthRangeIndexed = (wglGetProcAddress("glDepthRangeIndexed".data) -> ^void) -> (GLuint, GLdouble, GLdouble) -> void;
    glDisable = (wglGetProcAddress("glDisable".data) -> ^void) -> (GLenum) -> void;
    glEnablei = (wglGetProcAddress("glEnablei".data) -> ^void) -> (GLenum, GLuint) -> void;
    glDisablei = (wglGetProcAddress("glDisablei".data) -> ^void) -> (GLenum, GLuint) -> void;
    glFrontFace = (wglGetProcAddress("glFrontFace".data) -> ^void) -> (GLenum) -> void;
    glGetBooleanv = (wglGetProcAddress("glGetBooleanv".data) -> ^void) -> (GLenum, ^GLboolean) -> void;
    glGetDoublev = (wglGetProcAddress("glGetDoublev".data) -> ^void) -> (GLenum, ^GLdouble) -> void;
    glGetFloatv = (wglGetProcAddress("glGetFloatv".data) -> ^void) -> (GLenum, ^GLfloat) -> void;
    glGetIntegerv = (wglGetProcAddress("glGetIntegerv".data) -> ^void) -> (GLenum, ^GLint) -> void;
    glGetInteger64v = (wglGetProcAddress("glGetInteger64v".data) -> ^void) -> (GLenum, ^GLint64) -> void;
    glGetBooleani_v = (wglGetProcAddress("glGetBooleani_v".data) -> ^void) -> (GLenum, GLuint, ^GLboolean) -> void;
    glGetFloati_v = (wglGetProcAddress("glGetFloati_v".data) -> ^void) -> (GLenum, GLuint, ^GLfloat) -> void;
    glGetDoublei_v = (wglGetProcAddress("glGetDoublei_v".data) -> ^void) -> (GLenum, GLuint, ^GLdouble) -> void;
    glGetInteger64i_v = (wglGetProcAddress("glGetInteger64i_v".data) -> ^void) -> (GLenum, GLuint, ^GLint64) -> void;
    glGetError = (wglGetProcAddress("glGetError".data) -> ^void) -> () -> GLenum;
    glHint = (wglGetProcAddress("glHint".data) -> ^void) -> (GLenum, GLenum) -> void;
    glIsEnabled = (wglGetProcAddress("glIsEnabled".data) -> ^void) -> (GLenum) -> GLboolean;
    glIsEnabledi = (wglGetProcAddress("glIsEnabledi".data) -> ^void) -> (GLenum, GLuint) -> GLboolean;
    glLineWidth = (wglGetProcAddress("glLineWidth".data) -> ^void) -> (GLfloat) -> void;
    glLogicOp = (wglGetProcAddress("glLogicOp".data) -> ^void) -> (GLenum) -> void;
    glPixelStoref = (wglGetProcAddress("glPixelStoref".data) -> ^void) -> (GLenum, GLfloat) -> void;
    glPixelStorei = (wglGetProcAddress("glPixelStorei".data) -> ^void) -> (GLenum, GLint) -> void;
    glPointParameterf = (wglGetProcAddress("glPointParameterf".data) -> ^void) -> (GLenum, GLfloat) -> void;
    glPointParameteri = (wglGetProcAddress("glPointParameteri".data) -> ^void) -> (GLenum, GLint) -> void;
    glPointParameterfv = (wglGetProcAddress("glPointParameterfv".data) -> ^void) -> (GLenum, ^GLfloat) -> void;
    glPointParameteriv = (wglGetProcAddress("glPointParameteriv".data) -> ^void) -> (GLenum, ^GLint) -> void;
    glPointSize = (wglGetProcAddress("glPointSize".data) -> ^void) -> (GLfloat) -> void;
    glPolygonMode = (wglGetProcAddress("glPolygonMode".data) -> ^void) -> (GLenum, GLenum) -> void;
    glPolygonOffset = (wglGetProcAddress("glPolygonOffset".data) -> ^void) -> (GLfloat, GLfloat) -> void;
    glScissor = (wglGetProcAddress("glScissor".data) -> ^void) -> (GLint, GLint, GLsizei, GLsizei) -> void;
    glSampleCoverage = (wglGetProcAddress("glSampleCoverage".data) -> ^void) -> (GLfloat, GLboolean) -> void;
    glScissorArrayv = (wglGetProcAddress("glScissorArrayv".data) -> ^void) -> (GLuint, GLsizei, ^GLint) -> void;
    glScissorIndexed = (wglGetProcAddress("glScissorIndexed".data) -> ^void) -> (GLuint, GLint, GLint, GLsizei, GLsizei) -> void;
    glScissorIndexedv = (wglGetProcAddress("glScissorIndexedv".data) -> ^void) -> (GLuint, ^GLint) -> void;
    glStencilFunc = (wglGetProcAddress("glStencilFunc".data) -> ^void) -> (GLenum, GLint, GLuint) -> void;
    glStencilFuncSeparate = (wglGetProcAddress("glStencilFuncSeparate".data) -> ^void) -> (GLenum, GLenum, GLint, GLuint) -> void;
    glStencilMask = (wglGetProcAddress("glStencilMask".data) -> ^void) -> (GLuint) -> void;
    glStencilMaskSeparate = (wglGetProcAddress("glStencilMaskSeparate".data) -> ^void) -> (GLenum, GLuint) -> void;
    glStencilOp = (wglGetProcAddress("glStencilOp".data) -> ^void) -> (GLenum, GLenum, GLenum) -> void;
    glStencilOpSeparate = (wglGetProcAddress("glStencilOpSeparate".data) -> ^void) -> (GLenum, GLenum, GLenum, GLenum) -> void;
    glViewportArrayv = (wglGetProcAddress("glViewportArrayv".data) -> ^void) -> (GLuint, GLsizei, ^GLfloat) -> void;
    glViewportIndexedf = (wglGetProcAddress("glViewportIndexedf".data) -> ^void) -> (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
    glViewportIndexedfv = (wglGetProcAddress("glViewportIndexedfv".data) -> ^void) -> (GLuint, ^GLfloat) -> void;

    glBeginTransformFeedback = (wglGetProcAddress("glBeginTransformFeedback".data) -> ^void) -> (GLenum) -> void;
    glBindTransformFeedback = (wglGetProcAddress("glBindTransformFeedback".data) -> ^void) -> (GLenum, GLuint) -> void;
    glCreateTransformFeedbacks = (wglGetProcAddress("glCreateTransformFeedbacks".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glDeleteTransformFeedbacks = (wglGetProcAddress("glDeleteTransformFeedbacks".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glDrawTransformFeedback = (wglGetProcAddress("glDrawTransformFeedback".data) -> ^void) -> (GLenum, GLuint) -> void;
    glDrawTransformFeedbackInstanced = (wglGetProcAddress("glDrawTransformFeedbackInstanced".data) -> ^void) -> (GLenum, GLuint, GLsizei) -> void;
    glDrawTransformFeedbackStream = (wglGetProcAddress("glDrawTransformFeedbackStream".data) -> ^void) -> (GLenum, GLuint, GLuint) -> void;
    glDrawTransformFeedbackStreamInstanced = (wglGetProcAddress("glDrawTransformFeedbackStreamInstanced".data) -> ^void) -> (GLenum, GLuint, GLuint, GLsizei) -> void;
    glEndTransformFeedback = (wglGetProcAddress("glEndTransformFeedback".data) -> ^void) -> () -> void;
    glGenTransformFeedbacks = (wglGetProcAddress("glGenTransformFeedbacks".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glGetTransformFeedbackiv = (wglGetProcAddress("glGetTransformFeedbackiv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetTransformFeedbacki_v = (wglGetProcAddress("glGetTransformFeedbacki_v".data) -> ^void) -> (GLuint, GLenum, GLuint, ^GLint) -> void;
    glGetTransformFeedbacki64_v = (wglGetProcAddress("glGetTransformFeedbacki64_v".data) -> ^void) -> (GLuint, GLenum, GLuint, ^GLint64) -> void;
    glGetTransformFeedbackVarying = (wglGetProcAddress("glGetTransformFeedbackVarying".data) -> ^void) -> (GLuint, GLuint, GLsizei, ^GLsizei, ^GLsizei, ^GLenum, ^s8) -> void;
    glIsTransformFeedback = (wglGetProcAddress("glIsTransformFeedback".data) -> ^void) -> (GLuint) -> GLboolean;
    glPauseTransformFeedback = (wglGetProcAddress("glPauseTransformFeedback".data) -> ^void) -> () -> void;
    glResumeTransformFeedback = (wglGetProcAddress("glResumeTransformFeedback".data) -> ^void) -> () -> void;
    glTransformFeedbackBufferBase = (wglGetProcAddress("glTransformFeedbackBufferBase".data) -> ^void) -> (GLuint, GLuint, GLuint) -> void;
    glTransformFeedbackBufferRange = (wglGetProcAddress("glTransformFeedbackBufferRange".data) -> ^void) -> (GLuint, GLuint, GLuint, GLintptr, GLsizei) -> void;
    glTransformFeedbackVaryings = (wglGetProcAddress("glTransformFeedbackVaryings".data) -> ^void) -> (GLuint, GLsizei, ^^s8, GLenum) -> void;

    glDispatchCompute = (wglGetProcAddress("glDispatchCompute".data) -> ^void) -> (GLuint, GLuint, GLuint) -> void;
    glDispatchComputeIndirect = (wglGetProcAddress("glDispatchComputeIndirect".data) -> ^void) -> (GLintptr) -> void;
    glGetGraphicsResetStatus = (wglGetProcAddress("glGetGraphicsResetStatus".data) -> ^void) -> () -> GLenum;
    glGetInternalformativ = (wglGetProcAddress("glGetInternalformativ".data) -> ^void) -> (GLenum, GLenum, GLenum, GLsizei, ^GLint) -> void;
    glGetInternalformati64v = (wglGetProcAddress("glGetInternalformati64v".data) -> ^void) -> (GLenum, GLenum, GLenum, GLsizei, ^GLint) -> void;
    glGetMultisamplefv = (wglGetProcAddress("glGetMultisamplefv".data) -> ^void) -> (GLenum, GLuint, ^GLfloat) -> void;
    glGetString = (wglGetProcAddress("glGetString".data) -> ^void) -> (GLenum) -> ^GLubyte;
    glGetStringi = (wglGetProcAddress("glGetStringi".data) -> ^void) -> (GLenum, GLuint) -> ^GLubyte;
    glMemoryBarrier = (wglGetProcAddress("glMemoryBarrier".data) -> ^void) -> (GLbitfield) -> void;
    glMemoryBarrierByRegion = (wglGetProcAddress("glMemoryBarrierByRegion".data) -> ^void) -> (GLbitfield) -> void;

    glBeginConditionalRender = (wglGetProcAddress("glBeginConditionalRender".data) -> ^void) -> (GLuint, GLenum) -> void;
    glBeginQuery = (wglGetProcAddress("glBeginQuery".data) -> ^void) -> (GLenum, GLuint) -> void;
    glBeginQueryIndexed = (wglGetProcAddress("glBeginQueryIndexed".data) -> ^void) -> (GLenum, GLuint, GLuint) -> void;
    glCreateQueries = (wglGetProcAddress("glCreateQueries".data) -> ^void) -> (GLenum, GLsizei, ^GLuint) -> void;
    glDeleteQueries = (wglGetProcAddress("glDeleteQueries".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glEndConditionalRender = (wglGetProcAddress("glEndConditionalRender".data) -> ^void) -> () -> void;
    glEndQuery = (wglGetProcAddress("glEndQuery".data) -> ^void) -> (GLenum) -> void;
    glEndQueryIndexed = (wglGetProcAddress("glEndQueryIndexed".data) -> ^void) -> (GLenum, GLuint) -> void;
    glGenQueries = (wglGetProcAddress("glGenQueries".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glGetQueryIndexediv = (wglGetProcAddress("glGetQueryIndexediv".data) -> ^void) -> (GLenum, GLuint, GLenum, ^GLint) -> void;
    glGetQueryObjectiv = (wglGetProcAddress("glGetQueryObjectiv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetQueryObjectuiv = (wglGetProcAddress("glGetQueryObjectuiv".data) -> ^void) -> (GLuint, GLenum, ^GLuint) -> void;
    glGetQueryObjecti64v = (wglGetProcAddress("glGetQueryObjecti64v".data) -> ^void) -> (GLuint, GLenum, ^GLint64) -> void;
    glGetQueryObjectui64v = (wglGetProcAddress("glGetQueryObjectui64v".data) -> ^void) -> (GLuint, GLenum, ^GLuint64) -> void;
    glGetQueryiv = (wglGetProcAddress("glGetQueryiv".data) -> ^void) -> (GLenum, GLenum, ^GLint) -> void;
    glIsQuery = (wglGetProcAddress("glIsQuery".data) -> ^void) -> (GLuint) -> GLboolean;
    glQueryCounter = (wglGetProcAddress("glQueryCounter".data) -> ^void) -> (GLuint, GLenum) -> void;

    glClientWaitSync = (wglGetProcAddress("glClientWaitSync".data) -> ^void) -> (GLsync, GLbitfield, GLuint64) -> GLenum;
    glDeleteSync = (wglGetProcAddress("glDeleteSync".data) -> ^void) -> (GLsync) -> void;
    glFenceSync = (wglGetProcAddress("glFenceSync".data) -> ^void) -> (GLenum, GLbitfield) -> GLsync;
    glGetSynciv = (wglGetProcAddress("glGetSynciv".data) -> ^void) -> (GLsync, GLenum, GLsizei, ^GLsizei, ^GLint) -> void;
    glIsSync = (wglGetProcAddress("glIsSync".data) -> ^void) -> (GLsync) -> GLboolean;
    glTextureBarrier = (wglGetProcAddress("glTextureBarrier".data) -> ^void) -> () -> void;
    glWaitSync = (wglGetProcAddress("glWaitSync".data) -> ^void) -> (GLsync, GLbitfield, GLuint64) -> void;

    glBindVertexArray = (wglGetProcAddress("glBindVertexArray".data) -> ^void) -> (GLuint) -> void;
    glDeleteVertexArrays = (wglGetProcAddress("glDeleteVertexArrays".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glGenVertexArrays = (wglGetProcAddress("glGenVertexArrays".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glIsVertexArray = (wglGetProcAddress("glIsVertexArray".data) -> ^void) -> (GLuint) -> GLboolean;

    glBindSampler = (wglGetProcAddress("glBindSampler".data) -> ^void) -> (GLuint, GLuint) -> void;
    glBindSamplers = (wglGetProcAddress("glBindSamplers".data) -> ^void) -> (GLuint, GLsizei, ^GLuint) -> void;
    glCreateSamplers = (wglGetProcAddress("glCreateSamplers".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glDeleteSamplers = (wglGetProcAddress("glDeleteSamplers".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glGenSamplers = (wglGetProcAddress("glGenSamplers".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glGetSamplerParameterfv = (wglGetProcAddress("glGetSamplerParameterfv".data) -> ^void) -> (GLuint, GLenum, ^GLfloat) -> void;
    glGetSamplerParameteriv = (wglGetProcAddress("glGetSamplerParameteriv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetSamplerParameterIiv = (wglGetProcAddress("glGetSamplerParameterIiv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetSamplerParameterIuiv = (wglGetProcAddress("glGetSamplerParameterIuiv".data) -> ^void) -> (GLuint, GLenum, ^GLuint) -> void;
    glIsSampler = (wglGetProcAddress("glIsSampler".data) -> ^void) -> (GLuint) -> GLboolean;
    glSamplerParameterf = (wglGetProcAddress("glSamplerParameterf".data) -> ^void) -> (GLuint, GLenum, GLfloat) -> void;
    glSamplerParameteri = (wglGetProcAddress("glSamplerParameteri".data) -> ^void) -> (GLuint, GLenum, GLint) -> void;
    glSamplerParameterfv = (wglGetProcAddress("glSamplerParameterfv".data) -> ^void) -> (GLuint, GLenum, ^GLfloat) -> void;
    glSamplerParameteriv = (wglGetProcAddress("glSamplerParameteriv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glSamplerParameterIiv = (wglGetProcAddress("glSamplerParameterIiv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glSamplerParameterIuiv = (wglGetProcAddress("glSamplerParameterIuiv".data) -> ^void) -> (GLuint, GLenum, ^GLuint) -> void;

    glActiveShaderProgram = (wglGetProcAddress("glActiveShaderProgram".data) -> ^void) -> (GLuint, GLuint) -> void;
    glBindProgramPipeline = (wglGetProcAddress("glBindProgramPipeline".data) -> ^void) -> (GLuint) -> void;
    glCreateProgramPipelines = (wglGetProcAddress("glCreateProgramPipelines".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glDeleteProgramPipelines = (wglGetProcAddress("glDeleteProgramPipelines".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glGenProgramPipelines = (wglGetProcAddress("glGenProgramPipelines".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glGetProgramPipelineiv = (wglGetProcAddress("glGetProgramPipelineiv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetProgramPipelineInfoLog = (wglGetProcAddress("glGetProgramPipelineInfoLog".data) -> ^void) -> (GLuint, GLsizei, ^GLsizei, ^GLchar) -> void;
    glIsProgramPipeline = (wglGetProcAddress("glIsProgramPipeline".data) -> ^void) -> (GLuint) -> GLboolean;
    glValidateProgramPipeline = (wglGetProcAddress("glValidateProgramPipeline".data) -> ^void) -> (GLuint) -> void;

    glDebugMessageCallback = (wglGetProcAddress("glDebugMessageCallback".data) -> ^void) -> (GLDEBUGPROC, ^void) -> void;
    glDebugMessageControl = (wglGetProcAddress("glDebugMessageControl".data) -> ^void) -> (GLenum, GLenum, GLenum, GLsizei, ^GLuint, GLboolean) -> void;
    glDebugMessageInsert = (wglGetProcAddress("glDebugMessageInsert".data) -> ^void) -> (GLenum, GLenum, GLuint, GLenum, GLsizei, ^s8) -> void;
    glGetDebugMessageLog = (wglGetProcAddress("glGetDebugMessageLog".data) -> ^void) -> (GLuint, GLsizei, ^GLenum, ^GLenum, ^GLuint, ^GLenum, ^GLsizei, ^GLchar) -> GLuint;
    glGetObjectLabel = (wglGetProcAddress("glGetObjectLabel".data) -> ^void) -> (GLenum, GLuint, GLsizei, ^GLsizei, ^s8) -> void;
    glGetObjectPtrLabel = (wglGetProcAddress("glGetObjectPtrLabel".data) -> ^void) -> (^void, GLsizei, ^GLsizei, ^s8) -> void;
    glGetPointerv = (wglGetProcAddress("glGetPointerv".data) -> ^void) -> (GLenum, ^^GLvoid) -> void;
    glGetProgramInterfaceiv = (wglGetProcAddress("glGetProgramInterfaceiv".data) -> ^void) -> (GLuint, GLenum, GLenum, ^GLint) -> void;
    glObjectLabel = (wglGetProcAddress("glObjectLabel".data) -> ^void) -> (GLenum, GLuint, GLsizei, ^s8) -> void;
    glObjectPtrLabel = (wglGetProcAddress("glObjectPtrLabel".data) -> ^void) -> (^void, GLsizei, ^s8) -> void;
    glPopDebugGroup = (wglGetProcAddress("glPopDebugGroup".data) -> ^void) -> () -> void;
    glPushDebugGroup = (wglGetProcAddress("glPushDebugGroup".data) -> ^void) -> (GLenum, GLuint, GLsizei, ^s8) -> void;

    glBindBuffer = (wglGetProcAddress("glBindBuffer".data) -> ^void) -> (GLenum, GLuint) -> void;
    glBindBufferBase = (wglGetProcAddress("glBindBufferBase".data) -> ^void) -> (GLenum, GLuint, GLuint) -> void;
    glBindBufferRange = (wglGetProcAddress("glBindBufferRange".data) -> ^void) -> (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) -> void;
    glBindBuffersBase = (wglGetProcAddress("glBindBuffersBase".data) -> ^void) -> (GLenum, GLuint, GLsizei, ^GLuint) -> void;
    glBindBuffersRange = (wglGetProcAddress("glBindBuffersRange".data) -> ^void) -> (GLenum, GLuint, GLsizei, ^GLuint, ^GLintptr, ^GLintptr) -> void;
    glBindVertexBuffer = (wglGetProcAddress("glBindVertexBuffer".data) -> ^void) -> (GLuint, GLuint, GLintptr, GLintptr) -> void;
    glVertexArrayVertexBuffer = (wglGetProcAddress("glVertexArrayVertexBuffer".data) -> ^void) -> (GLuint, GLuint, GLuint, GLintptr, GLsizei) -> void;
    glBindVertexBuffers = (wglGetProcAddress("glBindVertexBuffers".data) -> ^void) -> (GLuint, GLsizei, ^GLuint, ^GLintptr, ^GLsizei) -> void;
    glVertexArrayVertexBuffers = (wglGetProcAddress("glVertexArrayVertexBuffers".data) -> ^void) -> (GLuint, GLuint, GLsizei, ^GLuint, ^GLintptr, ^GLsizei) -> void;
    glBufferData = (wglGetProcAddress("glBufferData".data) -> ^void) -> (GLenum, GLsizeiptr, ^GLvoid, GLenum) -> void;
    glNamedBufferData = (wglGetProcAddress("glNamedBufferData".data) -> ^void) -> (GLuint, GLsizei, ^void, GLenum) -> void;
    glBufferStorage = (wglGetProcAddress("glBufferStorage".data) -> ^void) -> (GLenum, GLsizeiptr, ^GLvoid, GLbitfield) -> void;
    glNamedBufferStorage = (wglGetProcAddress("glNamedBufferStorage".data) -> ^void) -> (GLuint, GLsizei, ^void, GLbitfield) -> void;
    glBufferSubData = (wglGetProcAddress("glBufferSubData".data) -> ^void) -> (GLenum, GLintptr, GLsizeiptr, ^GLvoid) -> void;
    glNamedBufferSubData = (wglGetProcAddress("glNamedBufferSubData".data) -> ^void) -> (GLuint, GLintptr, GLsizei, ^void) -> void;
    glClearBufferData = (wglGetProcAddress("glClearBufferData".data) -> ^void) -> (GLenum, GLenum, GLenum, GLenum, ^void) -> void;
    glClearNamedBufferData = (wglGetProcAddress("glClearNamedBufferData".data) -> ^void) -> (GLuint, GLenum, GLenum, GLenum, ^void) -> void;
    glClearBufferSubData = (wglGetProcAddress("glClearBufferSubData".data) -> ^void) -> (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ^void) -> void;
    glClearNamedBufferSubData = (wglGetProcAddress("glClearNamedBufferSubData".data) -> ^void) -> (GLuint, GLenum, GLintptr, GLsizei, GLenum, GLenum, ^void) -> void;
    glCopyBufferSubData = (wglGetProcAddress("glCopyBufferSubData".data) -> ^void) -> (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) -> void;
    glCopyNamedBufferSubData = (wglGetProcAddress("glCopyNamedBufferSubData".data) -> ^void) -> (GLuint, GLuint, GLintptr, GLintptr, GLsizei) -> void;
    glCreateBuffers = (wglGetProcAddress("glCreateBuffers".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glCreateVertexArrays = (wglGetProcAddress("glCreateVertexArrays".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glDeleteBuffers = (wglGetProcAddress("glDeleteBuffers".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glDisableVertexAttribArray = (wglGetProcAddress("glDisableVertexAttribArray".data) -> ^void) -> (GLuint) -> void;
    glDisableVertexArrayAttrib = (wglGetProcAddress("glDisableVertexArrayAttrib".data) -> ^void) -> (GLuint, GLuint) -> void;
    glDrawArrays = (wglGetProcAddress("glDrawArrays".data) -> ^void) -> (GLenum, GLint, GLsizei) -> void;
    glDrawArraysIndirect = (wglGetProcAddress("glDrawArraysIndirect".data) -> ^void) -> (GLenum, ^void) -> void;
    glDrawArraysInstanced = (wglGetProcAddress("glDrawArraysInstanced".data) -> ^void) -> (GLenum, GLint, GLsizei, GLsizei) -> void;
    glDrawArraysInstancedBaseInstance = (wglGetProcAddress("glDrawArraysInstancedBaseInstance".data) -> ^void) -> (GLenum, GLint, GLsizei, GLsizei, GLuint) -> void;
    glDrawElements = (wglGetProcAddress("glDrawElements".data) -> ^void) -> (GLenum, GLsizei, GLenum, ^GLvoid) -> void;
    glDrawElementsBaseVertex = (wglGetProcAddress("glDrawElementsBaseVertex".data) -> ^void) -> (GLenum, GLsizei, GLenum, ^GLvoid, GLint) -> void;
    glDrawElementsIndirect = (wglGetProcAddress("glDrawElementsIndirect".data) -> ^void) -> (GLenum, GLenum, ^void) -> void;
    glDrawElementsInstanced = (wglGetProcAddress("glDrawElementsInstanced".data) -> ^void) -> (GLenum, GLsizei, GLenum, ^void, GLsizei) -> void;
    glDrawElementsInstancedBaseInstance = (wglGetProcAddress("glDrawElementsInstancedBaseInstance".data) -> ^void) -> (GLenum, GLsizei, GLenum, ^void, GLsizei, GLuint) -> void;
    glDrawElementsInstancedBaseVertex = (wglGetProcAddress("glDrawElementsInstancedBaseVertex".data) -> ^void) -> (GLenum, GLsizei, GLenum, ^GLvoid, GLsizei, GLint) -> void;
    glDrawElementsInstancedBaseVertexBaseInstance = (wglGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance".data) -> ^void) -> (GLenum, GLsizei, GLenum, ^GLvoid, GLsizei, GLint, GLuint) -> void;
    glDrawRangeElements = (wglGetProcAddress("glDrawRangeElements".data) -> ^void) -> (GLenum, GLuint, GLuint, GLsizei, GLenum, ^GLvoid) -> void;
    glDrawRangeElementsBaseVertex = (wglGetProcAddress("glDrawRangeElementsBaseVertex".data) -> ^void) -> (GLenum, GLuint, GLuint, GLsizei, GLenum, ^GLvoid, GLint) -> void;
    glEnableVertexAttribArray = (wglGetProcAddress("glEnableVertexAttribArray".data) -> ^void) -> (GLuint) -> void;
    glEnableVertexArrayAttrib = (wglGetProcAddress("glEnableVertexArrayAttrib".data) -> ^void) -> (GLuint, GLuint) -> void;
    glFlushMappedBufferRange = (wglGetProcAddress("glFlushMappedBufferRange".data) -> ^void) -> (GLenum, GLintptr, GLsizeiptr) -> void;
    glFlushMappedNamedBufferRange = (wglGetProcAddress("glFlushMappedNamedBufferRange".data) -> ^void) -> (GLuint, GLintptr, GLsizei) -> void;
    glGenBuffers = (wglGetProcAddress("glGenBuffers".data) -> ^void) -> (GLsizei, ^GLuint) -> void;
    glGetBufferParameteriv = (wglGetProcAddress("glGetBufferParameteriv".data) -> ^void) -> (GLenum, GLenum, ^GLint) -> void;
    glGetBufferParameteri64v = (wglGetProcAddress("glGetBufferParameteri64v".data) -> ^void) -> (GLenum, GLenum, ^GLint64) -> void;
    glGetNamedBufferParameteriv = (wglGetProcAddress("glGetNamedBufferParameteriv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetNamedBufferParameteri64v = (wglGetProcAddress("glGetNamedBufferParameteri64v".data) -> ^void) -> (GLuint, GLenum, ^GLint64) -> void;
    glGetBufferPointerv = (wglGetProcAddress("glGetBufferPointerv".data) -> ^void) -> (GLenum, GLenum, ^^GLvoid) -> void;
    glGetNamedBufferPointerv = (wglGetProcAddress("glGetNamedBufferPointerv".data) -> ^void) -> (GLuint, GLenum, ^^void) -> void;
    glGetBufferSubData = (wglGetProcAddress("glGetBufferSubData".data) -> ^void) -> (GLenum, GLintptr, GLsizeiptr, ^GLvoid) -> void;
    glGetNamedBufferSubData = (wglGetProcAddress("glGetNamedBufferSubData".data) -> ^void) -> (GLuint, GLintptr, GLsizei, ^void) -> void;
    glGetVertexArrayIndexediv = (wglGetProcAddress("glGetVertexArrayIndexediv".data) -> ^void) -> (GLuint, GLuint, GLenum, ^GLint) -> void;
    glGetVertexArrayIndexed64iv = (wglGetProcAddress("glGetVertexArrayIndexed64iv".data) -> ^void) -> (GLuint, GLuint, GLenum, ^GLint64) -> void;
    glGetVertexArrayiv = (wglGetProcAddress("glGetVertexArrayiv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetVertexAttribdv = (wglGetProcAddress("glGetVertexAttribdv".data) -> ^void) -> (GLuint, GLenum, ^GLdouble) -> void;
    glGetVertexAttribfv = (wglGetProcAddress("glGetVertexAttribfv".data) -> ^void) -> (GLuint, GLenum, ^GLfloat) -> void;
    glGetVertexAttribiv = (wglGetProcAddress("glGetVertexAttribiv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetVertexAttribIiv = (wglGetProcAddress("glGetVertexAttribIiv".data) -> ^void) -> (GLuint, GLenum, ^GLint) -> void;
    glGetVertexAttribIuiv = (wglGetProcAddress("glGetVertexAttribIuiv".data) -> ^void) -> (GLuint, GLenum, ^GLuint) -> void;
    glGetVertexAttribLdv = (wglGetProcAddress("glGetVertexAttribLdv".data) -> ^void) -> (GLuint, GLenum, ^GLdouble) -> void;
    glGetVertexAttribPointerv = (wglGetProcAddress("glGetVertexAttribPointerv".data) -> ^void) -> (GLuint, GLenum, ^^GLvoid) -> void;
    glInvalidateBufferData = (wglGetProcAddress("glInvalidateBufferData".data) -> ^void) -> (GLuint) -> void;
    glInvalidateBufferSubData = (wglGetProcAddress("glInvalidateBufferSubData".data) -> ^void) -> (GLuint, GLintptr, GLsizeiptr) -> void;
    glIsBuffer = (wglGetProcAddress("glIsBuffer".data) -> ^void) -> (GLuint) -> GLboolean;
    glMapBuffer = (wglGetProcAddress("glMapBuffer".data) -> ^void) -> (GLenum, GLenum) -> ^void;
    glMapNamedBuffer = (wglGetProcAddress("glMapNamedBuffer".data) -> ^void) -> (GLuint, GLenum) -> ^void;
    glMapBufferRange = (wglGetProcAddress("glMapBufferRange".data) -> ^void) -> (GLenum, GLintptr, GLsizeiptr, GLbitfield) -> ^void;
    glMapNamedBufferRange = (wglGetProcAddress("glMapNamedBufferRange".data) -> ^void) -> (GLuint, GLintptr, GLsizei, GLbitfield) -> ^void;
    glMultiDrawArrays = (wglGetProcAddress("glMultiDrawArrays".data) -> ^void) -> (GLenum, ^GLint, ^GLsizei, GLsizei) -> void;
    glMultiDrawArraysIndirect = (wglGetProcAddress("glMultiDrawArraysIndirect".data) -> ^void) -> (GLenum, ^void, GLsizei, GLsizei) -> void;
    glMultiDrawElements = (wglGetProcAddress("glMultiDrawElements".data) -> ^void) -> (GLenum, ^GLsizei, GLenum, ^^GLvoid, GLsizei) -> void;
    glMultiDrawElementsBaseVertex = (wglGetProcAddress("glMultiDrawElementsBaseVertex".data) -> ^void) -> (GLenum, ^GLsizei, GLenum, ^^GLvoid, GLsizei, ^GLint) -> void;
    glMultiDrawElementsIndirect = (wglGetProcAddress("glMultiDrawElementsIndirect".data) -> ^void) -> (GLenum, GLenum, ^void, GLsizei, GLsizei) -> void;
    glPatchParameteri = (wglGetProcAddress("glPatchParameteri".data) -> ^void) -> (GLenum, GLint) -> void;
    glPatchParameterfv = (wglGetProcAddress("glPatchParameterfv".data) -> ^void) -> (GLenum, ^GLfloat) -> void;
    glPrimitiveRestartIndex = (wglGetProcAddress("glPrimitiveRestartIndex".data) -> ^void) -> (GLuint) -> void;
    glProvokingVertex = (wglGetProcAddress("glProvokingVertex".data) -> ^void) -> (GLenum) -> void;
    glUnmapBuffer = (wglGetProcAddress("glUnmapBuffer".data) -> ^void) -> (GLenum) -> GLboolean;
    glUnmapNamedBuffer = (wglGetProcAddress("glUnmapNamedBuffer".data) -> ^void) -> (GLuint) -> GLboolean;
    glVertexArrayElementBuffer = (wglGetProcAddress("glVertexArrayElementBuffer".data) -> ^void) -> (GLuint, GLuint) -> void;
    glVertexAttrib1f = (wglGetProcAddress("glVertexAttrib1f".data) -> ^void) -> (GLuint, GLfloat) -> void;
    glVertexAttrib1s = (wglGetProcAddress("glVertexAttrib1s".data) -> ^void) -> (GLuint, GLshort) -> void;
    glVertexAttrib1d = (wglGetProcAddress("glVertexAttrib1d".data) -> ^void) -> (GLuint, GLdouble) -> void;
    glVertexAttribI1i = (wglGetProcAddress("glVertexAttribI1i".data) -> ^void) -> (GLuint, GLint) -> void;
    glVertexAttribI1ui = (wglGetProcAddress("glVertexAttribI1ui".data) -> ^void) -> (GLuint, GLuint) -> void;
    glVertexAttrib2f = (wglGetProcAddress("glVertexAttrib2f".data) -> ^void) -> (GLuint, GLfloat, GLfloat) -> void;
    glVertexAttrib2s = (wglGetProcAddress("glVertexAttrib2s".data) -> ^void) -> (GLuint, GLshort, GLshort) -> void;
    glVertexAttrib2d = (wglGetProcAddress("glVertexAttrib2d".data) -> ^void) -> (GLuint, GLdouble, GLdouble) -> void;
    glVertexAttribI2i = (wglGetProcAddress("glVertexAttribI2i".data) -> ^void) -> (GLuint, GLint, GLint) -> void;
    glVertexAttribI2ui = (wglGetProcAddress("glVertexAttribI2ui".data) -> ^void) -> (GLuint, GLint, GLint) -> void;
    glVertexAttrib3f = (wglGetProcAddress("glVertexAttrib3f".data) -> ^void) -> (GLuint, GLfloat, GLfloat, GLfloat) -> void;
    glVertexAttrib3s = (wglGetProcAddress("glVertexAttrib3s".data) -> ^void) -> (GLuint, GLshort, GLshort, GLshort) -> void;
    glVertexAttrib3d = (wglGetProcAddress("glVertexAttrib3d".data) -> ^void) -> (GLuint, GLdouble, GLdouble, GLdouble) -> void;
    glVertexAttribI3i = (wglGetProcAddress("glVertexAttribI3i".data) -> ^void) -> (GLuint, GLint, GLint, GLint) -> void;
    glVertexAttribI3ui = (wglGetProcAddress("glVertexAttribI3ui".data) -> ^void) -> (GLuint, GLuint, GLuint, GLuint) -> void;
    glVertexAttrib4f = (wglGetProcAddress("glVertexAttrib4f".data) -> ^void) -> (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> void;
    glVertexAttrib4s = (wglGetProcAddress("glVertexAttrib4s".data) -> ^void) -> (GLuint, GLshort, GLshort, GLshort, GLshort) -> void;
    glVertexAttrib4d = (wglGetProcAddress("glVertexAttrib4d".data) -> ^void) -> (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> void;
    glVertexAttrib4Nub = (wglGetProcAddress("glVertexAttrib4Nub".data) -> ^void) -> (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) -> void;
    glVertexAttribI4i = (wglGetProcAddress("glVertexAttribI4i".data) -> ^void) -> (GLuint, GLint, GLint, GLint, GLint) -> void;
    glVertexAttribI4ui = (wglGetProcAddress("glVertexAttribI4ui".data) -> ^void) -> (GLuint, GLuint, GLuint, GLuint, GLuint) -> void;
    glVertexAttribL1d = (wglGetProcAddress("glVertexAttribL1d".data) -> ^void) -> (GLuint, GLdouble) -> void;
    glVertexAttribL2d = (wglGetProcAddress("glVertexAttribL2d".data) -> ^void) -> (GLuint, GLdouble, GLdouble) -> void;
    glVertexAttribL3d = (wglGetProcAddress("glVertexAttribL3d".data) -> ^void) -> (GLuint, GLdouble, GLdouble, GLdouble) -> void;
    glVertexAttribL4d = (wglGetProcAddress("glVertexAttribL4d".data) -> ^void) -> (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> void;
    glVertexAttrib1fv = (wglGetProcAddress("glVertexAttrib1fv".data) -> ^void) -> (GLuint, ^GLfloat) -> void;
    glVertexAttrib1sv = (wglGetProcAddress("glVertexAttrib1sv".data) -> ^void) -> (GLuint, ^GLshort) -> void;
    glVertexAttrib1dv = (wglGetProcAddress("glVertexAttrib1dv".data) -> ^void) -> (GLuint, ^GLdouble) -> void;
    glVertexAttribI1iv = (wglGetProcAddress("glVertexAttribI1iv".data) -> ^void) -> (GLuint, ^GLint) -> void;
    glVertexAttribI1uiv = (wglGetProcAddress("glVertexAttribI1uiv".data) -> ^void) -> (GLuint, ^GLuint) -> void;
    glVertexAttrib2fv = (wglGetProcAddress("glVertexAttrib2fv".data) -> ^void) -> (GLuint, ^GLfloat) -> void;
    glVertexAttrib2sv = (wglGetProcAddress("glVertexAttrib2sv".data) -> ^void) -> (GLuint, ^GLshort) -> void;
    glVertexAttrib2dv = (wglGetProcAddress("glVertexAttrib2dv".data) -> ^void) -> (GLuint, ^GLdouble) -> void;
    glVertexAttribI2iv = (wglGetProcAddress("glVertexAttribI2iv".data) -> ^void) -> (GLuint, ^GLint) -> void;
    glVertexAttribI2uiv = (wglGetProcAddress("glVertexAttribI2uiv".data) -> ^void) -> (GLuint, ^GLuint) -> void;
    glVertexAttrib3fv = (wglGetProcAddress("glVertexAttrib3fv".data) -> ^void) -> (GLuint, ^GLfloat) -> void;
    glVertexAttrib3sv = (wglGetProcAddress("glVertexAttrib3sv".data) -> ^void) -> (GLuint, ^GLshort) -> void;
    glVertexAttrib3dv = (wglGetProcAddress("glVertexAttrib3dv".data) -> ^void) -> (GLuint, ^GLdouble) -> void;
    glVertexAttribI3iv = (wglGetProcAddress("glVertexAttribI3iv".data) -> ^void) -> (GLuint, ^GLint) -> void;
    glVertexAttribI3uiv = (wglGetProcAddress("glVertexAttribI3uiv".data) -> ^void) -> (GLuint, ^GLuint) -> void;
    glVertexAttrib4fv = (wglGetProcAddress("glVertexAttrib4fv".data) -> ^void) -> (GLuint, ^GLfloat) -> void;
    glVertexAttrib4sv = (wglGetProcAddress("glVertexAttrib4sv".data) -> ^void) -> (GLuint, ^GLshort) -> void;
    glVertexAttrib4dv = (wglGetProcAddress("glVertexAttrib4dv".data) -> ^void) -> (GLuint, ^GLdouble) -> void;
    glVertexAttrib4iv = (wglGetProcAddress("glVertexAttrib4iv".data) -> ^void) -> (GLuint, ^GLint) -> void;
    glVertexAttrib4bv = (wglGetProcAddress("glVertexAttrib4bv".data) -> ^void) -> (GLuint, ^GLbyte) -> void;
    glVertexAttrib4ubv = (wglGetProcAddress("glVertexAttrib4ubv".data) -> ^void) -> (GLuint, ^GLubyte) -> void;
    glVertexAttrib4usv = (wglGetProcAddress("glVertexAttrib4usv".data) -> ^void) -> (GLuint, ^GLushort) -> void;
    glVertexAttrib4uiv = (wglGetProcAddress("glVertexAttrib4uiv".data) -> ^void) -> (GLuint, ^GLuint) -> void;
    glVertexAttrib4Nbv = (wglGetProcAddress("glVertexAttrib4Nbv".data) -> ^void) -> (GLuint, ^GLbyte) -> void;
    glVertexAttrib4Nsv = (wglGetProcAddress("glVertexAttrib4Nsv".data) -> ^void) -> (GLuint, ^GLshort) -> void;
    glVertexAttrib4Niv = (wglGetProcAddress("glVertexAttrib4Niv".data) -> ^void) -> (GLuint, ^GLint) -> void;
    glVertexAttrib4Nubv = (wglGetProcAddress("glVertexAttrib4Nubv".data) -> ^void) -> (GLuint, ^GLubyte) -> void;
    glVertexAttrib4Nusv = (wglGetProcAddress("glVertexAttrib4Nusv".data) -> ^void) -> (GLuint, ^GLushort) -> void;
    glVertexAttrib4Nuiv = (wglGetProcAddress("glVertexAttrib4Nuiv".data) -> ^void) -> (GLuint, ^GLuint) -> void;
    glVertexAttribI4bv = (wglGetProcAddress("glVertexAttribI4bv".data) -> ^void) -> (GLuint, ^GLbyte) -> void;
    glVertexAttribI4ubv = (wglGetProcAddress("glVertexAttribI4ubv".data) -> ^void) -> (GLuint, ^GLubyte) -> void;
    glVertexAttribI4sv = (wglGetProcAddress("glVertexAttribI4sv".data) -> ^void) -> (GLuint, ^GLshort) -> void;
    glVertexAttribI4usv = (wglGetProcAddress("glVertexAttribI4usv".data) -> ^void) -> (GLuint, ^GLushort) -> void;
    glVertexAttribI4iv = (wglGetProcAddress("glVertexAttribI4iv".data) -> ^void) -> (GLuint, ^GLint) -> void;
    glVertexAttribI4uiv = (wglGetProcAddress("glVertexAttribI4uiv".data) -> ^void) -> (GLuint, ^GLuint) -> void;
    glVertexAttribL1dv = (wglGetProcAddress("glVertexAttribL1dv".data) -> ^void) -> (GLuint, ^GLdouble) -> void;
    glVertexAttribL2dv = (wglGetProcAddress("glVertexAttribL2dv".data) -> ^void) -> (GLuint, ^GLdouble) -> void;
    glVertexAttribL3dv = (wglGetProcAddress("glVertexAttribL3dv".data) -> ^void) -> (GLuint, ^GLdouble) -> void;
    glVertexAttribL4dv = (wglGetProcAddress("glVertexAttribL4dv".data) -> ^void) -> (GLuint, ^GLdouble) -> void;
    glVertexAttribP1ui = (wglGetProcAddress("glVertexAttribP1ui".data) -> ^void) -> (GLuint, GLenum, GLboolean, GLuint) -> void;
    glVertexAttribP2ui = (wglGetProcAddress("glVertexAttribP2ui".data) -> ^void) -> (GLuint, GLenum, GLboolean, GLuint) -> void;
    glVertexAttribP3ui = (wglGetProcAddress("glVertexAttribP3ui".data) -> ^void) -> (GLuint, GLenum, GLboolean, GLuint) -> void;
    glVertexAttribP4ui = (wglGetProcAddress("glVertexAttribP4ui".data) -> ^void) -> (GLuint, GLenum, GLboolean, GLuint) -> void;
    glVertexAttribBinding = (wglGetProcAddress("glVertexAttribBinding".data) -> ^void) -> (GLuint, GLuint) -> void;
    glVertexArrayAttribBinding = (wglGetProcAddress("glVertexArrayAttribBinding".data) -> ^void) -> (GLuint, GLuint, GLuint) -> void;
    glVertexAttribDivisor = (wglGetProcAddress("glVertexAttribDivisor".data) -> ^void) -> (GLuint, GLuint) -> void;
    glVertexAttribFormat = (wglGetProcAddress("glVertexAttribFormat".data) -> ^void) -> (GLuint, GLint, GLenum, GLboolean, GLuint) -> void;
    glVertexAttribIFormat = (wglGetProcAddress("glVertexAttribIFormat".data) -> ^void) -> (GLuint, GLint, GLenum, GLuint) -> void;
    glVertexAttribLFormat = (wglGetProcAddress("glVertexAttribLFormat".data) -> ^void) -> (GLuint, GLint, GLenum, GLuint) -> void;
    glVertexArrayAttribFormat = (wglGetProcAddress("glVertexArrayAttribFormat".data) -> ^void) -> (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) -> void;
    glVertexArrayAttribIFormat = (wglGetProcAddress("glVertexArrayAttribIFormat".data) -> ^void) -> (GLuint, GLuint, GLint, GLenum, GLuint) -> void;
    glVertexArrayAttribLFormat = (wglGetProcAddress("glVertexArrayAttribLFormat".data) -> ^void) -> (GLuint, GLuint, GLint, GLenum, GLuint) -> void;
    glVertexAttribPointer = (wglGetProcAddress("glVertexAttribPointer".data) -> ^void) -> (GLuint, GLint, GLenum, GLboolean, GLsizei, ^GLvoid) -> void;
    glVertexAttribIPointer = (wglGetProcAddress("glVertexAttribIPointer".data) -> ^void) -> (GLuint, GLint, GLenum, GLsizei, ^GLvoid) -> void;
    glVertexAttribLPointer = (wglGetProcAddress("glVertexAttribLPointer".data) -> ^void) -> (GLuint, GLint, GLenum, GLsizei, ^GLvoid) -> void;
    glVertexBindingDivisor = (wglGetProcAddress("glVertexBindingDivisor".data) -> ^void) -> (GLuint, GLuint) -> void;
    glVertexArrayBindingDivisor = (wglGetProcAddress("glVertexArrayBindingDivisor".data) -> ^void) -> (GLuint, GLuint, GLuint) -> void;
}
