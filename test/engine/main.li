#import "../x11.li"
#import "../../modules/reflect.li"
#import "../../modules/print.li"
#import "../../modules/io.li"
#import "../../modules/os.li"
#import "gl.li"
#import "ho_gl.li"
#import "math.li"
#import "renderer.li"
#import "mesh.li"
#import "quaternion.li"
#import "camera.li"
#import "input.li"
#import "window.li"

Object_Binary struct {
	vertices_size_bytes : s32;
	indices_size_bytes : s32;
	vertices_count : s32;
	indices_count : s32;
	data : ^u8;
}

main : () -> s32 {
    window_info : Window_Info;
	if !init_opengl(&window_info) {
        return -1;
    }

    hogl_init_extensions();
    render_context_init();

	shader := shader_load(vert_shader, frag_shader);
	glUseProgram(shader);

	filename := "/home/hoshoyo/dev/playground/squiggly/models/house.bin";
	file_data := read_entire_file(filename, malloc).data -> ^Object_Binary;
	if file_data == null {
		print("Error: could not open file %\n", filename);
		return -1;
	}
	mesh := create_simple_mesh(&file_data.data -> ^Vertex, file_data.vertices_count, 
		(((&file_data.data -> ^u8) + file_data.vertices_size_bytes) -> ^u32), file_data.indices_count);

	// Screen
    screen_width : s32;
	screen_height : s32;
	screen_size(&window_info, &screen_width, &screen_height);

	// Window
	width : s32;
	height : s32;
	window_size(&window_info, &width, &height);

	camera : Quaternion_Camera;
	camera_quat_init(&camera, vec4:{0.0, 0.0, 0.0, 1.0}, 0.1, 1000.0, 90.0, width -> r32 / height -> r32);

	glEnable(GL_DEPTH_TEST);
	glViewport(0,0, width, height);
	
	while true
    {
		start_frame := os_time_us();
		xev : XEvent;
		while XCheckWindowEvent(window_info.display, window_info.window_handle, x11_allmasks -> s32, &xev)
		{
			event := input_x11_process_event(&xev);
			if event.type != EVENT_NOP {
				input_handle(&event, &camera, &width, &height);
			}
		}

		wnd_ctx.width = width;
		wnd_ctx.height = height;

		glClearColor(0.7, 0.7, 0.8, 1.0);
		glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

		camera_quat_update(&camera, 1.0/60.0);
		
		mesh_render(&mesh, shader, &camera.c);


		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		quad := quad_new(vec2:{100.0, 100.0}, 100.0, 100.0, vec4:{1.0, 0.0, 0.0, 0.5});
		render_quad_immediate(&quad);
        render_immediate_flush();
		glDisable(GL_BLEND);


		glXSwapBuffers (window_info.display, window_info.window_handle);

		elapsed_time := (os_time_us() - start_frame); // elapsed time in us
		frame_time := (1.0 -> r64 / 60.0) * 1000000.0;
		usleep((frame_time - elapsed_time) -> u32);
	}

    release_opengl(&window_info);
	return 0;
}
