#import "../modules/base.li"
#import "../modules/w_print.li"

float_arithmetic : () {
    a := 3.14;
    b := 2.4;

    a64 : r64 = 3.14;
    b64 : r64 = 2.4;

    print("--- $ ---\n", a);
    print("% + % = %\n", a, b, a + b);
    print("% - % = %\n", a, b, a - b);
    print("% * % = %\n", a, b, a * b);
    print("% / % = %\n", a, b, a / b);

    print("--- $ ---\n", a64);
    print("% + % = %\n", a64, b64, a64 + b64);
    print("% - % = %\n", a64, b64, a64 - b64);
    print("% * % = %\n", a64, b64, a64 * b64);
    print("% / % = %\n", a64, b64, a64 / b64);

    print("conversions\n");
    print("% -> $ = %\n", a, a64, a -> r64);
    print("% -> $ = %\n", a64, a, a64 -> r32);
    print("% -> s32 = %\n", a, a -> s32);
    print("% -> s32 = %\n", a64, a64 -> s32);
    print("% -> s64 = %\n", b, b -> s64);
    print("% -> s64 = %\n", b64, b64 -> s64);

    print("comparisons\n");
    print("% == % = %\n", a, b, a == b);
    print("% != % = %\n", a, b, a != b);
    print("% >= % = %\n", a, b, a >= b);
    print("% <= % = %\n", a, b, a <= b);
    print("% > % = %\n", a, b, a > b);
    print("% < % = %\n", a, b, a < b);
}

int_arithmetic : () {
    a := 5;
    b := 46;

    print("--- $ ---\n", a);
    print("% + % = %\n", a, b, a + b);
    print("% - % = %\n", a, b, a - b);
    print("% * % = %\n", a, b, a * b);
    print("% / % = %\n", a, b, a / b);
    print("% / % = %\n", b, a, b / a);
    print("% \\% % = %\n", a, b, a % b);
    print("% \\% % = %\n", b, a, b % a);
    print("% & % = %\n", a, b, a & b);
    print("% | % = %\n", a, b, a | b);
    print("% ^ % = %\n", a, b, a ^ b);
    print("% << 2 = %\n", a, a << 2);
    print("% >> 2 = %\n", b, b >> 2);

    print("comparisons\n");
    print("% == % = %\n", a, b, a == b);
    print("% != % = %\n", a, b, a != b);
    print("% >= % = %\n", a, b, a >= b);
    print("% <= % = %\n", a, b, a <= b);
    print("% > % = %\n", a, b, a > b);
    print("% < % = %\n", a, b, a < b);
}

bool_operations : () {
    a := true;
    b := false;

    print("% && % = %\n", a, b, a && b);
    print("% && % = %\n", b, a, b && a);
    print("% && % = %\n", a, a, a && a);
    print("% && % = %\n", b, b, b && b);

    print("% || % = %\n", a, b, a || b);
    print("% || % = %\n", b, a, b || a);
    print("% || % = %\n", a, a, a || a);
    print("% || % = %\n", b, b, b || b);
}

int_literals : () {
    hex : u32 = 0x123456;
    dec : s32 = 123456;
    hex64 : u64 = 0x123456789ABCDEF;
    dec64 : s64 = 12345678912345678;
    bin : u32 = 0b1111;
    ptr := null;
    char := 'a';
    b := true;

    print("% $\n", hex, hex);
    print("% $\n", dec, dec);
    print("% $\n", hex64, hex64);
    print("% $\n", dec64, dec64);
    print("% $\n", bin, bin);
    print("% $\n", ptr, ptr);
    print("% $\n", char, char);
    print("% $\n", b, b);
}

float_literals : () {
    a : r32 = 3.14159;
    b : r64 = 3.14159;

    print("% $\n", a, a);
    print("% $\n", b, b);
}

unary_ops : () {
    a := 44;
    ptr := &a;
    b := true;

    print("-% = %\n", a, -a);
    print("+% = %\n", a, +a);
    print("~% = %\n", a, ~a);
    print("&a = %\n", &a);
    print("*ptr = %\n", *ptr);
    print("!% = %\n", b, !b);

    {
        // cast
        int64 : s64 = 12345678910111213;
        int32 : s32 = 123456789;
        int16 : s16 = 1234;
        int8  : s8 = 12;

        print("--- signed -> signed ---\n");
        print("% -> s64 = %\n", int32, int32 -> s64);
        print("% -> s64 = %\n", int16, int16 -> s64);
        print("% -> s64 = %\n", int8, int8 -> s64);

        print("% -> s32 = %\n", int64, int64 -> s32);
        print("% -> s32 = %\n", int16, int16 -> s32);
        print("% -> s32 = %\n", int8, int8 -> s32);

        print("% -> s16 = %\n", int64, int64 -> s16);
        print("% -> s16 = %\n", int32, int32 -> s16);
        print("% -> s16 = %\n", int8, int8 -> s16);

        print("% -> s8 = %\n", int64, int64 -> s8);
        print("% -> s8 = %\n", int32, int32 -> s8);
        print("% -> s8 = %\n", int16, int16 -> s8);
    }

    {
        // cast
        uint64 : u64 = 12345678910111213;
        uint32 : u32 = 123456789;
        uint16 : u16 = 1234;
        uint8  : u8 = 12;

        print("--- unsigned -> unsigned ---\n");
        print("% -> u64 = %\n", uint32, uint32 -> u64);
        print("% -> u64 = %\n", uint16, uint16 -> u64);
        print("% -> u64 = %\n", uint8, uint8 -> u64);

        print("% -> u32 = %\n", uint64, uint64 -> u32);
        print("% -> u32 = %\n", uint16, uint16 -> u32);
        print("% -> u32 = %\n", uint8, uint8 -> u32);

        print("% -> u16 = %\n", uint64, uint64 -> u16);
        print("% -> u16 = %\n", uint32, uint32 -> u16);
        print("% -> u16 = %\n", uint8, uint8 -> u16);

        print("% -> u8 = %\n", uint64, uint64 -> u8);
        print("% -> u8 = %\n", uint32, uint32 -> u8);
        print("% -> u8 = %\n", uint16, uint16 -> u8);
    }

    {
        // cast
        uint64 : u64 = 12345678910111213;
        uint32 : u32 = 123456789;
        uint16 : u16 = 1234;
        uint8  : u8 = 12;

        print("--- unsigned -> signed ---\n");
        print("% -> s64 = %\n", uint32, uint32 -> s64);
        print("% -> s64 = %\n", uint16, uint16 -> s64);
        print("% -> s64 = %\n", uint8, uint8 -> s64);

        print("% -> s32 = %\n", uint64, uint64 -> s32);
        print("% -> s32 = %\n", uint16, uint16 -> s32);
        print("% -> s32 = %\n", uint8, uint8 -> s32);

        print("% -> s16 = %\n", uint64, uint64 -> s16);
        print("% -> s16 = %\n", uint32, uint32 -> s16);
        print("% -> s16 = %\n", uint8, uint8 -> s16);

        print("% -> s8 = %\n", uint64, uint64 -> s8);
        print("% -> s8 = %\n", uint32, uint32 -> s8);
        print("% -> s8 = %\n", uint16, uint16 -> s8);
    }

    {
        // cast
        int64 : s64 = -(12345678910111213 -> s64);
        int32 : s32 = -123456789;
        int16 : s16 = -(1234 -> s16);
        int8  : s8 = -(12 -> s8);

        print("--- signed -> unsigned ---\n");
        print("% -> u64 = %\n", int32, int32 -> u64);
        print("% -> u64 = %\n", int16, int16 -> u64);
        print("% -> u64 = %\n", int8, int8 -> u64);

        print("% -> u32 = %\n", int64, int64 -> u32);
        print("% -> u32 = %\n", int16, int16 -> u32);
        print("% -> u32 = %\n", int8, int8 -> u32);

        print("% -> u16 = %\n", int64, int64 -> u16);
        print("% -> u16 = %\n", int32, int32 -> u16);
        print("% -> u16 = %\n", int8, int8 -> u16);

        print("% -> u8 = %\n", int64, int64 -> u8);
        print("% -> u8 = %\n", int32, int32 -> u8);
        print("% -> u8 = %\n", int16, int16 -> u8);
    }
}

arrays : () {
    ar := [[1,2,3],[4,5,6],[7,8,9]];

    print("%\n", ar);
    print("%\n", ar[2 - 1][1]);
}

vec3 struct {
    x : r32;
    y : r32;
    z : r32;
}

structs : () {
    v : vec3 = vec3:{ 1.0, 2.0, 3.0 };
    ar := [vec3:{1.0, 2.0, 3.0}, vec3:{4.0, 5.0, 6.0}, vec3:{7.0, 8.0, 9.0}];

    print("v = % -> $\n", v, v);
    print("v.y = %\n", v.y);
    print("v.x + v.y + v.z = %\n", v.x + v.y + v.z);

    print("ar = %\n", ar);
    print("ar[1].y = %\n", ar[1].y);
}

command_if : () {
    a := 32;
    b := 55;

    if a > b {
        print("% > %\n", a, b);
    } else {
        print("% <= %\n", a, b);
    }

    if a + b > 10 && print("should not print") != 0 {
        print("This should print first\n");
    } else {
        print("Error in command_if()\n");
    }
}

command_for : () {
    result := 0;
    for y := 0; y < 10; y += 1 {
        for x := 0; x < 10; x += 1 {
            result += x + y;
        }
    }
    print("command_for: %\n", result);
}

command_break : () {
    a := 0;
    while true {
        if a > 1000 {
            break;
        }
        a += 1;
    }
    print("command_break: %\n", a);

    for y := 0; y < 10; y += 1 {
        for x := 0; x < 10; x += 1 {
            print("\tcmd_break: % %\n", x, y);
            if x == 5 && x == y
                break 2;
        }
    }
}

command_continue : () {
    count_odd := 0;
    for i := 0; i < 100; i += 1 {
        if i % 2 == 0 {
            continue;
        }
        count_odd += 1;
    }
    print("Odd numbers [0..100) = %\n", count_odd);
}

command_assigment : () {
    {
        aint64 : s64 = 33;
        aint32 : s32 = 33;
        aint16 : s16 = 33;
        aint8  : s8 = 33;

        bint64 : s64;
        bint32 : s32;
        bint16 : s16;
        bint8  : s8;
        // signed integers
        print("--- signed integer assignment ---\n");
        bint64 = aint64;
        bint32 = aint32;
        bint16 = aint16;
        bint8 = aint8;
        print("bint64 = %\n", bint64);
        print("bint32 = %\n", bint32);
        print("bint16 = %\n", bint16);
        print("bint8  = %\n", bint8);
    }

    {
        auint64 : u64 = 33;
        auint32 : u32 = 33;
        auint16 : u16 = 33;
        auint8  : u8 = 33;

        buint64 : u64;
        buint32 : u32;
        buint16 : u16;
        buint8  : u8;
        // unsigned integers
        print("--- unsigned integer assignment ---\n");
        buint64 = auint64;
        buint32 = auint32;
        buint16 = auint16;
        buint8 = auint8;
        print("buint64 = %\n", buint64);
        print("buint32 = %\n", buint32);
        print("buint16 = %\n", buint16);
        print("buint8  = %\n", buint8);
    }

    {
        af32 : r32 = 3.14;
        af64 : r64 = 3.14;
        bf32 : r32;
        bf64 : r64;

        print("--- float assignment ---\n");
        bf32 = af32;
        bf64 = af64;
        print("bf32 = %\n", bf32);
        print("bf64 = %\n", bf64);
    }

    {
        // array assignment
        a := [1,2,3,4,5,6,7,8];
        b := [0,0,0,0,0,0,0,0];

        b = a;

        print("--- array assignment ---\n");
        print("a = %\n", a);
        print("b = a;\n");
        print("b = %\n", b);
    }

    {
        a := vec3:{1.0, 2.0, 3.0};
        b : vec3;

        b = a;

        print("--- struct assignment ---\n");

        print("a = %\n", a);
        print("b = a;\n");
        print("b = %\n", b);
    }
}

main : () -> s32 {
    //float_arithmetic();
    //int_arithmetic();
    //bool_operations();
    //int_literals();
    //float_literals();
    //unary_ops();
    //arrays();
    //structs();
    //command_if();
    //command_for();
    //command_break();
    //command_continue();
    //command_assigment();
    
    print("---\n\n");
    return 0;
}