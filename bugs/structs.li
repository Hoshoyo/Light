//after s32;

before struct {
    x :s32;
    y :after;
    //t :after;
}

main : () -> s32 {
    //v0 := { a : s32 = 1, b : foo = 2.0};
    //v1 := { a :s32 = 4, b :s32 = 3};  // normal decl
    //v2 := { a := 4,     b :s32 = 3};  // infer only one field
    //v4 := { a := 4,     b := 3};      // infer both
    
    //v5 : struct{ a:s32; b:s32; } = { a :s32 = 4, b :s32 = 3}; // infer and check
    //v6 : struct{ a:s32; b:s32; } = { a :s32 = 4, b :u32 = 3}; // infer and check error

    //v9 : struct{ a:s32; } = { a :s32 = 4.0 }; // infer and check
    //va : struct{ a:s32; } = { b : s32 = 4 }; // name wrong

    //vb1 : before = before:{ 3, 4 }; // check before ok
    //vb2 : before = before:{ 3, 3.4 }; // check before error
    //vc1 : after = after:{ 27, 1.75 }; // check after ok
    //vc2 : after = after:{ 27, 3 }; // check after error

    vd1 := before:{ 3, 4 }; // check before ok
    //vd2 := before:{ 3, 3.4 }; // check before error
    //ve1 := after:{ 27, 1.75 }; // check after ok
    //ve2 := after:{ 27, 3 }; // check after error

    a : s32;
    b : [3]s32;
    c : [4][5]r32;
    d : ^s32;
    e : ^^s32;
    f : ^[3]s32;
    g : ^[3]^s32;
    h : ^()->s32;
    i : ^(s32) -> void;
    j : ^(s32, s32) -> ^bool;
    k : ^(s32) -> () -> r32;
    l : ^()->[3]s32;

    return 0;
}

//after struct {
//    age    :s32;
//    height :r32;
//}
after s32;

foo r32;